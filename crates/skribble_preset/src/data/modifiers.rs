use lazy_static::lazy_static;
use skribble_core::Group;
use skribble_core::Modifier;

lazy_static! {
  pub(crate) static ref MODIFIERS: Vec<Group<Modifier>> = vec![
    Group::builder()
      .name("parentGroup")
      .description("These are modifiers that are affect the class name based on parent selectors")
      .items(vec![
        Modifier::builder()
          .name("rtl")
          .values(vec!["[dir=rtl] &"])
          .description(
            "This class modifier becomes active when when the text direction of any parent nodes \
             is set to right to left."
          )
          .build(),
        Modifier::builder()
          .name("groupHover")
          .values(vec![
            ".\\$group:hover &",
            ".group:hover &",
            "[role='group']:hover &"
          ])
          .description("This class modifier becomes active when a parent group is hovered.")
          .build(),
        Modifier::builder()
          .name("groupFocus")
          .values(vec![
            ".\\$group:focus &",
            ".group:focus &",
            "[role='group']:focus &"
          ])
          .description("This class modifier becomes active when a parent group is focused.")
          .build(),
        Modifier::builder()
          .name("groupActive")
          .values(vec![
            ".\\$group:active &",
            ".group:active &",
            "[role='group']:active &"
          ])
          .description("This class modifier becomes active when a parent group is active.")
          .build(),
        Modifier::builder()
          .name("groupVisited")
          .values(vec![
            ".\\$group:visited &",
            ".group:visited &",
            "[role='group']:visited &"
          ])
          .description("This class modifier becomes active when a parent group is visited.")
          .build(),
      ])
      .build(),
    Group::builder()
      .name("hoverGroup")
      .items(vec![
        Modifier::builder()
          .name("hover")
          .values(vec!["&:hover"])
          .description("This class modifier becomes active when the element is hovered.")
          .build()
      ])
      .build(),
    Group::builder()
      .name("activeGroup")
      .items(vec![
        Modifier::builder()
          .name("active")
          .values(vec!["&:active"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("focusGroup")
      .items(vec![
        Modifier::builder()
          .name("focus")
          .values(vec!["&:focus"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("focusWithinGroup")
      .items(vec![
        Modifier::builder()
          .name("focusWithin")
          .values(vec!["&:focus-within"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("focusVisibleGroup")
      .items(vec![
        Modifier::builder()
          .name("focusVisible")
          .values(vec!["&:focus-visible"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("enabledGroup")
      .items(vec![
        Modifier::builder()
          .name("disabled")
          .values(vec!["&[disabled]", "&[aria-disabled=true]", "&:disabled"],)
          .build(),
        Modifier::builder()
          .name("notDisabled")
          .values(vec!["&[aria-disabled=false]", "&:disabled"],)
          .build(),
        Modifier::builder()
          .name("enabled")
          .values(vec!["&:enabled"])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("emptyGroup")
      .items(vec![
        Modifier::builder()
          .name("empty")
          .values(vec!["&:empty"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("readGroup")
      .items(vec![
        Modifier::builder()
          .name("readWrite")
          .values(vec!["&:read-write"],)
          .build(),
        Modifier::builder()
          .name("readOnly")
          .values(vec!["&[aria-readonly=true]", "&[readonly]", "&:read-only"],)
          .build(),
        Modifier::builder()
          .name("notReadOnly")
          .values(vec![
            "&[aria-readonly=false]",
            "&[readonly=false]",
            "&:not(:read-only)"
          ])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("expandedGroup")
      .items(vec![
        Modifier::builder()
          .name("expanded")
          .values(vec!["&[aria-expanded=true]"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("checkedGroup")
      .items(vec![
        Modifier::builder()
          .name("indeterminate")
          .values(vec!["&:indeterminate", "&[aria-checked=mixed]"],)
          .build(),
        Modifier::builder()
          .name("checked")
          .values(vec!["&[aria-checked=true]", "&:checked"],)
          .build(),
        Modifier::builder()
          .name("unchecked")
          .values(vec!["&[aria-checked=false]", "&:not(:checked)"])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("grabbedGroup")
      .items(vec![
        Modifier::builder()
          .name("grabbed")
          .values(vec!["&[aria-grabbed=true]"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("pressedGroup")
      .items(vec![
        Modifier::builder()
          .name("pressed")
          .values(vec!["&[aria-pressed=true]"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("invalidGrammarGroup")
      .items(vec![
        Modifier::builder()
          .name("invalidGrammar")
          .values(vec!["&[aria-invalid=grammar]"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("invalidSpellingGroup")
      .items(vec![
        Modifier::builder()
          .name("invalidSpelling")
          .values(vec!["&[aria-invalid=spelling]"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("validGroup")
      .items(vec![
        Modifier::builder()
          .name("valid")
          .values(vec!["&[aria-invalid=false]", "&:valid"],)
          .build(),
        Modifier::builder()
          .name("invalid")
          .values(vec!["&[aria-invalid=true]", "&:invalid"])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("loadingGroup")
      .items(vec![
        Modifier::builder()
          .name("loading")
          .values(vec!["&[aria-busy=true]"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("selectedGroup")
      .items(vec![
        Modifier::builder()
          .name("selected")
          .values(vec!["&[aria-selected=true]"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("hiddenGroup")
      .items(vec![
        Modifier::builder()
          .name("ariaHidden")
          .values(vec!["&[aria-hidden=true]"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("autofillGroup")
      .items(vec![
        Modifier::builder()
          .name("autofill")
          .values(vec!["&:-webkit-autofill"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("evenGroup")
      .items(vec![
        Modifier::builder()
          .name("even")
          .values(vec!["&:even"])
          .build(),
        Modifier::builder()
          .name("odd")
          .values(vec!["&:odd"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("evenGroup")
      .items(vec![
        Modifier::builder()
          .name("evenOfType")
          .values(vec!["&:nth-of-type(even)"],)
          .build(),
        Modifier::builder()
          .name("oddOfType")
          .values(vec!["&:nth-of-type(odd)"])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("nodePositionGroup")
      .items(vec![
        Modifier::builder()
          .name("first")
          .values(vec!["&:first"],)
          .build(),
        Modifier::builder()
          .name("notFirst")
          .values(vec!["&:not(:first-child)"],)
          .build(),
        Modifier::builder()
          .name("last")
          .values(vec!["&:last"],)
          .build(),
        Modifier::builder()
          .name("notLast")
          .values(vec!["&:not(:last-child)"])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("nodeOfTypeGroup")
      .items(vec![
        Modifier::builder()
          .name("firstOfType")
          .values(vec!["&:first-of-type"],)
          .build(),
        Modifier::builder()
          .name("notFirstOfType")
          .values(vec!["&:not(:first-of-type)"],)
          .build(),
        Modifier::builder()
          .name("lastOfType")
          .values(vec!["&:last-of-type"],)
          .build(),
        Modifier::builder()
          .name("notLastOfType")
          .values(vec!["&:not(:last-of-type)"])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("visitedGroup")
      .items(vec![
        Modifier::builder()
          .name("visited")
          .values(vec!["&:visited"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("optionalGroup")
      .items(vec![
        Modifier::builder()
          .name("optional")
          .values(vec!["&:optional"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("activeGroup")
      .items(vec![
        Modifier::builder()
          .name("activeLink")
          .values(vec!["&[aria-current=page]"],)
          .build(),
        Modifier::builder()
          .name("activeLocation")
          .values(vec!["&[aria-current=location]"],)
          .build(),
        Modifier::builder()
          .name("activeDate")
          .values(vec!["&[aria-current=date]"],)
          .build(),
        Modifier::builder()
          .name("activeTime")
          .values(vec!["&[aria-current=time]"],)
          .build(),
        Modifier::builder()
          .name("activeStep")
          .values(vec!["&[aria-current=step]"])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("fullScreenGroup")
      .items(vec![
        Modifier::builder()
          .name("fullScreen")
          .values(vec!["&:fullscreen"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("targetGroup")
      .items(vec![
        Modifier::builder()
          .name("target")
          .values(vec!["&:target"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("placeholderShownGroup")
      .items(vec![
        Modifier::builder()
          .name("placeholderShown")
          .values(vec!["&:placeholder-shown"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("requiredGroup")
      .items(vec![
        Modifier::builder()
          .name("required")
          .values(vec!["[aria-required=true]", "&:required"],)
          .build(),
        Modifier::builder()
          .name("notRequired")
          .values(vec!["[arira-required=false]", "&:not(:required)"])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("defaultGroup")
      .items(vec![
        Modifier::builder()
          .name("default")
          .values(vec!["&:default"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("onlyChildGroup")
      .items(vec![
        Modifier::builder()
          .name("onlyChild")
          .values(vec!["&:only-child"])
          .build(),
        Modifier::builder()
          .name("notOnlyChild")
          .values(vec!["&:not(:only-child)"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("onlyGroup")
      .items(vec![
        Modifier::builder()
          .name("onlyOfType")
          .values(vec!["&:only-of-type"],)
          .build(),
        Modifier::builder()
          .name("notOnlyOfType")
          .values(vec!["&:not(:only-of-type)"])
          .build(),
      ])
      .build(),
    Group::builder()
      .name("rootGroup")
      .items(vec![
        Modifier::builder()
          .name("root")
          .values(vec!["&:root"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("linkGroup")
      .items(vec![
        Modifier::builder()
          .name("link")
          .values(vec!["&:link"])
          .build()
      ])
      .build(),
    Group::builder()
      .name("pseudoGroup")
      .items(vec![
        Modifier::builder()
          .name("placeholder")
          .values(vec!["&::placeholder"],)
          .build(),
        Modifier::builder()
          .name("selection")
          .values(vec!["&::selection"],)
          .build(),
        Modifier::builder()
          .name("firstLetter")
          .values(vec!["&::first-letter"],)
          .build(),
        Modifier::builder()
          .name("firstLine")
          .values(vec!["&::first-line"],)
          .build(),
        Modifier::builder()
          .name("before")
          .values(vec!["&::before"],)
          .build(),
        Modifier::builder()
          .name("after")
          .values(vec!["&::after"])
          .build(),
      ])
      .build(),
  ];
  pub(crate) static ref DARK_PARENT_MODIFIERS: Group<Modifier> = Group::builder()
    .name("parentGroup")
    .items(vec![
      Modifier::builder()
        .name("light")
        .values(vec![".light &"])
        .description("This class modifier becomes active when the light mode is enabled.")
        .build(),
      Modifier::builder()
        .name("dark")
        .values(vec![".dark &"])
        .description("This class modifier becomes active when the dark mode is enabled.")
        .build(),
    ])
    .build();
}
