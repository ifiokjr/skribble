#![allow(unused)]
// This file was generated by skribble.
use private::GeneratedSkribbleValue;
pub fn sk() -> GeneratedSkribbleRoot {
  GeneratedSkribbleRoot::from_ref("")
}
pub struct GeneratedSkribbleRoot(String);
impl GeneratedSkribbleValue for GeneratedSkribbleRoot {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
mod private {
  #[doc(hidden)]
  pub trait GeneratedSkribbleValue {
    fn from_ref(value: impl AsRef<str>) -> Self;
    fn get_skribble_value(&self) -> &String;
    #[inline]
    fn append_to_skribble_value(&self, value: impl AsRef<str>) -> String {
      let current_value = self.get_skribble_value();
      let prefix = if current_value.is_empty() {
        "".into()
      } else {
        format!("{current_value}:")
      };

      format!("{}{}", prefix, value.as_ref())
    }
    #[inline]
    fn append_string_to_skribble_value(&self, value: impl AsRef<str>) -> String {
      format!("{}:${}", self.get_skribble_value(), value.as_ref())
    }
  }
}
pub fn vars() -> GeneratedCssVariables {
  GeneratedCssVariables
}
pub struct GeneratedCssVariables;
impl GeneratedCssVariables {
  /// The primary color. Useful for primary buttons.
  ///
  /// ```css
  /// @property --sk-p {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(258.89362 94.37751% 51.17647%);
  /// }
  /// ```
  #[inline]
  pub fn primary(&self) -> String {
    "--sk-p".into()
  }

  /// The primary content color
  ///
  /// ```css
  /// @property --sk-pc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn primary_content(&self) -> String {
    "--sk-pc".into()
  }

  /// The secondary color. Useful for secondary buttons.
  ///
  /// ```css
  /// @property --sk-s {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(314 100% 47.058823%);
  /// }
  /// ```
  #[inline]
  pub fn secondary(&self) -> String {
    "--sk-s".into()
  }

  /// The secondary content color. Useful for text within secondary buttons.
  ///
  /// ```css
  /// @property --sk-sc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn secondary_content(&self) -> String {
    "--sk-sc".into()
  }

  /// Color for accents.
  ///
  /// ```css
  /// @property --sk-a {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(174 60.000008% 50.980396%);
  /// }
  /// ```
  #[inline]
  pub fn accent(&self) -> String {
    "--sk-a".into()
  }

  /// Color for content within accents.
  ///
  /// ```css
  /// @property --sk-ac {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(174.70587 43.589737% 15.294118%);
  /// }
  /// ```
  #[inline]
  pub fn accent_content(&self) -> String {
    "--sk-ac".into()
  }

  /// The neutral color.
  ///
  /// ```css
  /// @property --sk-n {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(218.99998 14.084508% 27.843138%);
  /// }
  /// ```
  #[inline]
  pub fn neutral(&self) -> String {
    "--sk-n".into()
  }

  /// The neutral content color.
  ///
  /// ```css
  /// @property --sk-nc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn neutral_content(&self) -> String {
    "--sk-nc".into()
  }

  /// The base color.
  ///
  /// ```css
  /// @property --sk-b1 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn base100(&self) -> String {
    "--sk-b1".into()
  }

  /// The secondary base color.
  ///
  /// ```css
  /// @property --sk-b2 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 94.90196%);
  /// }
  /// ```
  #[inline]
  pub fn base200(&self) -> String {
    "--sk-b2".into()
  }

  /// The tertiary base color.
  ///
  /// ```css
  /// @property --sk-b3 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(180 1.9607836% 90%);
  /// }
  /// ```
  #[inline]
  pub fn base300(&self) -> String {
    "--sk-b3".into()
  }

  /// The base content color. This is useful for text.
  ///
  /// ```css
  /// @property --sk-bc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(215 27.906975% 16.862745%);
  /// }
  /// ```
  #[inline]
  pub fn base_content(&self) -> String {
    "--sk-bc".into()
  }

  /// The info color. Useful for info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-in {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(212.34569 100% 47.64706%);
  /// }
  /// ```
  #[inline]
  pub fn info(&self) -> String {
    "--sk-in".into()
  }

  /// The info content color. Useful for text within info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-inc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn info_content(&self) -> String {
    "--sk-inc".into()
  }

  /// The success color. Useful for success buttons and alerts.
  ///
  /// ```css
  /// @property --sk-su {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(136.8421 72.1519% 46.47059%);
  /// }
  /// ```
  #[inline]
  pub fn success(&self) -> String {
    "--sk-su".into()
  }

  /// The success content color. Useful for text within success buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-suc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn success_content(&self) -> String {
    "--sk-suc".into()
  }

  /// The warning color. Useful for warning buttons and alerts.
  ///
  /// ```css
  /// @property --sk-wa {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(4.5614033 100% 66.47059%);
  /// }
  /// ```
  #[inline]
  pub fn warning(&self) -> String {
    "--sk-wa".into()
  }

  /// The warning content color. Useful for text within warning buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-wac {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn warning_content(&self) -> String {
    "--sk-wac".into()
  }

  /// The error color. Useful for error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-er {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(325.05154 77.600006% 49.019608%);
  /// }
  /// ```
  #[inline]
  pub fn error(&self) -> String {
    "--sk-er".into()
  }

  /// The error content color. Useful for text within error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-erc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn error_content(&self) -> String {
    "--sk-erc".into()
  }

  /// ```css
  /// @property --sk-cmw {
  ///   syntax: "*";
  ///   inherits: true;
  ///   initial-value: inherit;
  /// }
  /// ```
  #[inline]
  pub fn contained_max_width(&self) -> String {
    "--sk-cmw".into()
  }

  /// ```css
  /// @property --sk-empty {
  ///   syntax: "*";
  ///   inherits: true;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn empty(&self) -> String {
    "--sk-empty".into()
  }

  /// ```css
  /// @property --sk-filter-blur {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_blur(&self) -> String {
    "--sk-filter-blur".into()
  }

  /// ```css
  /// @property --sk-filter-brightness {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_brightness(&self) -> String {
    "--sk-filter-brightness".into()
  }

  /// ```css
  /// @property --sk-filter-contrast {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_contrast(&self) -> String {
    "--sk-filter-contrast".into()
  }

  /// ```css
  /// @property --sk-filter-custom {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_custom(&self) -> String {
    "--sk-filter-custom".into()
  }

  /// ```css
  /// @property --sk-filter-grayscale {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_grayscale(&self) -> String {
    "--sk-filter-grayscale".into()
  }

  /// ```css
  /// @property --sk-filter-hue-rotate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_hue_rotate(&self) -> String {
    "--sk-filter-hue-rotate".into()
  }

  /// ```css
  /// @property --sk-filter-invert {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_invert(&self) -> String {
    "--sk-filter-invert".into()
  }

  /// ```css
  /// @property --sk-filter-saturate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_saturate(&self) -> String {
    "--sk-filter-saturate".into()
  }

  /// ```css
  /// @property --sk-filter-sepia {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_sepia(&self) -> String {
    "--sk-filter-sepia".into()
  }

  /// ```css
  /// @property --sk-filter-drop-shadow {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_drop_shadow(&self) -> String {
    "--sk-filter-drop-shadow".into()
  }

  /// ```css
  /// @property --sk-group-nested-filter {
  ///   syntax: "*";
  ///   inherits: true;
  ///   initial-value: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  pub fn group_nested_filter(&self) -> String {
    "--sk-group-nested-filter".into()
  }

  /// ```css
  /// @property --sk-backdrop-blur {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_blur(&self) -> String {
    "--sk-backdrop-blur".into()
  }

  /// ```css
  /// @property --sk-backdrop-brightness {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_brightness(&self) -> String {
    "--sk-backdrop-brightness".into()
  }

  /// ```css
  /// @property --sk-backdrop-contrast {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_contrast(&self) -> String {
    "--sk-backdrop-contrast".into()
  }

  /// ```css
  /// @property --sk-backdrop-custom {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_custom(&self) -> String {
    "--sk-backdrop-custom".into()
  }

  /// ```css
  /// @property --sk-backdrop-grayscale {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_grayscale(&self) -> String {
    "--sk-backdrop-grayscale".into()
  }

  /// ```css
  /// @property --sk-backdrop-hue-rotate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_hue_rotate(&self) -> String {
    "--sk-backdrop-hue-rotate".into()
  }

  /// ```css
  /// @property --sk-backdrop-invert {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_invert(&self) -> String {
    "--sk-backdrop-invert".into()
  }

  /// ```css
  /// @property --sk-backdrop-saturate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_saturate(&self) -> String {
    "--sk-backdrop-saturate".into()
  }

  /// ```css
  /// @property --sk-backdrop-sepia {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_sepia(&self) -> String {
    "--sk-backdrop-sepia".into()
  }

  /// ```css
  /// @property --sk-backdrop-drop-shadow {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_drop_shadow(&self) -> String {
    "--sk-backdrop-drop-shadow".into()
  }

  /// ```css
  /// @property --sk-gnb {
  ///   syntax: "*";
  ///   inherits: true;
  ///   initial-value: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  pub fn group_nested_backdrop(&self) -> String {
    "--sk-gnb".into()
  }

  /// ```css
  /// @property --sk-transition-duration {
  ///   syntax: "<time>";
  ///   inherits: true;
  ///   initial-value: 150ms;
  /// }
  /// ```
  #[inline]
  pub fn transition_duration(&self) -> String {
    "--sk-transition-duration".into()
  }

  /// ```css
  /// @property --sk-animation-duration {
  ///   syntax: "<time>";
  ///   inherits: true;
  ///   initial-value: 1s;
  /// }
  /// ```
  #[inline]
  pub fn animation_duration(&self) -> String {
    "--sk-animation-duration".into()
  }

  /// ```css
  /// @property --sk-enter-opacity {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn enter_opacity(&self) -> String {
    "--sk-enter-opacity".into()
  }

  /// ```css
  /// @property --sk-enter-tx {
  ///   syntax: "<length-percentage>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn enter_translate_x(&self) -> String {
    "--sk-enter-tx".into()
  }

  /// ```css
  /// @property --sk-enter-ty {
  ///   syntax: "<length-percentage>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn enter_translate_y(&self) -> String {
    "--sk-enter-ty".into()
  }

  /// ```css
  /// @property --sk-enter-sx {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn enter_scale_x(&self) -> String {
    "--sk-enter-sx".into()
  }

  /// ```css
  /// @property --sk-enter-sy {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn enter_scale_y(&self) -> String {
    "--sk-enter-sy".into()
  }

  /// ```css
  /// @property --sk-enter-rotate {
  ///   syntax: "<angle>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn enter_rotate(&self) -> String {
    "--sk-enter-rotate".into()
  }

  /// ```css
  /// @property --sk-exit-opacity {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn exit_opacity(&self) -> String {
    "--sk-exit-opacity".into()
  }

  /// ```css
  /// @property --sk-exit-tx {
  ///   syntax: "<length-percentage>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn exit_translate_x(&self) -> String {
    "--sk-exit-tx".into()
  }

  /// ```css
  /// @property --sk-exit-ty {
  ///   syntax: "<length-percentage>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn exit_translate_y(&self) -> String {
    "--sk-exit-ty".into()
  }

  /// ```css
  /// @property --sk-exit-sx {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn exit_scale_x(&self) -> String {
    "--sk-exit-sx".into()
  }

  /// ```css
  /// @property --sk-exit-sy {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn exit_scale_y(&self) -> String {
    "--sk-exit-sy".into()
  }

  /// ```css
  /// @property --sk-exit-rotate {
  ///   syntax: "<angle>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn exit_rotate(&self) -> String {
    "--sk-exit-rotate".into()
  }
}
pub struct MediaQueryDeviceCategoriesChild(String);
impl GeneratedSkribbleValue for MediaQueryDeviceCategoriesChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryDeviceCategories: GeneratedSkribbleValue {
  /// The media query for devices with a screen.
  ///
  /// ```css
  /// @media screen {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn screen(&self) -> MediaQueryDeviceCategoriesChild {
    MediaQueryDeviceCategoriesChild::from_ref(self.append_to_skribble_value("screen"))
  }
  /// The media query for devices with a printer.
  ///
  /// ```css
  /// @media print {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn print(&self) -> MediaQueryDeviceCategoriesChild {
    MediaQueryDeviceCategoriesChild::from_ref(self.append_to_skribble_value("print"))
  }
}
pub struct MediaQueryBreakpointsChild(String);
impl GeneratedSkribbleValue for MediaQueryBreakpointsChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryBreakpoints: GeneratedSkribbleValue {
  /// The breakpoint for devices with screen size greater than tiny.
  ///
  /// ```css
  /// @media (min-width: 640px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn sm(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("sm"))
  }
  /// The breakpoint for devices screen size greater than medium
  ///
  /// ```css
  /// @media (min-width: 768px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn md(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("md"))
  }
  /// The breakpoint for devices screen size greater than large
  ///
  /// ```css
  /// @media (min-width: 1024px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn lg(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("lg"))
  }
  /// The breakpoint for devices screen size greater than extra large
  ///
  /// ```css
  /// @media (min-width: 1280px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn xl(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("xl"))
  }
  /// The breakpoint for devices screen size greater than xxl
  ///
  /// ```css
  /// @media (min-width: 1536px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn xxl(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("xxl"))
  }
}
pub struct MediaQueryOrientationChild(String);
impl GeneratedSkribbleValue for MediaQueryOrientationChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryOrientation: GeneratedSkribbleValue {
  /// The media query for devices with a portrait orientation.
  ///
  /// ```css
  /// @media (orientation: portrait) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn portrait(&self) -> MediaQueryOrientationChild {
    MediaQueryOrientationChild::from_ref(self.append_to_skribble_value("portrait"))
  }
  /// The media query for devices with a landscape orientation.
  ///
  /// ```css
  /// @media (orientation: landscape) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn landscape(&self) -> MediaQueryOrientationChild {
    MediaQueryOrientationChild::from_ref(self.append_to_skribble_value("landscape"))
  }
}
pub struct MediaQueryMotionChild(String);
impl GeneratedSkribbleValue for MediaQueryMotionChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryMotion: GeneratedSkribbleValue {
  /// The media query for devices with a reduced motion preference.
  ///
  /// ```css
  /// @media (prefers-reduced-motion: reduce) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn motion_reduce(&self) -> MediaQueryMotionChild {
    MediaQueryMotionChild::from_ref(self.append_to_skribble_value("motionReduce"))
  }
  /// The media query for devices with a no preference motion preference.
  ///
  /// ```css
  /// @media (prefers-reduced-motion: no-preference) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn motion_safe(&self) -> MediaQueryMotionChild {
    MediaQueryMotionChild::from_ref(self.append_to_skribble_value("motionSafe"))
  }
}
pub struct MediaQueryDarkModeChild(String);
impl GeneratedSkribbleValue for MediaQueryDarkModeChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryDarkMode: GeneratedSkribbleValue {
  /// The media query for devices with a dark color scheme.
  ///
  /// ```css
  /// @media (prefers-color-scheme: dark) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn dark(&self) -> MediaQueryDarkModeChild {
    MediaQueryDarkModeChild::from_ref(self.append_to_skribble_value("dark"))
  }
  /// The media query for devices with a light color scheme.
  ///
  /// ```css
  /// @media (prefers-color-scheme: light) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn light(&self) -> MediaQueryDarkModeChild {
    MediaQueryDarkModeChild::from_ref(self.append_to_skribble_value("light"))
  }
}
pub struct ModifierParentGroupChild(String);
impl GeneratedSkribbleValue for ModifierParentGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierParentGroup: GeneratedSkribbleValue {
  /// This class modifier becomes active when when the text direction of any
  /// parent nodes is set to right to left.
  ///
  /// ```css
  /// [dir=rtl] & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn rtl(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("rtl"))
  }
  /// This class modifier becomes active when a parent group is hovered.
  ///
  /// ```css
  /// .\$group:hover &, .group:hover &, [role='group']:hover & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_hover(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("groupHover"))
  }
  /// This class modifier becomes active when a parent group is focused.
  ///
  /// ```css
  /// .\$group:focus &, .group:focus &, [role='group']:focus & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_focus(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("groupFocus"))
  }
  /// This class modifier becomes active when a parent group is active.
  ///
  /// ```css
  /// .\$group:active &, .group:active &, [role='group']:active & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_active(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("groupActive"))
  }
  /// This class modifier becomes active when a parent group is visited.
  ///
  /// ```css
  /// .\$group:visited &, .group:visited &, [role='group']:visited & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_visited(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("groupVisited"))
  }
}
pub struct ModifierHoverGroupChild(String);
impl GeneratedSkribbleValue for ModifierHoverGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierHoverGroup: GeneratedSkribbleValue {
  /// This class modifier becomes active when the element is hovered.
  ///
  /// ```css
  /// &:hover {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn hover(&self) -> ModifierHoverGroupChild {
    ModifierHoverGroupChild::from_ref(self.append_to_skribble_value("hover"))
  }
}
pub struct ModifierActiveGroupChild(String);
impl GeneratedSkribbleValue for ModifierActiveGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierActiveGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:active {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("active"))
  }
  /// ```css
  /// &[aria-current=page] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_link(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeLink"))
  }
  /// ```css
  /// &[aria-current=location] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_location(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeLocation"))
  }
  /// ```css
  /// &[aria-current=date] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_date(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeDate"))
  }
  /// ```css
  /// &[aria-current=time] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_time(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeTime"))
  }
  /// ```css
  /// &[aria-current=step] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_step(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeStep"))
  }
}
pub struct ModifierFocusGroupChild(String);
impl GeneratedSkribbleValue for ModifierFocusGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierFocusGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:focus {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn focus(&self) -> ModifierFocusGroupChild {
    ModifierFocusGroupChild::from_ref(self.append_to_skribble_value("focus"))
  }
}
pub struct ModifierFocusWithinGroupChild(String);
impl GeneratedSkribbleValue for ModifierFocusWithinGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierFocusWithinGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:focus-within {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn focus_within(&self) -> ModifierFocusWithinGroupChild {
    ModifierFocusWithinGroupChild::from_ref(self.append_to_skribble_value("focusWithin"))
  }
}
pub struct ModifierFocusVisibleGroupChild(String);
impl GeneratedSkribbleValue for ModifierFocusVisibleGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierFocusVisibleGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:focus-visible {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn focus_visible(&self) -> ModifierFocusVisibleGroupChild {
    ModifierFocusVisibleGroupChild::from_ref(self.append_to_skribble_value("focusVisible"))
  }
}
pub struct ModifierEnabledGroupChild(String);
impl GeneratedSkribbleValue for ModifierEnabledGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierEnabledGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[disabled], &[aria-disabled=true], &:disabled {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn disabled(&self) -> ModifierEnabledGroupChild {
    ModifierEnabledGroupChild::from_ref(self.append_to_skribble_value("disabled"))
  }
  /// ```css
  /// &[aria-disabled=false], &:disabled {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_disabled(&self) -> ModifierEnabledGroupChild {
    ModifierEnabledGroupChild::from_ref(self.append_to_skribble_value("notDisabled"))
  }
  /// ```css
  /// &:enabled {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn enabled(&self) -> ModifierEnabledGroupChild {
    ModifierEnabledGroupChild::from_ref(self.append_to_skribble_value("enabled"))
  }
}
pub struct ModifierEmptyGroupChild(String);
impl GeneratedSkribbleValue for ModifierEmptyGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierEmptyGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:empty {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn empty(&self) -> ModifierEmptyGroupChild {
    ModifierEmptyGroupChild::from_ref(self.append_to_skribble_value("empty"))
  }
}
pub struct ModifierReadGroupChild(String);
impl GeneratedSkribbleValue for ModifierReadGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierReadGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:read-write {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn read_write(&self) -> ModifierReadGroupChild {
    ModifierReadGroupChild::from_ref(self.append_to_skribble_value("readWrite"))
  }
  /// ```css
  /// &[aria-readonly=true], &[readonly], &:read-only {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn read_only(&self) -> ModifierReadGroupChild {
    ModifierReadGroupChild::from_ref(self.append_to_skribble_value("readOnly"))
  }
  /// ```css
  /// &[aria-readonly=false], &[readonly=false], &:not(:read-only) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_read_only(&self) -> ModifierReadGroupChild {
    ModifierReadGroupChild::from_ref(self.append_to_skribble_value("notReadOnly"))
  }
}
pub struct ModifierExpandedGroupChild(String);
impl GeneratedSkribbleValue for ModifierExpandedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierExpandedGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-expanded=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn expanded(&self) -> ModifierExpandedGroupChild {
    ModifierExpandedGroupChild::from_ref(self.append_to_skribble_value("expanded"))
  }
}
pub struct ModifierCheckedGroupChild(String);
impl GeneratedSkribbleValue for ModifierCheckedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierCheckedGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:indeterminate, &[aria-checked=mixed] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn indeterminate(&self) -> ModifierCheckedGroupChild {
    ModifierCheckedGroupChild::from_ref(self.append_to_skribble_value("indeterminate"))
  }
  /// ```css
  /// &[aria-checked=true], &:checked {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn checked(&self) -> ModifierCheckedGroupChild {
    ModifierCheckedGroupChild::from_ref(self.append_to_skribble_value("checked"))
  }
  /// ```css
  /// &[aria-checked=false], &:not(:checked) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn unchecked(&self) -> ModifierCheckedGroupChild {
    ModifierCheckedGroupChild::from_ref(self.append_to_skribble_value("unchecked"))
  }
}
pub struct ModifierGrabbedGroupChild(String);
impl GeneratedSkribbleValue for ModifierGrabbedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierGrabbedGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-grabbed=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn grabbed(&self) -> ModifierGrabbedGroupChild {
    ModifierGrabbedGroupChild::from_ref(self.append_to_skribble_value("grabbed"))
  }
}
pub struct ModifierPressedGroupChild(String);
impl GeneratedSkribbleValue for ModifierPressedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierPressedGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-pressed=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn pressed(&self) -> ModifierPressedGroupChild {
    ModifierPressedGroupChild::from_ref(self.append_to_skribble_value("pressed"))
  }
}
pub struct ModifierInvalidGrammarGroupChild(String);
impl GeneratedSkribbleValue for ModifierInvalidGrammarGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierInvalidGrammarGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-invalid=grammar] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn invalid_grammar(&self) -> ModifierInvalidGrammarGroupChild {
    ModifierInvalidGrammarGroupChild::from_ref(self.append_to_skribble_value("invalidGrammar"))
  }
}
pub struct ModifierInvalidSpellingGroupChild(String);
impl GeneratedSkribbleValue for ModifierInvalidSpellingGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierInvalidSpellingGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-invalid=spelling] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn invalid_spelling(&self) -> ModifierInvalidSpellingGroupChild {
    ModifierInvalidSpellingGroupChild::from_ref(self.append_to_skribble_value("invalidSpelling"))
  }
}
pub struct ModifierValidGroupChild(String);
impl GeneratedSkribbleValue for ModifierValidGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierValidGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-invalid=false], &:valid {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn valid(&self) -> ModifierValidGroupChild {
    ModifierValidGroupChild::from_ref(self.append_to_skribble_value("valid"))
  }
  /// ```css
  /// &[aria-invalid=true], &:invalid {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn invalid(&self) -> ModifierValidGroupChild {
    ModifierValidGroupChild::from_ref(self.append_to_skribble_value("invalid"))
  }
}
pub struct ModifierLoadingGroupChild(String);
impl GeneratedSkribbleValue for ModifierLoadingGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierLoadingGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-busy=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn loading(&self) -> ModifierLoadingGroupChild {
    ModifierLoadingGroupChild::from_ref(self.append_to_skribble_value("loading"))
  }
}
pub struct ModifierSelectedGroupChild(String);
impl GeneratedSkribbleValue for ModifierSelectedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierSelectedGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-selected=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn selected(&self) -> ModifierSelectedGroupChild {
    ModifierSelectedGroupChild::from_ref(self.append_to_skribble_value("selected"))
  }
}
pub struct ModifierHiddenGroupChild(String);
impl GeneratedSkribbleValue for ModifierHiddenGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierHiddenGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-hidden=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_hidden(&self) -> ModifierHiddenGroupChild {
    ModifierHiddenGroupChild::from_ref(self.append_to_skribble_value("ariaHidden"))
  }
}
pub struct ModifierAutofillGroupChild(String);
impl GeneratedSkribbleValue for ModifierAutofillGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierAutofillGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:-webkit-autofill {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn autofill(&self) -> ModifierAutofillGroupChild {
    ModifierAutofillGroupChild::from_ref(self.append_to_skribble_value("autofill"))
  }
}
pub struct ModifierEvenGroupChild(String);
impl GeneratedSkribbleValue for ModifierEvenGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierEvenGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:even {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn even(&self) -> ModifierEvenGroupChild {
    ModifierEvenGroupChild::from_ref(self.append_to_skribble_value("even"))
  }
  /// ```css
  /// &:odd {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn odd(&self) -> ModifierEvenGroupChild {
    ModifierEvenGroupChild::from_ref(self.append_to_skribble_value("odd"))
  }
  /// ```css
  /// &:nth-of-type(even) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn even_of_type(&self) -> ModifierEvenGroupChild {
    ModifierEvenGroupChild::from_ref(self.append_to_skribble_value("evenOfType"))
  }
  /// ```css
  /// &:nth-of-type(odd) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn odd_of_type(&self) -> ModifierEvenGroupChild {
    ModifierEvenGroupChild::from_ref(self.append_to_skribble_value("oddOfType"))
  }
}
pub struct ModifierNodePositionGroupChild(String);
impl GeneratedSkribbleValue for ModifierNodePositionGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierNodePositionGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:first {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first(&self) -> ModifierNodePositionGroupChild {
    ModifierNodePositionGroupChild::from_ref(self.append_to_skribble_value("first"))
  }
  /// ```css
  /// &:not(:first-child) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_first(&self) -> ModifierNodePositionGroupChild {
    ModifierNodePositionGroupChild::from_ref(self.append_to_skribble_value("notFirst"))
  }
  /// ```css
  /// &:last {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn last(&self) -> ModifierNodePositionGroupChild {
    ModifierNodePositionGroupChild::from_ref(self.append_to_skribble_value("last"))
  }
  /// ```css
  /// &:not(:last-child) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_last(&self) -> ModifierNodePositionGroupChild {
    ModifierNodePositionGroupChild::from_ref(self.append_to_skribble_value("notLast"))
  }
}
pub struct ModifierNodeOfTypeGroupChild(String);
impl GeneratedSkribbleValue for ModifierNodeOfTypeGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierNodeOfTypeGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:first-of-type {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first_of_type(&self) -> ModifierNodeOfTypeGroupChild {
    ModifierNodeOfTypeGroupChild::from_ref(self.append_to_skribble_value("firstOfType"))
  }
  /// ```css
  /// &:not(:first-of-type) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_first_of_type(&self) -> ModifierNodeOfTypeGroupChild {
    ModifierNodeOfTypeGroupChild::from_ref(self.append_to_skribble_value("notFirstOfType"))
  }
  /// ```css
  /// &:last-of-type {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn last_of_type(&self) -> ModifierNodeOfTypeGroupChild {
    ModifierNodeOfTypeGroupChild::from_ref(self.append_to_skribble_value("lastOfType"))
  }
  /// ```css
  /// &:not(:last-of-type) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_last_of_type(&self) -> ModifierNodeOfTypeGroupChild {
    ModifierNodeOfTypeGroupChild::from_ref(self.append_to_skribble_value("notLastOfType"))
  }
}
pub struct ModifierVisitedGroupChild(String);
impl GeneratedSkribbleValue for ModifierVisitedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierVisitedGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:visited {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn visited(&self) -> ModifierVisitedGroupChild {
    ModifierVisitedGroupChild::from_ref(self.append_to_skribble_value("visited"))
  }
}
pub struct ModifierOptionalGroupChild(String);
impl GeneratedSkribbleValue for ModifierOptionalGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierOptionalGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:optional {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn optional(&self) -> ModifierOptionalGroupChild {
    ModifierOptionalGroupChild::from_ref(self.append_to_skribble_value("optional"))
  }
}
pub struct ModifierFullScreenGroupChild(String);
impl GeneratedSkribbleValue for ModifierFullScreenGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierFullScreenGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:fullscreen {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn full_screen(&self) -> ModifierFullScreenGroupChild {
    ModifierFullScreenGroupChild::from_ref(self.append_to_skribble_value("fullScreen"))
  }
}
pub struct ModifierTargetGroupChild(String);
impl GeneratedSkribbleValue for ModifierTargetGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierTargetGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:target {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn target(&self) -> ModifierTargetGroupChild {
    ModifierTargetGroupChild::from_ref(self.append_to_skribble_value("target"))
  }
}
pub struct ModifierPlaceholderShownGroupChild(String);
impl GeneratedSkribbleValue for ModifierPlaceholderShownGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierPlaceholderShownGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:placeholder-shown {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn placeholder_shown(&self) -> ModifierPlaceholderShownGroupChild {
    ModifierPlaceholderShownGroupChild::from_ref(self.append_to_skribble_value("placeholderShown"))
  }
}
pub struct ModifierRequiredGroupChild(String);
impl GeneratedSkribbleValue for ModifierRequiredGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierRequiredGroup: GeneratedSkribbleValue {
  /// ```css
  /// [aria-required=true], &:required {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn required(&self) -> ModifierRequiredGroupChild {
    ModifierRequiredGroupChild::from_ref(self.append_to_skribble_value("required"))
  }
  /// ```css
  /// [arira-required=false], &:not(:required) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_required(&self) -> ModifierRequiredGroupChild {
    ModifierRequiredGroupChild::from_ref(self.append_to_skribble_value("notRequired"))
  }
}
pub struct ModifierDefaultGroupChild(String);
impl GeneratedSkribbleValue for ModifierDefaultGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierDefaultGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:default {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn default(&self) -> ModifierDefaultGroupChild {
    ModifierDefaultGroupChild::from_ref(self.append_to_skribble_value("default"))
  }
}
pub struct ModifierOnlyChildGroupChild(String);
impl GeneratedSkribbleValue for ModifierOnlyChildGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierOnlyChildGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:only-child {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn only_child(&self) -> ModifierOnlyChildGroupChild {
    ModifierOnlyChildGroupChild::from_ref(self.append_to_skribble_value("onlyChild"))
  }
  /// ```css
  /// &:not(:only-child) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_only_child(&self) -> ModifierOnlyChildGroupChild {
    ModifierOnlyChildGroupChild::from_ref(self.append_to_skribble_value("notOnlyChild"))
  }
}
pub struct ModifierOnlyGroupChild(String);
impl GeneratedSkribbleValue for ModifierOnlyGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierOnlyGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:only-of-type {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn only_of_type(&self) -> ModifierOnlyGroupChild {
    ModifierOnlyGroupChild::from_ref(self.append_to_skribble_value("onlyOfType"))
  }
  /// ```css
  /// &:not(:only-of-type) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_only_of_type(&self) -> ModifierOnlyGroupChild {
    ModifierOnlyGroupChild::from_ref(self.append_to_skribble_value("notOnlyOfType"))
  }
}
pub struct ModifierRootGroupChild(String);
impl GeneratedSkribbleValue for ModifierRootGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierRootGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:root {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn root(&self) -> ModifierRootGroupChild {
    ModifierRootGroupChild::from_ref(self.append_to_skribble_value("root"))
  }
}
pub struct ModifierLinkGroupChild(String);
impl GeneratedSkribbleValue for ModifierLinkGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierLinkGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:link {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn link(&self) -> ModifierLinkGroupChild {
    ModifierLinkGroupChild::from_ref(self.append_to_skribble_value("link"))
  }
}
pub struct ModifierPseudoGroupChild(String);
impl GeneratedSkribbleValue for ModifierPseudoGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierPseudoGroup: GeneratedSkribbleValue {
  /// ```css
  /// &::placeholder {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn placeholder(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("placeholder"))
  }
  /// ```css
  /// &::selection {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn selection(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("selection"))
  }
  /// ```css
  /// &::first-letter {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first_letter(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("firstLetter"))
  }
  /// ```css
  /// &::first-line {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first_line(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("firstLine"))
  }
  /// ```css
  /// &::before {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn before(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("before"))
  }
  /// ```css
  /// &::after {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn after(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("after"))
  }
}
pub trait GeneratedKeyframeSet: GeneratedSkribbleValue {
  /// Manages the keyframes for the entry animation
  ///
  /// ```css
  /// @keyframes in {
  ///   from {
  ///     opacity: var(--sk-enter-opacity, 1);
  ///     transform: translate3d(var(--sk-enter-tx, 0), var(--sk-enter-ty, 0), 0) scale3d(var(--sk-enter-sx, 1), var(--sk-enter-sy, 1), 1) rotate(var(--sk-enter-rotate, 0deg));
  ///   }
  /// }
  /// ```
  #[inline]
  fn r#in(&self) -> String {
    self.append_string_to_skribble_value("in")
  }
  /// Manages the keyframes for the exit animation.
  ///
  /// ```css
  /// @keyframes out {
  ///   to {
  ///     opacity: var(--sk-exit-opacity, 1);
  ///     transform: translate3d(var(--sk-exit-tx, 0), var(--sk-exit-ty, 0), 0) scale3d(var(--sk-exit-sx, 1), var(--sk-exit-sy, 1), 1) rotate(var(--sk-exit-rotate, 0deg));
  ///   }
  /// }
  /// ```
  #[inline]
  fn out(&self) -> String {
    self.append_string_to_skribble_value("out")
  }
  /// Manages the keyframes for the spin animation.
  ///
  /// ```css
  /// @keyframes spin {
  ///   from {
  ///     transform: rotate(0deg);
  ///   }
  ///   to {
  ///     transform: rotate(360deg);
  ///   }
  /// }
  /// ```
  #[inline]
  fn spin(&self) -> String {
    self.append_string_to_skribble_value("spin")
  }
  /// Manages the keyframes for the ping animation.
  ///
  /// ```css
  /// @keyframes ping {
  ///   75%, 100% {
  ///     transform: scale(2);
  ///     opacity: 0;
  ///   }
  /// }
  /// ```
  #[inline]
  fn ping(&self) -> String {
    self.append_string_to_skribble_value("ping")
  }
  /// Manages the keyframes for the pulse animation.
  ///
  /// ```css
  /// @keyframes pulse {
  ///   0%, 100% {
  ///     opacity: 1;
  ///   }
  ///   50% {
  ///     opacity: 0.5;
  ///   }
  /// }
  /// ```
  #[inline]
  fn pulse(&self) -> String {
    self.append_string_to_skribble_value("pulse")
  }
  /// Manages the keyframes for the bounce animation.
  ///
  /// ```css
  /// @keyframes bounce {
  ///   0%, 100% {
  ///     transform: translateY(-25%);
  ///     animationTimingFunction: cubic-bezier(0.8, 0, 1, 1);
  ///   }
  ///   50% {
  ///     transform: translateY(0);
  ///     animationTimingFunction: cubic-bezier(0, 0, 0.2, 1);
  ///   }
  /// }
  /// ```
  #[inline]
  fn bounce(&self) -> String {
    self.append_string_to_skribble_value("bounce")
  }
}
pub trait GeneratedColorSet: GeneratedSkribbleValue {
  /// The primary color. Useful for primary buttons.
  ///
  /// ```css
  /// @property --sk-p {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(258.89362 94.37751% 51.17647%);
  /// }
  /// ```
  #[inline]
  fn primary(&self) -> String {
    self.append_string_to_skribble_value("primary")
  }
  /// The primary content color
  ///
  /// ```css
  /// @property --sk-pc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn primary_content(&self) -> String {
    self.append_string_to_skribble_value("primaryContent")
  }
  /// The secondary color. Useful for secondary buttons.
  ///
  /// ```css
  /// @property --sk-s {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(314 100% 47.058823%);
  /// }
  /// ```
  #[inline]
  fn secondary(&self) -> String {
    self.append_string_to_skribble_value("secondary")
  }
  /// The secondary content color. Useful for text within secondary buttons.
  ///
  /// ```css
  /// @property --sk-sc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn secondary_content(&self) -> String {
    self.append_string_to_skribble_value("secondaryContent")
  }
  /// Color for accents.
  ///
  /// ```css
  /// @property --sk-a {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(174 60.000008% 50.980396%);
  /// }
  /// ```
  #[inline]
  fn accent(&self) -> String {
    self.append_string_to_skribble_value("accent")
  }
  /// Color for content within accents.
  ///
  /// ```css
  /// @property --sk-ac {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(174.70587 43.589737% 15.294118%);
  /// }
  /// ```
  #[inline]
  fn accent_content(&self) -> String {
    self.append_string_to_skribble_value("accentContent")
  }
  /// The neutral color.
  ///
  /// ```css
  /// @property --sk-n {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(218.99998 14.084508% 27.843138%);
  /// }
  /// ```
  #[inline]
  fn neutral(&self) -> String {
    self.append_string_to_skribble_value("neutral")
  }
  /// The neutral content color.
  ///
  /// ```css
  /// @property --sk-nc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn neutral_content(&self) -> String {
    self.append_string_to_skribble_value("neutralContent")
  }
  /// The base color.
  ///
  /// ```css
  /// @property --sk-b1 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn base100(&self) -> String {
    self.append_string_to_skribble_value("base100")
  }
  /// The secondary base color.
  ///
  /// ```css
  /// @property --sk-b2 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 94.90196%);
  /// }
  /// ```
  #[inline]
  fn base200(&self) -> String {
    self.append_string_to_skribble_value("base200")
  }
  /// The tertiary base color.
  ///
  /// ```css
  /// @property --sk-b3 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(180 1.9607836% 90%);
  /// }
  /// ```
  #[inline]
  fn base300(&self) -> String {
    self.append_string_to_skribble_value("base300")
  }
  /// The base content color. This is useful for text.
  ///
  /// ```css
  /// @property --sk-bc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(215 27.906975% 16.862745%);
  /// }
  /// ```
  #[inline]
  fn base_content(&self) -> String {
    self.append_string_to_skribble_value("baseContent")
  }
  /// The info color. Useful for info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-in {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(212.34569 100% 47.64706%);
  /// }
  /// ```
  #[inline]
  fn info(&self) -> String {
    self.append_string_to_skribble_value("info")
  }
  /// The info content color. Useful for text within info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-inc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn info_content(&self) -> String {
    self.append_string_to_skribble_value("infoContent")
  }
  /// The success color. Useful for success buttons and alerts.
  ///
  /// ```css
  /// @property --sk-su {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(136.8421 72.1519% 46.47059%);
  /// }
  /// ```
  #[inline]
  fn success(&self) -> String {
    self.append_string_to_skribble_value("success")
  }
  /// The success content color. Useful for text within success buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-suc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn success_content(&self) -> String {
    self.append_string_to_skribble_value("successContent")
  }
  /// The warning color. Useful for warning buttons and alerts.
  ///
  /// ```css
  /// @property --sk-wa {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(4.5614033 100% 66.47059%);
  /// }
  /// ```
  #[inline]
  fn warning(&self) -> String {
    self.append_string_to_skribble_value("warning")
  }
  /// The warning content color. Useful for text within warning buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-wac {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn warning_content(&self) -> String {
    self.append_string_to_skribble_value("warningContent")
  }
  /// The error color. Useful for error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-er {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(325.05154 77.600006% 49.019608%);
  /// }
  /// ```
  #[inline]
  fn error(&self) -> String {
    self.append_string_to_skribble_value("error")
  }
  /// The error content color. Useful for text within error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-erc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn error_content(&self) -> String {
    self.append_string_to_skribble_value("errorContent")
  }
  #[inline]
  fn inherit(&self) -> String {
    self.append_string_to_skribble_value("inherit")
  }
  #[inline]
  fn current(&self) -> String {
    self.append_string_to_skribble_value("current")
  }
  #[inline]
  fn transparent(&self) -> String {
    self.append_string_to_skribble_value("transparent")
  }
  #[inline]
  fn black(&self) -> String {
    self.append_string_to_skribble_value("black")
  }
  #[inline]
  fn white(&self) -> String {
    self.append_string_to_skribble_value("white")
  }
  #[inline]
  fn slate50(&self) -> String {
    self.append_string_to_skribble_value("slate50")
  }
  #[inline]
  fn slate100(&self) -> String {
    self.append_string_to_skribble_value("slate100")
  }
  #[inline]
  fn slate200(&self) -> String {
    self.append_string_to_skribble_value("slate200")
  }
  #[inline]
  fn slate300(&self) -> String {
    self.append_string_to_skribble_value("slate300")
  }
  #[inline]
  fn slate400(&self) -> String {
    self.append_string_to_skribble_value("slate400")
  }
  #[inline]
  fn slate500(&self) -> String {
    self.append_string_to_skribble_value("slate500")
  }
  #[inline]
  fn slate600(&self) -> String {
    self.append_string_to_skribble_value("slate600")
  }
  #[inline]
  fn slate700(&self) -> String {
    self.append_string_to_skribble_value("slate700")
  }
  #[inline]
  fn slate800(&self) -> String {
    self.append_string_to_skribble_value("slate800")
  }
  #[inline]
  fn slate900(&self) -> String {
    self.append_string_to_skribble_value("slate900")
  }
  #[inline]
  fn slate950(&self) -> String {
    self.append_string_to_skribble_value("slate950")
  }
  #[inline]
  fn gray50(&self) -> String {
    self.append_string_to_skribble_value("gray50")
  }
  #[inline]
  fn gray100(&self) -> String {
    self.append_string_to_skribble_value("gray100")
  }
  #[inline]
  fn gray200(&self) -> String {
    self.append_string_to_skribble_value("gray200")
  }
  #[inline]
  fn gray300(&self) -> String {
    self.append_string_to_skribble_value("gray300")
  }
  #[inline]
  fn gray400(&self) -> String {
    self.append_string_to_skribble_value("gray400")
  }
  #[inline]
  fn gray500(&self) -> String {
    self.append_string_to_skribble_value("gray500")
  }
  #[inline]
  fn gray600(&self) -> String {
    self.append_string_to_skribble_value("gray600")
  }
  #[inline]
  fn gray700(&self) -> String {
    self.append_string_to_skribble_value("gray700")
  }
  #[inline]
  fn gray800(&self) -> String {
    self.append_string_to_skribble_value("gray800")
  }
  #[inline]
  fn gray900(&self) -> String {
    self.append_string_to_skribble_value("gray900")
  }
  #[inline]
  fn gray950(&self) -> String {
    self.append_string_to_skribble_value("gray950")
  }
  #[inline]
  fn zinc50(&self) -> String {
    self.append_string_to_skribble_value("zinc50")
  }
  #[inline]
  fn zinc100(&self) -> String {
    self.append_string_to_skribble_value("zinc100")
  }
  #[inline]
  fn zinc200(&self) -> String {
    self.append_string_to_skribble_value("zinc200")
  }
  #[inline]
  fn zinc300(&self) -> String {
    self.append_string_to_skribble_value("zinc300")
  }
  #[inline]
  fn zinc400(&self) -> String {
    self.append_string_to_skribble_value("zinc400")
  }
  #[inline]
  fn zinc500(&self) -> String {
    self.append_string_to_skribble_value("zinc500")
  }
  #[inline]
  fn zinc600(&self) -> String {
    self.append_string_to_skribble_value("zinc600")
  }
  #[inline]
  fn zinc700(&self) -> String {
    self.append_string_to_skribble_value("zinc700")
  }
  #[inline]
  fn zinc800(&self) -> String {
    self.append_string_to_skribble_value("zinc800")
  }
  #[inline]
  fn zinc900(&self) -> String {
    self.append_string_to_skribble_value("zinc900")
  }
  #[inline]
  fn zinc950(&self) -> String {
    self.append_string_to_skribble_value("zinc950")
  }
  #[inline]
  fn neutral50(&self) -> String {
    self.append_string_to_skribble_value("neutral50")
  }
  #[inline]
  fn neutral100(&self) -> String {
    self.append_string_to_skribble_value("neutral100")
  }
  #[inline]
  fn neutral200(&self) -> String {
    self.append_string_to_skribble_value("neutral200")
  }
  #[inline]
  fn neutral300(&self) -> String {
    self.append_string_to_skribble_value("neutral300")
  }
  #[inline]
  fn neutral400(&self) -> String {
    self.append_string_to_skribble_value("neutral400")
  }
  #[inline]
  fn neutral500(&self) -> String {
    self.append_string_to_skribble_value("neutral500")
  }
  #[inline]
  fn neutral600(&self) -> String {
    self.append_string_to_skribble_value("neutral600")
  }
  #[inline]
  fn neutral700(&self) -> String {
    self.append_string_to_skribble_value("neutral700")
  }
  #[inline]
  fn neutral800(&self) -> String {
    self.append_string_to_skribble_value("neutral800")
  }
  #[inline]
  fn neutral900(&self) -> String {
    self.append_string_to_skribble_value("neutral900")
  }
  #[inline]
  fn neutral950(&self) -> String {
    self.append_string_to_skribble_value("neutral950")
  }
  #[inline]
  fn stone50(&self) -> String {
    self.append_string_to_skribble_value("stone50")
  }
  #[inline]
  fn stone100(&self) -> String {
    self.append_string_to_skribble_value("stone100")
  }
  #[inline]
  fn stone200(&self) -> String {
    self.append_string_to_skribble_value("stone200")
  }
  #[inline]
  fn stone300(&self) -> String {
    self.append_string_to_skribble_value("stone300")
  }
  #[inline]
  fn stone400(&self) -> String {
    self.append_string_to_skribble_value("stone400")
  }
  #[inline]
  fn stone500(&self) -> String {
    self.append_string_to_skribble_value("stone500")
  }
  #[inline]
  fn stone600(&self) -> String {
    self.append_string_to_skribble_value("stone600")
  }
  #[inline]
  fn stone700(&self) -> String {
    self.append_string_to_skribble_value("stone700")
  }
  #[inline]
  fn stone800(&self) -> String {
    self.append_string_to_skribble_value("stone800")
  }
  #[inline]
  fn stone900(&self) -> String {
    self.append_string_to_skribble_value("stone900")
  }
  #[inline]
  fn stone950(&self) -> String {
    self.append_string_to_skribble_value("stone950")
  }
  #[inline]
  fn red50(&self) -> String {
    self.append_string_to_skribble_value("red50")
  }
  #[inline]
  fn red100(&self) -> String {
    self.append_string_to_skribble_value("red100")
  }
  #[inline]
  fn red200(&self) -> String {
    self.append_string_to_skribble_value("red200")
  }
  #[inline]
  fn red300(&self) -> String {
    self.append_string_to_skribble_value("red300")
  }
  #[inline]
  fn red400(&self) -> String {
    self.append_string_to_skribble_value("red400")
  }
  #[inline]
  fn red500(&self) -> String {
    self.append_string_to_skribble_value("red500")
  }
  #[inline]
  fn red600(&self) -> String {
    self.append_string_to_skribble_value("red600")
  }
  #[inline]
  fn red700(&self) -> String {
    self.append_string_to_skribble_value("red700")
  }
  #[inline]
  fn red800(&self) -> String {
    self.append_string_to_skribble_value("red800")
  }
  #[inline]
  fn red900(&self) -> String {
    self.append_string_to_skribble_value("red900")
  }
  #[inline]
  fn red950(&self) -> String {
    self.append_string_to_skribble_value("red950")
  }
  #[inline]
  fn orange50(&self) -> String {
    self.append_string_to_skribble_value("orange50")
  }
  #[inline]
  fn orange100(&self) -> String {
    self.append_string_to_skribble_value("orange100")
  }
  #[inline]
  fn orange200(&self) -> String {
    self.append_string_to_skribble_value("orange200")
  }
  #[inline]
  fn orange300(&self) -> String {
    self.append_string_to_skribble_value("orange300")
  }
  #[inline]
  fn orange400(&self) -> String {
    self.append_string_to_skribble_value("orange400")
  }
  #[inline]
  fn orange500(&self) -> String {
    self.append_string_to_skribble_value("orange500")
  }
  #[inline]
  fn orange600(&self) -> String {
    self.append_string_to_skribble_value("orange600")
  }
  #[inline]
  fn orange700(&self) -> String {
    self.append_string_to_skribble_value("orange700")
  }
  #[inline]
  fn orange800(&self) -> String {
    self.append_string_to_skribble_value("orange800")
  }
  #[inline]
  fn orange900(&self) -> String {
    self.append_string_to_skribble_value("orange900")
  }
  #[inline]
  fn orange950(&self) -> String {
    self.append_string_to_skribble_value("orange950")
  }
  #[inline]
  fn amber50(&self) -> String {
    self.append_string_to_skribble_value("amber50")
  }
  #[inline]
  fn amber100(&self) -> String {
    self.append_string_to_skribble_value("amber100")
  }
  #[inline]
  fn amber200(&self) -> String {
    self.append_string_to_skribble_value("amber200")
  }
  #[inline]
  fn amber300(&self) -> String {
    self.append_string_to_skribble_value("amber300")
  }
  #[inline]
  fn amber400(&self) -> String {
    self.append_string_to_skribble_value("amber400")
  }
  #[inline]
  fn amber500(&self) -> String {
    self.append_string_to_skribble_value("amber500")
  }
  #[inline]
  fn amber600(&self) -> String {
    self.append_string_to_skribble_value("amber600")
  }
  #[inline]
  fn amber700(&self) -> String {
    self.append_string_to_skribble_value("amber700")
  }
  #[inline]
  fn amber800(&self) -> String {
    self.append_string_to_skribble_value("amber800")
  }
  #[inline]
  fn amber900(&self) -> String {
    self.append_string_to_skribble_value("amber900")
  }
  #[inline]
  fn amber950(&self) -> String {
    self.append_string_to_skribble_value("amber950")
  }
  #[inline]
  fn yellow50(&self) -> String {
    self.append_string_to_skribble_value("yellow50")
  }
  #[inline]
  fn yellow100(&self) -> String {
    self.append_string_to_skribble_value("yellow100")
  }
  #[inline]
  fn yellow200(&self) -> String {
    self.append_string_to_skribble_value("yellow200")
  }
  #[inline]
  fn yellow300(&self) -> String {
    self.append_string_to_skribble_value("yellow300")
  }
  #[inline]
  fn yellow400(&self) -> String {
    self.append_string_to_skribble_value("yellow400")
  }
  #[inline]
  fn yellow500(&self) -> String {
    self.append_string_to_skribble_value("yellow500")
  }
  #[inline]
  fn yellow600(&self) -> String {
    self.append_string_to_skribble_value("yellow600")
  }
  #[inline]
  fn yellow700(&self) -> String {
    self.append_string_to_skribble_value("yellow700")
  }
  #[inline]
  fn yellow800(&self) -> String {
    self.append_string_to_skribble_value("yellow800")
  }
  #[inline]
  fn yellow900(&self) -> String {
    self.append_string_to_skribble_value("yellow900")
  }
  #[inline]
  fn yellow950(&self) -> String {
    self.append_string_to_skribble_value("yellow950")
  }
  #[inline]
  fn lime50(&self) -> String {
    self.append_string_to_skribble_value("lime50")
  }
  #[inline]
  fn lime100(&self) -> String {
    self.append_string_to_skribble_value("lime100")
  }
  #[inline]
  fn lime200(&self) -> String {
    self.append_string_to_skribble_value("lime200")
  }
  #[inline]
  fn lime300(&self) -> String {
    self.append_string_to_skribble_value("lime300")
  }
  #[inline]
  fn lime400(&self) -> String {
    self.append_string_to_skribble_value("lime400")
  }
  #[inline]
  fn lime500(&self) -> String {
    self.append_string_to_skribble_value("lime500")
  }
  #[inline]
  fn lime600(&self) -> String {
    self.append_string_to_skribble_value("lime600")
  }
  #[inline]
  fn lime700(&self) -> String {
    self.append_string_to_skribble_value("lime700")
  }
  #[inline]
  fn lime800(&self) -> String {
    self.append_string_to_skribble_value("lime800")
  }
  #[inline]
  fn lime900(&self) -> String {
    self.append_string_to_skribble_value("lime900")
  }
  #[inline]
  fn lime950(&self) -> String {
    self.append_string_to_skribble_value("lime950")
  }
  #[inline]
  fn green50(&self) -> String {
    self.append_string_to_skribble_value("green50")
  }
  #[inline]
  fn green100(&self) -> String {
    self.append_string_to_skribble_value("green100")
  }
  #[inline]
  fn green200(&self) -> String {
    self.append_string_to_skribble_value("green200")
  }
  #[inline]
  fn green300(&self) -> String {
    self.append_string_to_skribble_value("green300")
  }
  #[inline]
  fn green400(&self) -> String {
    self.append_string_to_skribble_value("green400")
  }
  #[inline]
  fn green500(&self) -> String {
    self.append_string_to_skribble_value("green500")
  }
  #[inline]
  fn green600(&self) -> String {
    self.append_string_to_skribble_value("green600")
  }
  #[inline]
  fn green700(&self) -> String {
    self.append_string_to_skribble_value("green700")
  }
  #[inline]
  fn green800(&self) -> String {
    self.append_string_to_skribble_value("green800")
  }
  #[inline]
  fn green900(&self) -> String {
    self.append_string_to_skribble_value("green900")
  }
  #[inline]
  fn green950(&self) -> String {
    self.append_string_to_skribble_value("green950")
  }
  #[inline]
  fn emerald50(&self) -> String {
    self.append_string_to_skribble_value("emerald50")
  }
  #[inline]
  fn emerald100(&self) -> String {
    self.append_string_to_skribble_value("emerald100")
  }
  #[inline]
  fn emerald200(&self) -> String {
    self.append_string_to_skribble_value("emerald200")
  }
  #[inline]
  fn emerald300(&self) -> String {
    self.append_string_to_skribble_value("emerald300")
  }
  #[inline]
  fn emerald400(&self) -> String {
    self.append_string_to_skribble_value("emerald400")
  }
  #[inline]
  fn emerald500(&self) -> String {
    self.append_string_to_skribble_value("emerald500")
  }
  #[inline]
  fn emerald600(&self) -> String {
    self.append_string_to_skribble_value("emerald600")
  }
  #[inline]
  fn emerald700(&self) -> String {
    self.append_string_to_skribble_value("emerald700")
  }
  #[inline]
  fn emerald800(&self) -> String {
    self.append_string_to_skribble_value("emerald800")
  }
  #[inline]
  fn emerald900(&self) -> String {
    self.append_string_to_skribble_value("emerald900")
  }
  #[inline]
  fn emerald950(&self) -> String {
    self.append_string_to_skribble_value("emerald950")
  }
  #[inline]
  fn teal50(&self) -> String {
    self.append_string_to_skribble_value("teal50")
  }
  #[inline]
  fn teal100(&self) -> String {
    self.append_string_to_skribble_value("teal100")
  }
  #[inline]
  fn teal200(&self) -> String {
    self.append_string_to_skribble_value("teal200")
  }
  #[inline]
  fn teal300(&self) -> String {
    self.append_string_to_skribble_value("teal300")
  }
  #[inline]
  fn teal400(&self) -> String {
    self.append_string_to_skribble_value("teal400")
  }
  #[inline]
  fn teal500(&self) -> String {
    self.append_string_to_skribble_value("teal500")
  }
  #[inline]
  fn teal600(&self) -> String {
    self.append_string_to_skribble_value("teal600")
  }
  #[inline]
  fn teal700(&self) -> String {
    self.append_string_to_skribble_value("teal700")
  }
  #[inline]
  fn teal800(&self) -> String {
    self.append_string_to_skribble_value("teal800")
  }
  #[inline]
  fn teal900(&self) -> String {
    self.append_string_to_skribble_value("teal900")
  }
  #[inline]
  fn teal950(&self) -> String {
    self.append_string_to_skribble_value("teal950")
  }
  #[inline]
  fn cyan50(&self) -> String {
    self.append_string_to_skribble_value("cyan50")
  }
  #[inline]
  fn cyan100(&self) -> String {
    self.append_string_to_skribble_value("cyan100")
  }
  #[inline]
  fn cyan200(&self) -> String {
    self.append_string_to_skribble_value("cyan200")
  }
  #[inline]
  fn cyan300(&self) -> String {
    self.append_string_to_skribble_value("cyan300")
  }
  #[inline]
  fn cyan400(&self) -> String {
    self.append_string_to_skribble_value("cyan400")
  }
  #[inline]
  fn cyan500(&self) -> String {
    self.append_string_to_skribble_value("cyan500")
  }
  #[inline]
  fn cyan600(&self) -> String {
    self.append_string_to_skribble_value("cyan600")
  }
  #[inline]
  fn cyan700(&self) -> String {
    self.append_string_to_skribble_value("cyan700")
  }
  #[inline]
  fn cyan800(&self) -> String {
    self.append_string_to_skribble_value("cyan800")
  }
  #[inline]
  fn cyan900(&self) -> String {
    self.append_string_to_skribble_value("cyan900")
  }
  #[inline]
  fn cyan950(&self) -> String {
    self.append_string_to_skribble_value("cyan950")
  }
  #[inline]
  fn sky50(&self) -> String {
    self.append_string_to_skribble_value("sky50")
  }
  #[inline]
  fn sky100(&self) -> String {
    self.append_string_to_skribble_value("sky100")
  }
  #[inline]
  fn sky200(&self) -> String {
    self.append_string_to_skribble_value("sky200")
  }
  #[inline]
  fn sky300(&self) -> String {
    self.append_string_to_skribble_value("sky300")
  }
  #[inline]
  fn sky400(&self) -> String {
    self.append_string_to_skribble_value("sky400")
  }
  #[inline]
  fn sky500(&self) -> String {
    self.append_string_to_skribble_value("sky500")
  }
  #[inline]
  fn sky600(&self) -> String {
    self.append_string_to_skribble_value("sky600")
  }
  #[inline]
  fn sky700(&self) -> String {
    self.append_string_to_skribble_value("sky700")
  }
  #[inline]
  fn sky800(&self) -> String {
    self.append_string_to_skribble_value("sky800")
  }
  #[inline]
  fn sky900(&self) -> String {
    self.append_string_to_skribble_value("sky900")
  }
  #[inline]
  fn sky950(&self) -> String {
    self.append_string_to_skribble_value("sky950")
  }
  #[inline]
  fn blue50(&self) -> String {
    self.append_string_to_skribble_value("blue50")
  }
  #[inline]
  fn blue100(&self) -> String {
    self.append_string_to_skribble_value("blue100")
  }
  #[inline]
  fn blue200(&self) -> String {
    self.append_string_to_skribble_value("blue200")
  }
  #[inline]
  fn blue300(&self) -> String {
    self.append_string_to_skribble_value("blue300")
  }
  #[inline]
  fn blue400(&self) -> String {
    self.append_string_to_skribble_value("blue400")
  }
  #[inline]
  fn blue500(&self) -> String {
    self.append_string_to_skribble_value("blue500")
  }
  #[inline]
  fn blue600(&self) -> String {
    self.append_string_to_skribble_value("blue600")
  }
  #[inline]
  fn blue700(&self) -> String {
    self.append_string_to_skribble_value("blue700")
  }
  #[inline]
  fn blue800(&self) -> String {
    self.append_string_to_skribble_value("blue800")
  }
  #[inline]
  fn blue900(&self) -> String {
    self.append_string_to_skribble_value("blue900")
  }
  #[inline]
  fn blue950(&self) -> String {
    self.append_string_to_skribble_value("blue950")
  }
  #[inline]
  fn indigo50(&self) -> String {
    self.append_string_to_skribble_value("indigo50")
  }
  #[inline]
  fn indigo100(&self) -> String {
    self.append_string_to_skribble_value("indigo100")
  }
  #[inline]
  fn indigo200(&self) -> String {
    self.append_string_to_skribble_value("indigo200")
  }
  #[inline]
  fn indigo300(&self) -> String {
    self.append_string_to_skribble_value("indigo300")
  }
  #[inline]
  fn indigo400(&self) -> String {
    self.append_string_to_skribble_value("indigo400")
  }
  #[inline]
  fn indigo500(&self) -> String {
    self.append_string_to_skribble_value("indigo500")
  }
  #[inline]
  fn indigo600(&self) -> String {
    self.append_string_to_skribble_value("indigo600")
  }
  #[inline]
  fn indigo700(&self) -> String {
    self.append_string_to_skribble_value("indigo700")
  }
  #[inline]
  fn indigo800(&self) -> String {
    self.append_string_to_skribble_value("indigo800")
  }
  #[inline]
  fn indigo900(&self) -> String {
    self.append_string_to_skribble_value("indigo900")
  }
  #[inline]
  fn indigo950(&self) -> String {
    self.append_string_to_skribble_value("indigo950")
  }
  #[inline]
  fn violet50(&self) -> String {
    self.append_string_to_skribble_value("violet50")
  }
  #[inline]
  fn violet100(&self) -> String {
    self.append_string_to_skribble_value("violet100")
  }
  #[inline]
  fn violet200(&self) -> String {
    self.append_string_to_skribble_value("violet200")
  }
  #[inline]
  fn violet300(&self) -> String {
    self.append_string_to_skribble_value("violet300")
  }
  #[inline]
  fn violet400(&self) -> String {
    self.append_string_to_skribble_value("violet400")
  }
  #[inline]
  fn violet500(&self) -> String {
    self.append_string_to_skribble_value("violet500")
  }
  #[inline]
  fn violet600(&self) -> String {
    self.append_string_to_skribble_value("violet600")
  }
  #[inline]
  fn violet700(&self) -> String {
    self.append_string_to_skribble_value("violet700")
  }
  #[inline]
  fn violet800(&self) -> String {
    self.append_string_to_skribble_value("violet800")
  }
  #[inline]
  fn violet900(&self) -> String {
    self.append_string_to_skribble_value("violet900")
  }
  #[inline]
  fn violet950(&self) -> String {
    self.append_string_to_skribble_value("violet950")
  }
  #[inline]
  fn purple50(&self) -> String {
    self.append_string_to_skribble_value("purple50")
  }
  #[inline]
  fn purple100(&self) -> String {
    self.append_string_to_skribble_value("purple100")
  }
  #[inline]
  fn purple200(&self) -> String {
    self.append_string_to_skribble_value("purple200")
  }
  #[inline]
  fn purple300(&self) -> String {
    self.append_string_to_skribble_value("purple300")
  }
  #[inline]
  fn purple400(&self) -> String {
    self.append_string_to_skribble_value("purple400")
  }
  #[inline]
  fn purple500(&self) -> String {
    self.append_string_to_skribble_value("purple500")
  }
  #[inline]
  fn purple600(&self) -> String {
    self.append_string_to_skribble_value("purple600")
  }
  #[inline]
  fn purple700(&self) -> String {
    self.append_string_to_skribble_value("purple700")
  }
  #[inline]
  fn purple800(&self) -> String {
    self.append_string_to_skribble_value("purple800")
  }
  #[inline]
  fn purple900(&self) -> String {
    self.append_string_to_skribble_value("purple900")
  }
  #[inline]
  fn purple950(&self) -> String {
    self.append_string_to_skribble_value("purple950")
  }
  #[inline]
  fn fuchsia50(&self) -> String {
    self.append_string_to_skribble_value("fuchsia50")
  }
  #[inline]
  fn fuchsia100(&self) -> String {
    self.append_string_to_skribble_value("fuchsia100")
  }
  #[inline]
  fn fuchsia200(&self) -> String {
    self.append_string_to_skribble_value("fuchsia200")
  }
  #[inline]
  fn fuchsia300(&self) -> String {
    self.append_string_to_skribble_value("fuchsia300")
  }
  #[inline]
  fn fuchsia400(&self) -> String {
    self.append_string_to_skribble_value("fuchsia400")
  }
  #[inline]
  fn fuchsia500(&self) -> String {
    self.append_string_to_skribble_value("fuchsia500")
  }
  #[inline]
  fn fuchsia600(&self) -> String {
    self.append_string_to_skribble_value("fuchsia600")
  }
  #[inline]
  fn fuchsia700(&self) -> String {
    self.append_string_to_skribble_value("fuchsia700")
  }
  #[inline]
  fn fuchsia800(&self) -> String {
    self.append_string_to_skribble_value("fuchsia800")
  }
  #[inline]
  fn fuchsia900(&self) -> String {
    self.append_string_to_skribble_value("fuchsia900")
  }
  #[inline]
  fn fuchsia950(&self) -> String {
    self.append_string_to_skribble_value("fuchsia950")
  }
  #[inline]
  fn pink50(&self) -> String {
    self.append_string_to_skribble_value("pink50")
  }
  #[inline]
  fn pink100(&self) -> String {
    self.append_string_to_skribble_value("pink100")
  }
  #[inline]
  fn pink200(&self) -> String {
    self.append_string_to_skribble_value("pink200")
  }
  #[inline]
  fn pink300(&self) -> String {
    self.append_string_to_skribble_value("pink300")
  }
  #[inline]
  fn pink400(&self) -> String {
    self.append_string_to_skribble_value("pink400")
  }
  #[inline]
  fn pink500(&self) -> String {
    self.append_string_to_skribble_value("pink500")
  }
  #[inline]
  fn pink600(&self) -> String {
    self.append_string_to_skribble_value("pink600")
  }
  #[inline]
  fn pink700(&self) -> String {
    self.append_string_to_skribble_value("pink700")
  }
  #[inline]
  fn pink800(&self) -> String {
    self.append_string_to_skribble_value("pink800")
  }
  #[inline]
  fn pink900(&self) -> String {
    self.append_string_to_skribble_value("pink900")
  }
  #[inline]
  fn pink950(&self) -> String {
    self.append_string_to_skribble_value("pink950")
  }
  #[inline]
  fn rose50(&self) -> String {
    self.append_string_to_skribble_value("rose50")
  }
  #[inline]
  fn rose100(&self) -> String {
    self.append_string_to_skribble_value("rose100")
  }
  #[inline]
  fn rose200(&self) -> String {
    self.append_string_to_skribble_value("rose200")
  }
  #[inline]
  fn rose300(&self) -> String {
    self.append_string_to_skribble_value("rose300")
  }
  #[inline]
  fn rose400(&self) -> String {
    self.append_string_to_skribble_value("rose400")
  }
  #[inline]
  fn rose500(&self) -> String {
    self.append_string_to_skribble_value("rose500")
  }
  #[inline]
  fn rose600(&self) -> String {
    self.append_string_to_skribble_value("rose600")
  }
  #[inline]
  fn rose700(&self) -> String {
    self.append_string_to_skribble_value("rose700")
  }
  #[inline]
  fn rose800(&self) -> String {
    self.append_string_to_skribble_value("rose800")
  }
  #[inline]
  fn rose900(&self) -> String {
    self.append_string_to_skribble_value("rose900")
  }
  #[inline]
  fn rose950(&self) -> String {
    self.append_string_to_skribble_value("rose950")
  }
}
pub struct GeneratedAtomSr(String);
impl GeneratedSkribbleValue for GeneratedAtomSr {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSr: GeneratedSkribbleValue {
  /// ```css
  /// .sr\:\$only {
  ///   position: absolute;
  ///   width: 1px;
  ///   height: 1px;
  ///   padding: 0;
  ///   margin: -1px;
  ///   overflow: hidden;
  ///   clip: rect(0, 0, 0, 0);
  ///   whiteSpace: nowrap;
  ///   borderWidth: 0;
  /// }
  /// ```
  #[inline]
  fn only(&self) -> String {
    self.append_string_to_skribble_value("only")
  }
  /// ```css
  /// .sr\:\$exclude {
  ///   position: static;
  ///   width: auto;
  ///   height: auto;
  ///   padding: 0;
  ///   margin: 0;
  ///   overflow: visible;
  ///   clip: auto;
  ///   whiteSpace: normal;
  /// }
  /// ```
  #[inline]
  fn exclude(&self) -> String {
    self.append_string_to_skribble_value("exclude")
  }
}
impl GeneratedValueSetSr for GeneratedAtomSr {}
pub struct GeneratedAtomTransition(String);
impl GeneratedSkribbleValue for GeneratedAtomTransition {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetTransition: GeneratedSkribbleValue {
  /// ```css
  /// .transition\:\$main {
  ///   transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn main(&self) -> String {
    self.append_string_to_skribble_value("main")
  }
  /// ```css
  /// .transition\:\$none {
  ///   transitionProperty: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_string_to_skribble_value("none")
  }
  /// ```css
  /// .transition\:\$all {
  ///   transition-property: all;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn all(&self) -> String {
    self.append_string_to_skribble_value("all")
  }
  /// ```css
  /// .transition\:\$colors {
  ///   transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn colors(&self) -> String {
    self.append_string_to_skribble_value("colors")
  }
  /// ```css
  /// .transition\:\$opacity {
  ///   transition-property: opacity;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn opacity(&self) -> String {
    self.append_string_to_skribble_value("opacity")
  }
  /// ```css
  /// .transition\:\$shadow {
  ///   transition-property: box-shadow;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn shadow(&self) -> String {
    self.append_string_to_skribble_value("shadow")
  }
  /// ```css
  /// .transition\:\$transform {
  ///   transition-property: transform;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn transform(&self) -> String {
    self.append_string_to_skribble_value("transform")
  }
}
impl GeneratedValueSetTransition for GeneratedAtomTransition {}
pub struct GeneratedAtomTransitionProperty(String);
impl GeneratedSkribbleValue for GeneratedAtomTransitionProperty {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetTransitionProperty: GeneratedSkribbleValue {
  /// ```css
  /// .transition-property\:\$most {
  ///   transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  /// }
  /// ```
  #[inline]
  fn most(&self) -> String {
    self.append_string_to_skribble_value("most")
  }
  /// ```css
  /// .transition-property\:\$none {
  ///   transition-property: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_string_to_skribble_value("none")
  }
  /// ```css
  /// .transition-property\:\$all {
  ///   transition-property: all;
  /// }
  /// ```
  #[inline]
  fn all(&self) -> String {
    self.append_string_to_skribble_value("all")
  }
  /// ```css
  /// .transition-property\:\$colors {
  ///   transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  /// }
  /// ```
  #[inline]
  fn colors(&self) -> String {
    self.append_string_to_skribble_value("colors")
  }
  /// ```css
  /// .transition-property\:\$opacity {
  ///   transition-property: opacity;
  /// }
  /// ```
  #[inline]
  fn opacity(&self) -> String {
    self.append_string_to_skribble_value("opacity")
  }
  /// ```css
  /// .transition-property\:\$shadow {
  ///   transition-property: box-shadow;
  /// }
  /// ```
  #[inline]
  fn shadow(&self) -> String {
    self.append_string_to_skribble_value("shadow")
  }
  /// ```css
  /// .transition-property\:\$transform {
  ///   transition-property: transform;
  /// }
  /// ```
  #[inline]
  fn transform(&self) -> String {
    self.append_string_to_skribble_value("transform")
  }
}
impl GeneratedValueSetTransitionProperty for GeneratedAtomTransitionProperty {}
pub struct GeneratedAtomDuration(String);
impl GeneratedSkribbleValue for GeneratedAtomDuration {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetDuration: GeneratedSkribbleValue {
  /// ```css
  /// .duration\:\$0 {
  ///   transition-duration: 0ms;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .duration\:\$75 {
  ///   transition-duration: 75ms;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .duration\:\$100 {
  ///   transition-duration: 100ms;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
  /// ```css
  /// .duration\:\$150 {
  ///   transition-duration: 150ms;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_string_to_skribble_value("150")
  }
  /// ```css
  /// .duration\:\$200 {
  ///   transition-duration: 200ms;
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_string_to_skribble_value("200")
  }
  /// ```css
  /// .duration\:\$300 {
  ///   transition-duration: 300ms;
  /// }
  /// ```
  #[inline]
  fn n300(&self) -> String {
    self.append_string_to_skribble_value("300")
  }
  /// ```css
  /// .duration\:\$500 {
  ///   transition-duration: 500ms;
  /// }
  /// ```
  #[inline]
  fn n500(&self) -> String {
    self.append_string_to_skribble_value("500")
  }
  /// ```css
  /// .duration\:\$700 {
  ///   transition-duration: 700ms;
  /// }
  /// ```
  #[inline]
  fn n700(&self) -> String {
    self.append_string_to_skribble_value("700")
  }
  /// ```css
  /// .duration\:\$1000 {
  ///   transition-duration: 1000ms;
  /// }
  /// ```
  #[inline]
  fn n1000(&self) -> String {
    self.append_string_to_skribble_value("1000")
  }
  /// ```css
  /// .duration\:\$1500 {
  ///   transition-duration: 1500ms;
  /// }
  /// ```
  #[inline]
  fn n1500(&self) -> String {
    self.append_string_to_skribble_value("1500")
  }
  /// ```css
  /// .duration\:\$2000 {
  ///   transition-duration: 2000ms;
  /// }
  /// ```
  #[inline]
  fn n2000(&self) -> String {
    self.append_string_to_skribble_value("2000")
  }
}
impl GeneratedValueSetDuration for GeneratedAtomDuration {}
pub struct GeneratedAtomEase(String);
impl GeneratedSkribbleValue for GeneratedAtomEase {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetEase: GeneratedSkribbleValue {
  /// ```css
  /// .ease\:\$linear {
  ///   transition-timing-function: linear;
  /// }
  /// ```
  #[inline]
  fn linear(&self) -> String {
    self.append_string_to_skribble_value("linear")
  }
  /// ```css
  /// .ease\:\$in {
  ///   transition-timing-function: cubic-bezier(0.4, 0, 1, 1);
  /// }
  /// ```
  #[inline]
  fn r#in(&self) -> String {
    self.append_string_to_skribble_value("in")
  }
  /// ```css
  /// .ease\:\$out {
  ///   transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn out(&self) -> String {
    self.append_string_to_skribble_value("out")
  }
  /// ```css
  /// .ease\:\$in-out {
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn in_out(&self) -> String {
    self.append_string_to_skribble_value("inOut")
  }
}
impl GeneratedValueSetEase for GeneratedAtomEase {}
pub struct GeneratedAtomDelay(String);
impl GeneratedSkribbleValue for GeneratedAtomDelay {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetDelay: GeneratedSkribbleValue {
  /// ```css
  /// .delay\:\$0 {
  ///   transition-delay: 0ms;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .delay\:\$75 {
  ///   transition-delay: 75ms;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .delay\:\$100 {
  ///   transition-delay: 100ms;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
  /// ```css
  /// .delay\:\$150 {
  ///   transition-delay: 150ms;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_string_to_skribble_value("150")
  }
  /// ```css
  /// .delay\:\$200 {
  ///   transition-delay: 200ms;
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_string_to_skribble_value("200")
  }
  /// ```css
  /// .delay\:\$300 {
  ///   transition-delay: 300ms;
  /// }
  /// ```
  #[inline]
  fn n300(&self) -> String {
    self.append_string_to_skribble_value("300")
  }
  /// ```css
  /// .delay\:\$500 {
  ///   transition-delay: 500ms;
  /// }
  /// ```
  #[inline]
  fn n500(&self) -> String {
    self.append_string_to_skribble_value("500")
  }
  /// ```css
  /// .delay\:\$700 {
  ///   transition-delay: 700ms;
  /// }
  /// ```
  #[inline]
  fn n700(&self) -> String {
    self.append_string_to_skribble_value("700")
  }
  /// ```css
  /// .delay\:\$1000 {
  ///   transition-delay: 1000ms;
  /// }
  /// ```
  #[inline]
  fn n1000(&self) -> String {
    self.append_string_to_skribble_value("1000")
  }
  /// ```css
  /// .delay\:\$1500 {
  ///   transition-delay: 1500ms;
  /// }
  /// ```
  #[inline]
  fn n1500(&self) -> String {
    self.append_string_to_skribble_value("1500")
  }
  /// ```css
  /// .delay\:\$2000 {
  ///   transition-delay: 2000ms;
  /// }
  /// ```
  #[inline]
  fn n2000(&self) -> String {
    self.append_string_to_skribble_value("2000")
  }
}
impl GeneratedValueSetDelay for GeneratedAtomDelay {}
pub struct GeneratedAtomAnimate(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimate {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl GeneratedKeyframeSet for GeneratedAtomAnimate {}
pub struct GeneratedAtomFadeIn(String);
impl GeneratedSkribbleValue for GeneratedAtomFadeIn {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetFadeIn: GeneratedSkribbleValue {
  /// ```css
  /// .fade-in\:\$0 {
  ///   --sk-enter-opacity: 0%;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .fade-in\:\$5 {
  ///   --sk-enter-opacity: 5%;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .fade-in\:\$10 {
  ///   --sk-enter-opacity: 10%;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .fade-in\:\$20 {
  ///   --sk-enter-opacity: 20%;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .fade-in\:\$30 {
  ///   --sk-enter-opacity: 30%;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_string_to_skribble_value("30")
  }
  /// ```css
  /// .fade-in\:\$40 {
  ///   --sk-enter-opacity: 40%;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .fade-in\:\$50 {
  ///   --sk-enter-opacity: 50%;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  /// ```css
  /// .fade-in\:\$60 {
  ///   --sk-enter-opacity: 60%;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .fade-in\:\$70 {
  ///   --sk-enter-opacity: 70%;
  /// }
  /// ```
  #[inline]
  fn n70(&self) -> String {
    self.append_string_to_skribble_value("70")
  }
  /// ```css
  /// .fade-in\:\$75 {
  ///   --sk-enter-opacity: 75%;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .fade-in\:\$80 {
  ///   --sk-enter-opacity: 80%;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .fade-in\:\$90 {
  ///   --sk-enter-opacity: 90%;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// ```css
  /// .fade-in\:\$95 {
  ///   --sk-enter-opacity: 95%;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_string_to_skribble_value("95")
  }
  /// ```css
  /// .fade-in\:\$100 {
  ///   --sk-enter-opacity: 100%;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
}
impl GeneratedValueSetFadeIn for GeneratedAtomFadeIn {}
pub struct GeneratedAtomFadeOut(String);
impl GeneratedSkribbleValue for GeneratedAtomFadeOut {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetFadeOut: GeneratedSkribbleValue {
  /// ```css
  /// .fade-out\:\$0 {
  ///   --sk-exit-opacity: 0%;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .fade-out\:\$5 {
  ///   --sk-exit-opacity: 5%;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .fade-out\:\$10 {
  ///   --sk-exit-opacity: 10%;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .fade-out\:\$20 {
  ///   --sk-exit-opacity: 20%;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .fade-out\:\$30 {
  ///   --sk-exit-opacity: 30%;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_string_to_skribble_value("30")
  }
  /// ```css
  /// .fade-out\:\$40 {
  ///   --sk-exit-opacity: 40%;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .fade-out\:\$50 {
  ///   --sk-exit-opacity: 50%;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  /// ```css
  /// .fade-out\:\$60 {
  ///   --sk-exit-opacity: 60%;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .fade-out\:\$70 {
  ///   --sk-exit-opacity: 70%;
  /// }
  /// ```
  #[inline]
  fn n70(&self) -> String {
    self.append_string_to_skribble_value("70")
  }
  /// ```css
  /// .fade-out\:\$75 {
  ///   --sk-exit-opacity: 75%;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .fade-out\:\$80 {
  ///   --sk-exit-opacity: 80%;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .fade-out\:\$90 {
  ///   --sk-exit-opacity: 90%;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// ```css
  /// .fade-out\:\$95 {
  ///   --sk-exit-opacity: 95%;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_string_to_skribble_value("95")
  }
  /// ```css
  /// .fade-out\:\$100 {
  ///   --sk-exit-opacity: 100%;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
}
impl GeneratedValueSetFadeOut for GeneratedAtomFadeOut {}
pub struct GeneratedAtomSpinIn(String);
impl GeneratedSkribbleValue for GeneratedAtomSpinIn {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSpinIn: GeneratedSkribbleValue {
  /// ```css
  /// .spin-in\:\$0 {
  ///   --sk-enter-rotate: 0deg;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .spin-in\:\$1 {
  ///   --sk-enter-rotate: 1deg;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .spin-in\:\$2 {
  ///   --sk-enter-rotate: 2deg;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .spin-in\:\$3 {
  ///   --sk-enter-rotate: 3deg;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .spin-in\:\$6 {
  ///   --sk-enter-rotate: 6deg;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .spin-in\:\$12 {
  ///   --sk-enter-rotate: 12deg;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .spin-in\:\$30 {
  ///   --sk-enter-rotate: 30deg;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_string_to_skribble_value("30")
  }
  /// ```css
  /// .spin-in\:\$45 {
  ///   --sk-enter-rotate: 45deg;
  /// }
  /// ```
  #[inline]
  fn n45(&self) -> String {
    self.append_string_to_skribble_value("45")
  }
  /// ```css
  /// .spin-in\:\$90 {
  ///   --sk-enter-rotate: 90deg;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// ```css
  /// .spin-in\:\$180 {
  ///   --sk-enter-rotate: 180deg;
  /// }
  /// ```
  #[inline]
  fn n180(&self) -> String {
    self.append_string_to_skribble_value("180")
  }
}
impl GeneratedValueSetSpinIn for GeneratedAtomSpinIn {}
pub struct GeneratedAtomSpinOut(String);
impl GeneratedSkribbleValue for GeneratedAtomSpinOut {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSpinOut: GeneratedSkribbleValue {
  /// ```css
  /// .spin-out\:\$0 {
  ///   --sk-exit-rotate: 0deg;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .spin-out\:\$1 {
  ///   --sk-exit-rotate: 1deg;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .spin-out\:\$2 {
  ///   --sk-exit-rotate: 2deg;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .spin-out\:\$3 {
  ///   --sk-exit-rotate: 3deg;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .spin-out\:\$6 {
  ///   --sk-exit-rotate: 6deg;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .spin-out\:\$12 {
  ///   --sk-exit-rotate: 12deg;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .spin-out\:\$30 {
  ///   --sk-exit-rotate: 30deg;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_string_to_skribble_value("30")
  }
  /// ```css
  /// .spin-out\:\$45 {
  ///   --sk-exit-rotate: 45deg;
  /// }
  /// ```
  #[inline]
  fn n45(&self) -> String {
    self.append_string_to_skribble_value("45")
  }
  /// ```css
  /// .spin-out\:\$90 {
  ///   --sk-exit-rotate: 90deg;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// ```css
  /// .spin-out\:\$180 {
  ///   --sk-exit-rotate: 180deg;
  /// }
  /// ```
  #[inline]
  fn n180(&self) -> String {
    self.append_string_to_skribble_value("180")
  }
}
impl GeneratedValueSetSpinOut for GeneratedAtomSpinOut {}
pub struct GeneratedAtomSlideInLeft(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideInLeft {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideInLeft: GeneratedSkribbleValue {
  /// ```css
  /// .slide-in-left\:\$full {
  ///   --sk-enter-tx: -100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_string_to_skribble_value("full")
  }
  /// ```css
  /// .slide-in-left\:\$0 {
  ///   --sk-enter-tx: -0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .slide-in-left\:\$px {
  ///   --sk-enter-tx: -1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .slide-in-left\:\$0\.5 {
  ///   --sk-enter-tx: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .slide-in-left\:\$1 {
  ///   --sk-enter-tx: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .slide-in-left\:\$1\.5 {
  ///   --sk-enter-tx: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .slide-in-left\:\$2 {
  ///   --sk-enter-tx: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .slide-in-left\:\$2\.5 {
  ///   --sk-enter-tx: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .slide-in-left\:\$3 {
  ///   --sk-enter-tx: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .slide-in-left\:\$3\.5 {
  ///   --sk-enter-tx: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
  /// ```css
  /// .slide-in-left\:\$4 {
  ///   --sk-enter-tx: -1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .slide-in-left\:\$5 {
  ///   --sk-enter-tx: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .slide-in-left\:\$6 {
  ///   --sk-enter-tx: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .slide-in-left\:\$7 {
  ///   --sk-enter-tx: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .slide-in-left\:\$8 {
  ///   --sk-enter-tx: -2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .slide-in-left\:\$9 {
  ///   --sk-enter-tx: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .slide-in-left\:\$10 {
  ///   --sk-enter-tx: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .slide-in-left\:\$11 {
  ///   --sk-enter-tx: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .slide-in-left\:\$12 {
  ///   --sk-enter-tx: -3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .slide-in-left\:\$14 {
  ///   --sk-enter-tx: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .slide-in-left\:\$16 {
  ///   --sk-enter-tx: -4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .slide-in-left\:\$20 {
  ///   --sk-enter-tx: -5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .slide-in-left\:\$24 {
  ///   --sk-enter-tx: -6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .slide-in-left\:\$28 {
  ///   --sk-enter-tx: -7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .slide-in-left\:\$32 {
  ///   --sk-enter-tx: -8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .slide-in-left\:\$36 {
  ///   --sk-enter-tx: -9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .slide-in-left\:\$40 {
  ///   --sk-enter-tx: -10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .slide-in-left\:\$44 {
  ///   --sk-enter-tx: -11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .slide-in-left\:\$48 {
  ///   --sk-enter-tx: -12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .slide-in-left\:\$52 {
  ///   --sk-enter-tx: -13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .slide-in-left\:\$56 {
  ///   --sk-enter-tx: -14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .slide-in-left\:\$60 {
  ///   --sk-enter-tx: -15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .slide-in-left\:\$64 {
  ///   --sk-enter-tx: -16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .slide-in-left\:\$72 {
  ///   --sk-enter-tx: -18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .slide-in-left\:\$80 {
  ///   --sk-enter-tx: -20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .slide-in-left\:\$96 {
  ///   --sk-enter-tx: -24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .slide-in-left\:\$third {
  ///   --sk-enter-tx: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_string_to_skribble_value("third")
  }
  /// ```css
  /// .slide-in-left\:\$two-thirds {
  ///   --sk-enter-tx: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_string_to_skribble_value("twoThirds")
  }
  /// ```css
  /// .slide-in-left\:\$quarter {
  ///   --sk-enter-tx: -25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_string_to_skribble_value("quarter")
  }
  /// ```css
  /// .slide-in-left\:\$half {
  ///   --sk-enter-tx: -50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_string_to_skribble_value("half")
  }
  /// ```css
  /// .slide-in-left\:\$three-quarters {
  ///   --sk-enter-tx: -75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_string_to_skribble_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideInLeft for GeneratedAtomSlideInLeft {}
pub struct GeneratedAtomSlideInRight(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideInRight {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideInRight: GeneratedSkribbleValue {
  /// ```css
  /// .slide-in-right\:\$full {
  ///   --sk-enter-tx: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_string_to_skribble_value("full")
  }
  /// ```css
  /// .slide-in-right\:\$0 {
  ///   --sk-enter-tx: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .slide-in-right\:\$px {
  ///   --sk-enter-tx: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .slide-in-right\:\$0\.5 {
  ///   --sk-enter-tx: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .slide-in-right\:\$1 {
  ///   --sk-enter-tx: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .slide-in-right\:\$1\.5 {
  ///   --sk-enter-tx: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .slide-in-right\:\$2 {
  ///   --sk-enter-tx: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .slide-in-right\:\$2\.5 {
  ///   --sk-enter-tx: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .slide-in-right\:\$3 {
  ///   --sk-enter-tx: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .slide-in-right\:\$3\.5 {
  ///   --sk-enter-tx: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
  /// ```css
  /// .slide-in-right\:\$4 {
  ///   --sk-enter-tx: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .slide-in-right\:\$5 {
  ///   --sk-enter-tx: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .slide-in-right\:\$6 {
  ///   --sk-enter-tx: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .slide-in-right\:\$7 {
  ///   --sk-enter-tx: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .slide-in-right\:\$8 {
  ///   --sk-enter-tx: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .slide-in-right\:\$9 {
  ///   --sk-enter-tx: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .slide-in-right\:\$10 {
  ///   --sk-enter-tx: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .slide-in-right\:\$11 {
  ///   --sk-enter-tx: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .slide-in-right\:\$12 {
  ///   --sk-enter-tx: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .slide-in-right\:\$14 {
  ///   --sk-enter-tx: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .slide-in-right\:\$16 {
  ///   --sk-enter-tx: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .slide-in-right\:\$20 {
  ///   --sk-enter-tx: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .slide-in-right\:\$24 {
  ///   --sk-enter-tx: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .slide-in-right\:\$28 {
  ///   --sk-enter-tx: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .slide-in-right\:\$32 {
  ///   --sk-enter-tx: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .slide-in-right\:\$36 {
  ///   --sk-enter-tx: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .slide-in-right\:\$40 {
  ///   --sk-enter-tx: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .slide-in-right\:\$44 {
  ///   --sk-enter-tx: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .slide-in-right\:\$48 {
  ///   --sk-enter-tx: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .slide-in-right\:\$52 {
  ///   --sk-enter-tx: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .slide-in-right\:\$56 {
  ///   --sk-enter-tx: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .slide-in-right\:\$60 {
  ///   --sk-enter-tx: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .slide-in-right\:\$64 {
  ///   --sk-enter-tx: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .slide-in-right\:\$72 {
  ///   --sk-enter-tx: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .slide-in-right\:\$80 {
  ///   --sk-enter-tx: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .slide-in-right\:\$96 {
  ///   --sk-enter-tx: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .slide-in-right\:\$third {
  ///   --sk-enter-tx: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_string_to_skribble_value("third")
  }
  /// ```css
  /// .slide-in-right\:\$two-thirds {
  ///   --sk-enter-tx: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_string_to_skribble_value("twoThirds")
  }
  /// ```css
  /// .slide-in-right\:\$quarter {
  ///   --sk-enter-tx: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_string_to_skribble_value("quarter")
  }
  /// ```css
  /// .slide-in-right\:\$half {
  ///   --sk-enter-tx: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_string_to_skribble_value("half")
  }
  /// ```css
  /// .slide-in-right\:\$three-quarters {
  ///   --sk-enter-tx: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_string_to_skribble_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideInRight for GeneratedAtomSlideInRight {}
pub struct GeneratedAtomSlideOutLeft(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideOutLeft {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideOutLeft: GeneratedSkribbleValue {
  /// ```css
  /// .slide-out-left\:\$full {
  ///   --sk-exit-tx: -100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_string_to_skribble_value("full")
  }
  /// ```css
  /// .slide-out-left\:\$0 {
  ///   --sk-exit-tx: -0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .slide-out-left\:\$px {
  ///   --sk-exit-tx: -1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .slide-out-left\:\$0\.5 {
  ///   --sk-exit-tx: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .slide-out-left\:\$1 {
  ///   --sk-exit-tx: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .slide-out-left\:\$1\.5 {
  ///   --sk-exit-tx: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .slide-out-left\:\$2 {
  ///   --sk-exit-tx: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .slide-out-left\:\$2\.5 {
  ///   --sk-exit-tx: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .slide-out-left\:\$3 {
  ///   --sk-exit-tx: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .slide-out-left\:\$3\.5 {
  ///   --sk-exit-tx: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
  /// ```css
  /// .slide-out-left\:\$4 {
  ///   --sk-exit-tx: -1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .slide-out-left\:\$5 {
  ///   --sk-exit-tx: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .slide-out-left\:\$6 {
  ///   --sk-exit-tx: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .slide-out-left\:\$7 {
  ///   --sk-exit-tx: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .slide-out-left\:\$8 {
  ///   --sk-exit-tx: -2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .slide-out-left\:\$9 {
  ///   --sk-exit-tx: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .slide-out-left\:\$10 {
  ///   --sk-exit-tx: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .slide-out-left\:\$11 {
  ///   --sk-exit-tx: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .slide-out-left\:\$12 {
  ///   --sk-exit-tx: -3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .slide-out-left\:\$14 {
  ///   --sk-exit-tx: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .slide-out-left\:\$16 {
  ///   --sk-exit-tx: -4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .slide-out-left\:\$20 {
  ///   --sk-exit-tx: -5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .slide-out-left\:\$24 {
  ///   --sk-exit-tx: -6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .slide-out-left\:\$28 {
  ///   --sk-exit-tx: -7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .slide-out-left\:\$32 {
  ///   --sk-exit-tx: -8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .slide-out-left\:\$36 {
  ///   --sk-exit-tx: -9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .slide-out-left\:\$40 {
  ///   --sk-exit-tx: -10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .slide-out-left\:\$44 {
  ///   --sk-exit-tx: -11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .slide-out-left\:\$48 {
  ///   --sk-exit-tx: -12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .slide-out-left\:\$52 {
  ///   --sk-exit-tx: -13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .slide-out-left\:\$56 {
  ///   --sk-exit-tx: -14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .slide-out-left\:\$60 {
  ///   --sk-exit-tx: -15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .slide-out-left\:\$64 {
  ///   --sk-exit-tx: -16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .slide-out-left\:\$72 {
  ///   --sk-exit-tx: -18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .slide-out-left\:\$80 {
  ///   --sk-exit-tx: -20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .slide-out-left\:\$96 {
  ///   --sk-exit-tx: -24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .slide-out-left\:\$third {
  ///   --sk-exit-tx: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_string_to_skribble_value("third")
  }
  /// ```css
  /// .slide-out-left\:\$two-thirds {
  ///   --sk-exit-tx: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_string_to_skribble_value("twoThirds")
  }
  /// ```css
  /// .slide-out-left\:\$quarter {
  ///   --sk-exit-tx: -25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_string_to_skribble_value("quarter")
  }
  /// ```css
  /// .slide-out-left\:\$half {
  ///   --sk-exit-tx: -50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_string_to_skribble_value("half")
  }
  /// ```css
  /// .slide-out-left\:\$three-quarters {
  ///   --sk-exit-tx: -75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_string_to_skribble_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideOutLeft for GeneratedAtomSlideOutLeft {}
pub struct GeneratedAtomSlideOutRight(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideOutRight {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideOutRight: GeneratedSkribbleValue {
  /// ```css
  /// .slide-out-right\:\$full {
  ///   --sk-exit-tx: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_string_to_skribble_value("full")
  }
  /// ```css
  /// .slide-out-right\:\$0 {
  ///   --sk-exit-tx: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .slide-out-right\:\$px {
  ///   --sk-exit-tx: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .slide-out-right\:\$0\.5 {
  ///   --sk-exit-tx: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .slide-out-right\:\$1 {
  ///   --sk-exit-tx: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .slide-out-right\:\$1\.5 {
  ///   --sk-exit-tx: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .slide-out-right\:\$2 {
  ///   --sk-exit-tx: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .slide-out-right\:\$2\.5 {
  ///   --sk-exit-tx: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .slide-out-right\:\$3 {
  ///   --sk-exit-tx: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .slide-out-right\:\$3\.5 {
  ///   --sk-exit-tx: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
  /// ```css
  /// .slide-out-right\:\$4 {
  ///   --sk-exit-tx: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .slide-out-right\:\$5 {
  ///   --sk-exit-tx: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .slide-out-right\:\$6 {
  ///   --sk-exit-tx: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .slide-out-right\:\$7 {
  ///   --sk-exit-tx: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .slide-out-right\:\$8 {
  ///   --sk-exit-tx: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .slide-out-right\:\$9 {
  ///   --sk-exit-tx: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .slide-out-right\:\$10 {
  ///   --sk-exit-tx: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .slide-out-right\:\$11 {
  ///   --sk-exit-tx: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .slide-out-right\:\$12 {
  ///   --sk-exit-tx: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .slide-out-right\:\$14 {
  ///   --sk-exit-tx: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .slide-out-right\:\$16 {
  ///   --sk-exit-tx: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .slide-out-right\:\$20 {
  ///   --sk-exit-tx: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .slide-out-right\:\$24 {
  ///   --sk-exit-tx: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .slide-out-right\:\$28 {
  ///   --sk-exit-tx: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .slide-out-right\:\$32 {
  ///   --sk-exit-tx: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .slide-out-right\:\$36 {
  ///   --sk-exit-tx: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .slide-out-right\:\$40 {
  ///   --sk-exit-tx: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .slide-out-right\:\$44 {
  ///   --sk-exit-tx: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .slide-out-right\:\$48 {
  ///   --sk-exit-tx: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .slide-out-right\:\$52 {
  ///   --sk-exit-tx: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .slide-out-right\:\$56 {
  ///   --sk-exit-tx: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .slide-out-right\:\$60 {
  ///   --sk-exit-tx: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .slide-out-right\:\$64 {
  ///   --sk-exit-tx: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .slide-out-right\:\$72 {
  ///   --sk-exit-tx: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .slide-out-right\:\$80 {
  ///   --sk-exit-tx: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .slide-out-right\:\$96 {
  ///   --sk-exit-tx: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .slide-out-right\:\$third {
  ///   --sk-exit-tx: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_string_to_skribble_value("third")
  }
  /// ```css
  /// .slide-out-right\:\$two-thirds {
  ///   --sk-exit-tx: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_string_to_skribble_value("twoThirds")
  }
  /// ```css
  /// .slide-out-right\:\$quarter {
  ///   --sk-exit-tx: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_string_to_skribble_value("quarter")
  }
  /// ```css
  /// .slide-out-right\:\$half {
  ///   --sk-exit-tx: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_string_to_skribble_value("half")
  }
  /// ```css
  /// .slide-out-right\:\$three-quarters {
  ///   --sk-exit-tx: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_string_to_skribble_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideOutRight for GeneratedAtomSlideOutRight {}
pub struct GeneratedAtomSlideInTop(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideInTop {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideInTop: GeneratedSkribbleValue {
  /// ```css
  /// .slide-in-top\:\$full {
  ///   --sk-enter-ty: -100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_string_to_skribble_value("full")
  }
  /// ```css
  /// .slide-in-top\:\$0 {
  ///   --sk-enter-ty: -0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .slide-in-top\:\$px {
  ///   --sk-enter-ty: -1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .slide-in-top\:\$0\.5 {
  ///   --sk-enter-ty: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .slide-in-top\:\$1 {
  ///   --sk-enter-ty: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .slide-in-top\:\$1\.5 {
  ///   --sk-enter-ty: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .slide-in-top\:\$2 {
  ///   --sk-enter-ty: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .slide-in-top\:\$2\.5 {
  ///   --sk-enter-ty: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .slide-in-top\:\$3 {
  ///   --sk-enter-ty: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .slide-in-top\:\$3\.5 {
  ///   --sk-enter-ty: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
  /// ```css
  /// .slide-in-top\:\$4 {
  ///   --sk-enter-ty: -1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .slide-in-top\:\$5 {
  ///   --sk-enter-ty: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .slide-in-top\:\$6 {
  ///   --sk-enter-ty: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .slide-in-top\:\$7 {
  ///   --sk-enter-ty: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .slide-in-top\:\$8 {
  ///   --sk-enter-ty: -2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .slide-in-top\:\$9 {
  ///   --sk-enter-ty: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .slide-in-top\:\$10 {
  ///   --sk-enter-ty: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .slide-in-top\:\$11 {
  ///   --sk-enter-ty: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .slide-in-top\:\$12 {
  ///   --sk-enter-ty: -3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .slide-in-top\:\$14 {
  ///   --sk-enter-ty: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .slide-in-top\:\$16 {
  ///   --sk-enter-ty: -4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .slide-in-top\:\$20 {
  ///   --sk-enter-ty: -5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .slide-in-top\:\$24 {
  ///   --sk-enter-ty: -6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .slide-in-top\:\$28 {
  ///   --sk-enter-ty: -7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .slide-in-top\:\$32 {
  ///   --sk-enter-ty: -8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .slide-in-top\:\$36 {
  ///   --sk-enter-ty: -9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .slide-in-top\:\$40 {
  ///   --sk-enter-ty: -10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .slide-in-top\:\$44 {
  ///   --sk-enter-ty: -11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .slide-in-top\:\$48 {
  ///   --sk-enter-ty: -12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .slide-in-top\:\$52 {
  ///   --sk-enter-ty: -13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .slide-in-top\:\$56 {
  ///   --sk-enter-ty: -14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .slide-in-top\:\$60 {
  ///   --sk-enter-ty: -15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .slide-in-top\:\$64 {
  ///   --sk-enter-ty: -16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .slide-in-top\:\$72 {
  ///   --sk-enter-ty: -18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .slide-in-top\:\$80 {
  ///   --sk-enter-ty: -20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .slide-in-top\:\$96 {
  ///   --sk-enter-ty: -24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .slide-in-top\:\$third {
  ///   --sk-enter-ty: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_string_to_skribble_value("third")
  }
  /// ```css
  /// .slide-in-top\:\$two-thirds {
  ///   --sk-enter-ty: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_string_to_skribble_value("twoThirds")
  }
  /// ```css
  /// .slide-in-top\:\$quarter {
  ///   --sk-enter-ty: -25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_string_to_skribble_value("quarter")
  }
  /// ```css
  /// .slide-in-top\:\$half {
  ///   --sk-enter-ty: -50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_string_to_skribble_value("half")
  }
  /// ```css
  /// .slide-in-top\:\$three-quarters {
  ///   --sk-enter-ty: -75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_string_to_skribble_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideInTop for GeneratedAtomSlideInTop {}
pub struct GeneratedAtomSlideInBottom(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideInBottom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideInBottom: GeneratedSkribbleValue {
  /// ```css
  /// .slide-in-bottom\:\$full {
  ///   --sk-enter-ty: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_string_to_skribble_value("full")
  }
  /// ```css
  /// .slide-in-bottom\:\$0 {
  ///   --sk-enter-ty: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .slide-in-bottom\:\$px {
  ///   --sk-enter-ty: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .slide-in-bottom\:\$0\.5 {
  ///   --sk-enter-ty: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .slide-in-bottom\:\$1 {
  ///   --sk-enter-ty: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .slide-in-bottom\:\$1\.5 {
  ///   --sk-enter-ty: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .slide-in-bottom\:\$2 {
  ///   --sk-enter-ty: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .slide-in-bottom\:\$2\.5 {
  ///   --sk-enter-ty: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .slide-in-bottom\:\$3 {
  ///   --sk-enter-ty: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .slide-in-bottom\:\$3\.5 {
  ///   --sk-enter-ty: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
  /// ```css
  /// .slide-in-bottom\:\$4 {
  ///   --sk-enter-ty: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .slide-in-bottom\:\$5 {
  ///   --sk-enter-ty: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .slide-in-bottom\:\$6 {
  ///   --sk-enter-ty: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .slide-in-bottom\:\$7 {
  ///   --sk-enter-ty: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .slide-in-bottom\:\$8 {
  ///   --sk-enter-ty: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .slide-in-bottom\:\$9 {
  ///   --sk-enter-ty: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .slide-in-bottom\:\$10 {
  ///   --sk-enter-ty: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .slide-in-bottom\:\$11 {
  ///   --sk-enter-ty: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .slide-in-bottom\:\$12 {
  ///   --sk-enter-ty: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .slide-in-bottom\:\$14 {
  ///   --sk-enter-ty: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .slide-in-bottom\:\$16 {
  ///   --sk-enter-ty: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .slide-in-bottom\:\$20 {
  ///   --sk-enter-ty: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .slide-in-bottom\:\$24 {
  ///   --sk-enter-ty: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .slide-in-bottom\:\$28 {
  ///   --sk-enter-ty: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .slide-in-bottom\:\$32 {
  ///   --sk-enter-ty: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .slide-in-bottom\:\$36 {
  ///   --sk-enter-ty: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .slide-in-bottom\:\$40 {
  ///   --sk-enter-ty: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .slide-in-bottom\:\$44 {
  ///   --sk-enter-ty: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .slide-in-bottom\:\$48 {
  ///   --sk-enter-ty: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .slide-in-bottom\:\$52 {
  ///   --sk-enter-ty: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .slide-in-bottom\:\$56 {
  ///   --sk-enter-ty: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .slide-in-bottom\:\$60 {
  ///   --sk-enter-ty: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .slide-in-bottom\:\$64 {
  ///   --sk-enter-ty: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .slide-in-bottom\:\$72 {
  ///   --sk-enter-ty: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .slide-in-bottom\:\$80 {
  ///   --sk-enter-ty: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .slide-in-bottom\:\$96 {
  ///   --sk-enter-ty: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .slide-in-bottom\:\$third {
  ///   --sk-enter-ty: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_string_to_skribble_value("third")
  }
  /// ```css
  /// .slide-in-bottom\:\$two-thirds {
  ///   --sk-enter-ty: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_string_to_skribble_value("twoThirds")
  }
  /// ```css
  /// .slide-in-bottom\:\$quarter {
  ///   --sk-enter-ty: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_string_to_skribble_value("quarter")
  }
  /// ```css
  /// .slide-in-bottom\:\$half {
  ///   --sk-enter-ty: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_string_to_skribble_value("half")
  }
  /// ```css
  /// .slide-in-bottom\:\$three-quarters {
  ///   --sk-enter-ty: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_string_to_skribble_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideInBottom for GeneratedAtomSlideInBottom {}
pub struct GeneratedAtomSlideOutTop(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideOutTop {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideOutTop: GeneratedSkribbleValue {
  /// ```css
  /// .slide-out-top\:\$full {
  ///   --sk-exit-ty: -100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_string_to_skribble_value("full")
  }
  /// ```css
  /// .slide-out-top\:\$0 {
  ///   --sk-exit-ty: -0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .slide-out-top\:\$px {
  ///   --sk-exit-ty: -1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .slide-out-top\:\$0\.5 {
  ///   --sk-exit-ty: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .slide-out-top\:\$1 {
  ///   --sk-exit-ty: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .slide-out-top\:\$1\.5 {
  ///   --sk-exit-ty: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .slide-out-top\:\$2 {
  ///   --sk-exit-ty: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .slide-out-top\:\$2\.5 {
  ///   --sk-exit-ty: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .slide-out-top\:\$3 {
  ///   --sk-exit-ty: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .slide-out-top\:\$3\.5 {
  ///   --sk-exit-ty: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
  /// ```css
  /// .slide-out-top\:\$4 {
  ///   --sk-exit-ty: -1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .slide-out-top\:\$5 {
  ///   --sk-exit-ty: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .slide-out-top\:\$6 {
  ///   --sk-exit-ty: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .slide-out-top\:\$7 {
  ///   --sk-exit-ty: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .slide-out-top\:\$8 {
  ///   --sk-exit-ty: -2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .slide-out-top\:\$9 {
  ///   --sk-exit-ty: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .slide-out-top\:\$10 {
  ///   --sk-exit-ty: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .slide-out-top\:\$11 {
  ///   --sk-exit-ty: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .slide-out-top\:\$12 {
  ///   --sk-exit-ty: -3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .slide-out-top\:\$14 {
  ///   --sk-exit-ty: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .slide-out-top\:\$16 {
  ///   --sk-exit-ty: -4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .slide-out-top\:\$20 {
  ///   --sk-exit-ty: -5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .slide-out-top\:\$24 {
  ///   --sk-exit-ty: -6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .slide-out-top\:\$28 {
  ///   --sk-exit-ty: -7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .slide-out-top\:\$32 {
  ///   --sk-exit-ty: -8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .slide-out-top\:\$36 {
  ///   --sk-exit-ty: -9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .slide-out-top\:\$40 {
  ///   --sk-exit-ty: -10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .slide-out-top\:\$44 {
  ///   --sk-exit-ty: -11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .slide-out-top\:\$48 {
  ///   --sk-exit-ty: -12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .slide-out-top\:\$52 {
  ///   --sk-exit-ty: -13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .slide-out-top\:\$56 {
  ///   --sk-exit-ty: -14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .slide-out-top\:\$60 {
  ///   --sk-exit-ty: -15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .slide-out-top\:\$64 {
  ///   --sk-exit-ty: -16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .slide-out-top\:\$72 {
  ///   --sk-exit-ty: -18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .slide-out-top\:\$80 {
  ///   --sk-exit-ty: -20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .slide-out-top\:\$96 {
  ///   --sk-exit-ty: -24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .slide-out-top\:\$third {
  ///   --sk-exit-ty: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_string_to_skribble_value("third")
  }
  /// ```css
  /// .slide-out-top\:\$two-thirds {
  ///   --sk-exit-ty: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_string_to_skribble_value("twoThirds")
  }
  /// ```css
  /// .slide-out-top\:\$quarter {
  ///   --sk-exit-ty: -25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_string_to_skribble_value("quarter")
  }
  /// ```css
  /// .slide-out-top\:\$half {
  ///   --sk-exit-ty: -50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_string_to_skribble_value("half")
  }
  /// ```css
  /// .slide-out-top\:\$three-quarters {
  ///   --sk-exit-ty: -75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_string_to_skribble_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideOutTop for GeneratedAtomSlideOutTop {}
pub struct GeneratedAtomSlideOutBottom(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideOutBottom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideOutBottom: GeneratedSkribbleValue {
  /// ```css
  /// .slide-out-bottom\:\$full {
  ///   --sk-exit-ty: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_string_to_skribble_value("full")
  }
  /// ```css
  /// .slide-out-bottom\:\$0 {
  ///   --sk-exit-ty: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .slide-out-bottom\:\$px {
  ///   --sk-exit-ty: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .slide-out-bottom\:\$0\.5 {
  ///   --sk-exit-ty: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .slide-out-bottom\:\$1 {
  ///   --sk-exit-ty: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .slide-out-bottom\:\$1\.5 {
  ///   --sk-exit-ty: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .slide-out-bottom\:\$2 {
  ///   --sk-exit-ty: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .slide-out-bottom\:\$2\.5 {
  ///   --sk-exit-ty: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .slide-out-bottom\:\$3 {
  ///   --sk-exit-ty: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .slide-out-bottom\:\$3\.5 {
  ///   --sk-exit-ty: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
  /// ```css
  /// .slide-out-bottom\:\$4 {
  ///   --sk-exit-ty: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .slide-out-bottom\:\$5 {
  ///   --sk-exit-ty: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .slide-out-bottom\:\$6 {
  ///   --sk-exit-ty: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .slide-out-bottom\:\$7 {
  ///   --sk-exit-ty: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .slide-out-bottom\:\$8 {
  ///   --sk-exit-ty: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .slide-out-bottom\:\$9 {
  ///   --sk-exit-ty: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .slide-out-bottom\:\$10 {
  ///   --sk-exit-ty: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .slide-out-bottom\:\$11 {
  ///   --sk-exit-ty: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .slide-out-bottom\:\$12 {
  ///   --sk-exit-ty: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .slide-out-bottom\:\$14 {
  ///   --sk-exit-ty: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .slide-out-bottom\:\$16 {
  ///   --sk-exit-ty: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .slide-out-bottom\:\$20 {
  ///   --sk-exit-ty: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .slide-out-bottom\:\$24 {
  ///   --sk-exit-ty: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .slide-out-bottom\:\$28 {
  ///   --sk-exit-ty: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .slide-out-bottom\:\$32 {
  ///   --sk-exit-ty: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .slide-out-bottom\:\$36 {
  ///   --sk-exit-ty: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .slide-out-bottom\:\$40 {
  ///   --sk-exit-ty: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .slide-out-bottom\:\$44 {
  ///   --sk-exit-ty: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .slide-out-bottom\:\$48 {
  ///   --sk-exit-ty: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .slide-out-bottom\:\$52 {
  ///   --sk-exit-ty: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .slide-out-bottom\:\$56 {
  ///   --sk-exit-ty: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .slide-out-bottom\:\$60 {
  ///   --sk-exit-ty: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .slide-out-bottom\:\$64 {
  ///   --sk-exit-ty: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .slide-out-bottom\:\$72 {
  ///   --sk-exit-ty: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .slide-out-bottom\:\$80 {
  ///   --sk-exit-ty: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .slide-out-bottom\:\$96 {
  ///   --sk-exit-ty: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .slide-out-bottom\:\$third {
  ///   --sk-exit-ty: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_string_to_skribble_value("third")
  }
  /// ```css
  /// .slide-out-bottom\:\$two-thirds {
  ///   --sk-exit-ty: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_string_to_skribble_value("twoThirds")
  }
  /// ```css
  /// .slide-out-bottom\:\$quarter {
  ///   --sk-exit-ty: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_string_to_skribble_value("quarter")
  }
  /// ```css
  /// .slide-out-bottom\:\$half {
  ///   --sk-exit-ty: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_string_to_skribble_value("half")
  }
  /// ```css
  /// .slide-out-bottom\:\$three-quarters {
  ///   --sk-exit-ty: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_string_to_skribble_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideOutBottom for GeneratedAtomSlideOutBottom {}
pub struct GeneratedAtomZoomIn(String);
impl GeneratedSkribbleValue for GeneratedAtomZoomIn {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetZoomIn: GeneratedSkribbleValue {
  /// ```css
  /// .zoom-in\:\$0 {
  ///   --sk-enter-sx: 0;
  ///   --sk-enter-sy: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .zoom-in\:\$50 {
  ///   --sk-enter-sx: .5;
  ///   --sk-enter-sy: .5;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  /// ```css
  /// .zoom-in\:\$75 {
  ///   --sk-enter-sx: .75;
  ///   --sk-enter-sy: .75;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .zoom-in\:\$90 {
  ///   --sk-enter-sx: .9;
  ///   --sk-enter-sy: .9;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// ```css
  /// .zoom-in\:\$95 {
  ///   --sk-enter-sx: .95;
  ///   --sk-enter-sy: .95;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_string_to_skribble_value("95")
  }
  /// ```css
  /// .zoom-in\:\$100 {
  ///   --sk-enter-sx: 1;
  ///   --sk-enter-sy: 1;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
  /// ```css
  /// .zoom-in\:\$105 {
  ///   --sk-enter-sx: 1.05;
  ///   --sk-enter-sy: 1.05;
  /// }
  /// ```
  #[inline]
  fn n105(&self) -> String {
    self.append_string_to_skribble_value("105")
  }
  /// ```css
  /// .zoom-in\:\$110 {
  ///   --sk-enter-sx: 1.1;
  ///   --sk-enter-sy: 1.1;
  /// }
  /// ```
  #[inline]
  fn n110(&self) -> String {
    self.append_string_to_skribble_value("110")
  }
  /// ```css
  /// .zoom-in\:\$125 {
  ///   --sk-enter-sx: 1.25;
  ///   --sk-enter-sy: 1.25;
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_string_to_skribble_value("125")
  }
  /// ```css
  /// .zoom-in\:\$150 {
  ///   --sk-enter-sx: 1.5;
  ///   --sk-enter-sy: 1.5;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_string_to_skribble_value("150")
  }
}
impl GeneratedValueSetZoomIn for GeneratedAtomZoomIn {}
pub struct GeneratedAtomZoomOut(String);
impl GeneratedSkribbleValue for GeneratedAtomZoomOut {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetZoomOut: GeneratedSkribbleValue {
  /// ```css
  /// .zoom-out\:\$0 {
  ///   --sk-exit-sx: 0;
  ///   --sk-exit-sy: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .zoom-out\:\$50 {
  ///   --sk-exit-sx: .5;
  ///   --sk-exit-sy: .5;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  /// ```css
  /// .zoom-out\:\$75 {
  ///   --sk-exit-sx: .75;
  ///   --sk-exit-sy: .75;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .zoom-out\:\$90 {
  ///   --sk-exit-sx: .9;
  ///   --sk-exit-sy: .9;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// ```css
  /// .zoom-out\:\$95 {
  ///   --sk-exit-sx: .95;
  ///   --sk-exit-sy: .95;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_string_to_skribble_value("95")
  }
  /// ```css
  /// .zoom-out\:\$100 {
  ///   --sk-exit-sx: 1;
  ///   --sk-exit-sy: 1;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
  /// ```css
  /// .zoom-out\:\$105 {
  ///   --sk-exit-sx: 1.05;
  ///   --sk-exit-sy: 1.05;
  /// }
  /// ```
  #[inline]
  fn n105(&self) -> String {
    self.append_string_to_skribble_value("105")
  }
  /// ```css
  /// .zoom-out\:\$110 {
  ///   --sk-exit-sx: 1.1;
  ///   --sk-exit-sy: 1.1;
  /// }
  /// ```
  #[inline]
  fn n110(&self) -> String {
    self.append_string_to_skribble_value("110")
  }
  /// ```css
  /// .zoom-out\:\$125 {
  ///   --sk-exit-sx: 1.25;
  ///   --sk-exit-sy: 1.25;
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_string_to_skribble_value("125")
  }
  /// ```css
  /// .zoom-out\:\$150 {
  ///   --sk-exit-sx: 1.5;
  ///   --sk-exit-sy: 1.5;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_string_to_skribble_value("150")
  }
}
impl GeneratedValueSetZoomOut for GeneratedAtomZoomOut {}
pub struct GeneratedAtomAnimateDuration(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateDuration {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateDuration: GeneratedSkribbleValue {
  /// ```css
  /// .animate-duration\:\$0 {
  ///   animation-duration: 0ms;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .animate-duration\:\$75 {
  ///   animation-duration: 75ms;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .animate-duration\:\$100 {
  ///   animation-duration: 100ms;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
  /// ```css
  /// .animate-duration\:\$150 {
  ///   animation-duration: 150ms;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_string_to_skribble_value("150")
  }
  /// ```css
  /// .animate-duration\:\$200 {
  ///   animation-duration: 200ms;
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_string_to_skribble_value("200")
  }
  /// ```css
  /// .animate-duration\:\$300 {
  ///   animation-duration: 300ms;
  /// }
  /// ```
  #[inline]
  fn n300(&self) -> String {
    self.append_string_to_skribble_value("300")
  }
  /// ```css
  /// .animate-duration\:\$500 {
  ///   animation-duration: 500ms;
  /// }
  /// ```
  #[inline]
  fn n500(&self) -> String {
    self.append_string_to_skribble_value("500")
  }
  /// ```css
  /// .animate-duration\:\$700 {
  ///   animation-duration: 700ms;
  /// }
  /// ```
  #[inline]
  fn n700(&self) -> String {
    self.append_string_to_skribble_value("700")
  }
  /// ```css
  /// .animate-duration\:\$1000 {
  ///   animation-duration: 1000ms;
  /// }
  /// ```
  #[inline]
  fn n1000(&self) -> String {
    self.append_string_to_skribble_value("1000")
  }
  /// ```css
  /// .animate-duration\:\$1500 {
  ///   animation-duration: 1500ms;
  /// }
  /// ```
  #[inline]
  fn n1500(&self) -> String {
    self.append_string_to_skribble_value("1500")
  }
  /// ```css
  /// .animate-duration\:\$2000 {
  ///   animation-duration: 2000ms;
  /// }
  /// ```
  #[inline]
  fn n2000(&self) -> String {
    self.append_string_to_skribble_value("2000")
  }
}
impl GeneratedValueSetAnimateDuration for GeneratedAtomAnimateDuration {}
pub struct GeneratedAtomAnimateEasing(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateEasing {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateEasing: GeneratedSkribbleValue {
  /// ```css
  /// .animate-easing\:\$linear {
  ///   animation-timing-function: linear;
  /// }
  /// ```
  #[inline]
  fn linear(&self) -> String {
    self.append_string_to_skribble_value("linear")
  }
  /// ```css
  /// .animate-easing\:\$in {
  ///   animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
  /// }
  /// ```
  #[inline]
  fn r#in(&self) -> String {
    self.append_string_to_skribble_value("in")
  }
  /// ```css
  /// .animate-easing\:\$out {
  ///   animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn out(&self) -> String {
    self.append_string_to_skribble_value("out")
  }
  /// ```css
  /// .animate-easing\:\$in-out {
  ///   animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn in_out(&self) -> String {
    self.append_string_to_skribble_value("inOut")
  }
}
impl GeneratedValueSetAnimateEasing for GeneratedAtomAnimateEasing {}
pub struct GeneratedAtomAnimateDelay(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateDelay {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateDelay: GeneratedSkribbleValue {
  /// ```css
  /// .animate-delay\:\$0 {
  ///   animation-delay: 0ms;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .animate-delay\:\$75 {
  ///   animation-delay: 75ms;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .animate-delay\:\$100 {
  ///   animation-delay: 100ms;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
  /// ```css
  /// .animate-delay\:\$150 {
  ///   animation-delay: 150ms;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_string_to_skribble_value("150")
  }
  /// ```css
  /// .animate-delay\:\$200 {
  ///   animation-delay: 200ms;
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_string_to_skribble_value("200")
  }
  /// ```css
  /// .animate-delay\:\$300 {
  ///   animation-delay: 300ms;
  /// }
  /// ```
  #[inline]
  fn n300(&self) -> String {
    self.append_string_to_skribble_value("300")
  }
  /// ```css
  /// .animate-delay\:\$500 {
  ///   animation-delay: 500ms;
  /// }
  /// ```
  #[inline]
  fn n500(&self) -> String {
    self.append_string_to_skribble_value("500")
  }
  /// ```css
  /// .animate-delay\:\$700 {
  ///   animation-delay: 700ms;
  /// }
  /// ```
  #[inline]
  fn n700(&self) -> String {
    self.append_string_to_skribble_value("700")
  }
  /// ```css
  /// .animate-delay\:\$1000 {
  ///   animation-delay: 1000ms;
  /// }
  /// ```
  #[inline]
  fn n1000(&self) -> String {
    self.append_string_to_skribble_value("1000")
  }
  /// ```css
  /// .animate-delay\:\$1500 {
  ///   animation-delay: 1500ms;
  /// }
  /// ```
  #[inline]
  fn n1500(&self) -> String {
    self.append_string_to_skribble_value("1500")
  }
  /// ```css
  /// .animate-delay\:\$2000 {
  ///   animation-delay: 2000ms;
  /// }
  /// ```
  #[inline]
  fn n2000(&self) -> String {
    self.append_string_to_skribble_value("2000")
  }
}
impl GeneratedValueSetAnimateDelay for GeneratedAtomAnimateDelay {}
pub struct GeneratedAtomAnimateRepeat(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateRepeat {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateRepeat: GeneratedSkribbleValue {
  /// ```css
  /// .animate-repeat\:\$0 {
  ///   animation-iteration-count: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .animate-repeat\:\$0\.5 {
  ///   animation-iteration-count: 0.5;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .animate-repeat\:\$1 {
  ///   animation-iteration-count: 1;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .animate-repeat\:\$2 {
  ///   animation-iteration-count: 2;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .animate-repeat\:\$3 {
  ///   animation-iteration-count: 3;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .animate-repeat\:\$infinite {
  ///   animation-iteration-count: infinite;
  /// }
  /// ```
  #[inline]
  fn infinite(&self) -> String {
    self.append_string_to_skribble_value("infinite")
  }
  /// ```css
  /// .animate-repeat\:\$in {
  ///   animation-iteration-count: cubic-bezier(0.4, 0, 1, 1);
  /// }
  /// ```
  #[inline]
  fn r#in(&self) -> String {
    self.append_string_to_skribble_value("in")
  }
  /// ```css
  /// .animate-repeat\:\$out {
  ///   animation-iteration-count: cubic-bezier(0, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn out(&self) -> String {
    self.append_string_to_skribble_value("out")
  }
  /// ```css
  /// .animate-repeat\:\$in-out {
  ///   animation-iteration-count: cubic-bezier(0.4, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn in_out(&self) -> String {
    self.append_string_to_skribble_value("inOut")
  }
}
impl GeneratedValueSetAnimateRepeat for GeneratedAtomAnimateRepeat {}
pub struct GeneratedAtomAnimateDirection(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateDirection {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateDirection: GeneratedSkribbleValue {
  /// ```css
  /// .animate-direction\:\$normal {
  ///   animation-direction: normal;
  /// }
  /// ```
  #[inline]
  fn normal(&self) -> String {
    self.append_string_to_skribble_value("normal")
  }
  /// ```css
  /// .animate-direction\:\$reverse {
  ///   animation-direction: reverse;
  /// }
  /// ```
  #[inline]
  fn reverse(&self) -> String {
    self.append_string_to_skribble_value("reverse")
  }
  /// ```css
  /// .animate-direction\:\$alt {
  ///   animation-direction: alternate;
  /// }
  /// ```
  #[inline]
  fn alt(&self) -> String {
    self.append_string_to_skribble_value("alt")
  }
  /// ```css
  /// .animate-direction\:\$alt-reverse {
  ///   animation-direction: alternate-reverse;
  /// }
  /// ```
  #[inline]
  fn alt_reverse(&self) -> String {
    self.append_string_to_skribble_value("altReverse")
  }
}
impl GeneratedValueSetAnimateDirection for GeneratedAtomAnimateDirection {}
pub struct GeneratedAtomAnimateFillMode(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateFillMode {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateFillMode: GeneratedSkribbleValue {
  /// ```css
  /// .animate-fill-mode\:\$none {
  ///   animation-fill-mode: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_string_to_skribble_value("none")
  }
  /// ```css
  /// .animate-fill-mode\:\$forwards {
  ///   animation-fill-mode: forwards;
  /// }
  /// ```
  #[inline]
  fn forwards(&self) -> String {
    self.append_string_to_skribble_value("forwards")
  }
  /// ```css
  /// .animate-fill-mode\:\$backwards {
  ///   animation-fill-mode: backwards;
  /// }
  /// ```
  #[inline]
  fn backwards(&self) -> String {
    self.append_string_to_skribble_value("backwards")
  }
  /// ```css
  /// .animate-fill-mode\:\$both {
  ///   animation-fill-mode: both;
  /// }
  /// ```
  #[inline]
  fn both(&self) -> String {
    self.append_string_to_skribble_value("both")
  }
}
impl GeneratedValueSetAnimateFillMode for GeneratedAtomAnimateFillMode {}
pub struct GeneratedAtomAnimateState(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateState {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateState: GeneratedSkribbleValue {
  /// ```css
  /// .animate-state\:\$running {
  ///   animation-play-state: running;
  /// }
  /// ```
  #[inline]
  fn running(&self) -> String {
    self.append_string_to_skribble_value("running")
  }
  /// ```css
  /// .animate-state\:\$paused {
  ///   animation-play-state: paused;
  /// }
  /// ```
  #[inline]
  fn paused(&self) -> String {
    self.append_string_to_skribble_value("paused")
  }
}
impl GeneratedValueSetAnimateState for GeneratedAtomAnimateState {}
pub struct GeneratedAtomZoom(String);
impl GeneratedSkribbleValue for GeneratedAtomZoom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetZoom: GeneratedSkribbleValue {
  /// ```css
  /// .zoom\:\$0 {
  ///   --sk-invalid-css-variable: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .zoom\:\$50 {
  ///   --sk-invalid-css-variable: .5;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  /// ```css
  /// .zoom\:\$75 {
  ///   --sk-invalid-css-variable: .75;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .zoom\:\$90 {
  ///   --sk-invalid-css-variable: .9;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// ```css
  /// .zoom\:\$95 {
  ///   --sk-invalid-css-variable: .95;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_string_to_skribble_value("95")
  }
  /// ```css
  /// .zoom\:\$100 {
  ///   --sk-invalid-css-variable: 1;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
  /// ```css
  /// .zoom\:\$105 {
  ///   --sk-invalid-css-variable: 1.05;
  /// }
  /// ```
  #[inline]
  fn n105(&self) -> String {
    self.append_string_to_skribble_value("105")
  }
  /// ```css
  /// .zoom\:\$110 {
  ///   --sk-invalid-css-variable: 1.1;
  /// }
  /// ```
  #[inline]
  fn n110(&self) -> String {
    self.append_string_to_skribble_value("110")
  }
  /// ```css
  /// .zoom\:\$125 {
  ///   --sk-invalid-css-variable: 1.25;
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_string_to_skribble_value("125")
  }
  /// ```css
  /// .zoom\:\$150 {
  ///   --sk-invalid-css-variable: 1.5;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_string_to_skribble_value("150")
  }
}
impl GeneratedValueSetZoom for GeneratedAtomZoom {}
pub struct GeneratedAtomFont(String);
impl GeneratedSkribbleValue for GeneratedAtomFont {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetFont: GeneratedSkribbleValue {
  /// ```css
  /// .font\:\$sans {
  ///   font-family: ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
  /// }
  /// ```
  #[inline]
  fn sans(&self) -> String {
    self.append_string_to_skribble_value("sans")
  }
  /// ```css
  /// .font\:\$serif {
  ///   font-family: ui-serif,Georgia,Cambria,"Times New Roman",Times,serif;
  /// }
  /// ```
  #[inline]
  fn serif(&self) -> String {
    self.append_string_to_skribble_value("serif")
  }
  /// ```css
  /// .font\:\$mono {
  ///   font-family: ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;
  /// }
  /// ```
  #[inline]
  fn mono(&self) -> String {
    self.append_string_to_skribble_value("mono")
  }
}
impl GeneratedValueSetFont for GeneratedAtomFont {}
pub struct GeneratedAtomP(String);
impl GeneratedSkribbleValue for GeneratedAtomP {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetP: GeneratedSkribbleValue {
  /// ```css
  /// .p\:\$0 {
  ///   padding: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .p\:\$1 {
  ///   padding: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .p\:\$2 {
  ///   padding: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .p\:\$3 {
  ///   padding: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .p\:\$4 {
  ///   padding: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .p\:\$5 {
  ///   padding: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .p\:\$6 {
  ///   padding: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .p\:\$7 {
  ///   padding: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .p\:\$8 {
  ///   padding: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .p\:\$9 {
  ///   padding: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .p\:\$10 {
  ///   padding: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .p\:\$11 {
  ///   padding: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .p\:\$12 {
  ///   padding: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .p\:\$14 {
  ///   padding: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .p\:\$16 {
  ///   padding: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .p\:\$20 {
  ///   padding: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .p\:\$24 {
  ///   padding: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .p\:\$28 {
  ///   padding: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .p\:\$32 {
  ///   padding: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .p\:\$36 {
  ///   padding: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .p\:\$40 {
  ///   padding: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .p\:\$44 {
  ///   padding: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .p\:\$48 {
  ///   padding: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .p\:\$52 {
  ///   padding: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .p\:\$56 {
  ///   padding: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .p\:\$60 {
  ///   padding: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .p\:\$64 {
  ///   padding: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .p\:\$72 {
  ///   padding: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .p\:\$80 {
  ///   padding: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .p\:\$96 {
  ///   padding: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .p\:\$px {
  ///   padding: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .p\:\$0\.5 {
  ///   padding: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .p\:\$1\.5 {
  ///   padding: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .p\:\$2\.5 {
  ///   padding: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .p\:\$3\.5 {
  ///   padding: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetP for GeneratedAtomP {}
pub struct GeneratedAtomPy(String);
impl GeneratedSkribbleValue for GeneratedAtomPy {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPy: GeneratedSkribbleValue {
  /// ```css
  /// .py\:\$0 {
  ///   padding-top: 0px;
  ///   padding-bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .py\:\$1 {
  ///   padding-top: 0.25rem;
  ///   padding-bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .py\:\$2 {
  ///   padding-top: 0.5rem;
  ///   padding-bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .py\:\$3 {
  ///   padding-top: 0.75rem;
  ///   padding-bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .py\:\$4 {
  ///   padding-top: 1rem;
  ///   padding-bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .py\:\$5 {
  ///   padding-top: 1.25rem;
  ///   padding-bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .py\:\$6 {
  ///   padding-top: 1.5rem;
  ///   padding-bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .py\:\$7 {
  ///   padding-top: 1.75rem;
  ///   padding-bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .py\:\$8 {
  ///   padding-top: 2rem;
  ///   padding-bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .py\:\$9 {
  ///   padding-top: 2.25rem;
  ///   padding-bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .py\:\$10 {
  ///   padding-top: 2.5rem;
  ///   padding-bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .py\:\$11 {
  ///   padding-top: 2.75rem;
  ///   padding-bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .py\:\$12 {
  ///   padding-top: 3rem;
  ///   padding-bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .py\:\$14 {
  ///   padding-top: 3.5rem;
  ///   padding-bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .py\:\$16 {
  ///   padding-top: 4rem;
  ///   padding-bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .py\:\$20 {
  ///   padding-top: 5rem;
  ///   padding-bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .py\:\$24 {
  ///   padding-top: 6rem;
  ///   padding-bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .py\:\$28 {
  ///   padding-top: 7rem;
  ///   padding-bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .py\:\$32 {
  ///   padding-top: 8rem;
  ///   padding-bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .py\:\$36 {
  ///   padding-top: 9rem;
  ///   padding-bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .py\:\$40 {
  ///   padding-top: 10rem;
  ///   padding-bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .py\:\$44 {
  ///   padding-top: 11rem;
  ///   padding-bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .py\:\$48 {
  ///   padding-top: 12rem;
  ///   padding-bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .py\:\$52 {
  ///   padding-top: 13rem;
  ///   padding-bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .py\:\$56 {
  ///   padding-top: 14rem;
  ///   padding-bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .py\:\$60 {
  ///   padding-top: 15rem;
  ///   padding-bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .py\:\$64 {
  ///   padding-top: 16rem;
  ///   padding-bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .py\:\$72 {
  ///   padding-top: 18rem;
  ///   padding-bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .py\:\$80 {
  ///   padding-top: 20rem;
  ///   padding-bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .py\:\$96 {
  ///   padding-top: 24rem;
  ///   padding-bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .py\:\$px {
  ///   padding-top: 1px;
  ///   padding-bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .py\:\$0\.5 {
  ///   padding-top: 0.125rem;
  ///   padding-bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .py\:\$1\.5 {
  ///   padding-top: 0.375rem;
  ///   padding-bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .py\:\$2\.5 {
  ///   padding-top: 0.625rem;
  ///   padding-bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .py\:\$3\.5 {
  ///   padding-top: 0.875rem;
  ///   padding-bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPy for GeneratedAtomPy {}
pub struct GeneratedAtomPx(String);
impl GeneratedSkribbleValue for GeneratedAtomPx {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPx: GeneratedSkribbleValue {
  /// ```css
  /// .px\:\$0 {
  ///   padding-right: 0px;
  ///   padding-left: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .px\:\$1 {
  ///   padding-right: 0.25rem;
  ///   padding-left: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .px\:\$2 {
  ///   padding-right: 0.5rem;
  ///   padding-left: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .px\:\$3 {
  ///   padding-right: 0.75rem;
  ///   padding-left: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .px\:\$4 {
  ///   padding-right: 1rem;
  ///   padding-left: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .px\:\$5 {
  ///   padding-right: 1.25rem;
  ///   padding-left: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .px\:\$6 {
  ///   padding-right: 1.5rem;
  ///   padding-left: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .px\:\$7 {
  ///   padding-right: 1.75rem;
  ///   padding-left: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .px\:\$8 {
  ///   padding-right: 2rem;
  ///   padding-left: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .px\:\$9 {
  ///   padding-right: 2.25rem;
  ///   padding-left: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .px\:\$10 {
  ///   padding-right: 2.5rem;
  ///   padding-left: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .px\:\$11 {
  ///   padding-right: 2.75rem;
  ///   padding-left: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .px\:\$12 {
  ///   padding-right: 3rem;
  ///   padding-left: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .px\:\$14 {
  ///   padding-right: 3.5rem;
  ///   padding-left: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .px\:\$16 {
  ///   padding-right: 4rem;
  ///   padding-left: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .px\:\$20 {
  ///   padding-right: 5rem;
  ///   padding-left: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .px\:\$24 {
  ///   padding-right: 6rem;
  ///   padding-left: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .px\:\$28 {
  ///   padding-right: 7rem;
  ///   padding-left: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .px\:\$32 {
  ///   padding-right: 8rem;
  ///   padding-left: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .px\:\$36 {
  ///   padding-right: 9rem;
  ///   padding-left: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .px\:\$40 {
  ///   padding-right: 10rem;
  ///   padding-left: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .px\:\$44 {
  ///   padding-right: 11rem;
  ///   padding-left: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .px\:\$48 {
  ///   padding-right: 12rem;
  ///   padding-left: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .px\:\$52 {
  ///   padding-right: 13rem;
  ///   padding-left: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .px\:\$56 {
  ///   padding-right: 14rem;
  ///   padding-left: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .px\:\$60 {
  ///   padding-right: 15rem;
  ///   padding-left: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .px\:\$64 {
  ///   padding-right: 16rem;
  ///   padding-left: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .px\:\$72 {
  ///   padding-right: 18rem;
  ///   padding-left: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .px\:\$80 {
  ///   padding-right: 20rem;
  ///   padding-left: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .px\:\$96 {
  ///   padding-right: 24rem;
  ///   padding-left: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .px\:\$px {
  ///   padding-right: 1px;
  ///   padding-left: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .px\:\$0\.5 {
  ///   padding-right: 0.125rem;
  ///   padding-left: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .px\:\$1\.5 {
  ///   padding-right: 0.375rem;
  ///   padding-left: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .px\:\$2\.5 {
  ///   padding-right: 0.625rem;
  ///   padding-left: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .px\:\$3\.5 {
  ///   padding-right: 0.875rem;
  ///   padding-left: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPx for GeneratedAtomPx {}
pub struct GeneratedAtomPt(String);
impl GeneratedSkribbleValue for GeneratedAtomPt {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPt: GeneratedSkribbleValue {
  /// ```css
  /// .pt\:\$0 {
  ///   padding-top: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pt\:\$1 {
  ///   padding-top: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pt\:\$2 {
  ///   padding-top: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pt\:\$3 {
  ///   padding-top: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pt\:\$4 {
  ///   padding-top: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pt\:\$5 {
  ///   padding-top: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pt\:\$6 {
  ///   padding-top: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pt\:\$7 {
  ///   padding-top: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pt\:\$8 {
  ///   padding-top: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pt\:\$9 {
  ///   padding-top: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pt\:\$10 {
  ///   padding-top: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pt\:\$11 {
  ///   padding-top: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pt\:\$12 {
  ///   padding-top: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pt\:\$14 {
  ///   padding-top: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pt\:\$16 {
  ///   padding-top: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pt\:\$20 {
  ///   padding-top: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pt\:\$24 {
  ///   padding-top: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pt\:\$28 {
  ///   padding-top: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pt\:\$32 {
  ///   padding-top: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pt\:\$36 {
  ///   padding-top: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pt\:\$40 {
  ///   padding-top: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pt\:\$44 {
  ///   padding-top: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pt\:\$48 {
  ///   padding-top: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pt\:\$52 {
  ///   padding-top: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pt\:\$56 {
  ///   padding-top: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pt\:\$60 {
  ///   padding-top: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pt\:\$64 {
  ///   padding-top: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pt\:\$72 {
  ///   padding-top: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pt\:\$80 {
  ///   padding-top: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pt\:\$96 {
  ///   padding-top: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pt\:\$px {
  ///   padding-top: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pt\:\$0\.5 {
  ///   padding-top: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pt\:\$1\.5 {
  ///   padding-top: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pt\:\$2\.5 {
  ///   padding-top: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pt\:\$3\.5 {
  ///   padding-top: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPt for GeneratedAtomPt {}
pub struct GeneratedAtomPr(String);
impl GeneratedSkribbleValue for GeneratedAtomPr {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPr: GeneratedSkribbleValue {
  /// ```css
  /// .pr\:\$0 {
  ///   padding-right: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pr\:\$1 {
  ///   padding-right: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pr\:\$2 {
  ///   padding-right: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pr\:\$3 {
  ///   padding-right: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pr\:\$4 {
  ///   padding-right: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pr\:\$5 {
  ///   padding-right: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pr\:\$6 {
  ///   padding-right: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pr\:\$7 {
  ///   padding-right: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pr\:\$8 {
  ///   padding-right: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pr\:\$9 {
  ///   padding-right: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pr\:\$10 {
  ///   padding-right: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pr\:\$11 {
  ///   padding-right: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pr\:\$12 {
  ///   padding-right: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pr\:\$14 {
  ///   padding-right: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pr\:\$16 {
  ///   padding-right: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pr\:\$20 {
  ///   padding-right: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pr\:\$24 {
  ///   padding-right: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pr\:\$28 {
  ///   padding-right: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pr\:\$32 {
  ///   padding-right: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pr\:\$36 {
  ///   padding-right: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pr\:\$40 {
  ///   padding-right: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pr\:\$44 {
  ///   padding-right: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pr\:\$48 {
  ///   padding-right: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pr\:\$52 {
  ///   padding-right: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pr\:\$56 {
  ///   padding-right: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pr\:\$60 {
  ///   padding-right: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pr\:\$64 {
  ///   padding-right: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pr\:\$72 {
  ///   padding-right: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pr\:\$80 {
  ///   padding-right: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pr\:\$96 {
  ///   padding-right: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pr\:\$px {
  ///   padding-right: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pr\:\$0\.5 {
  ///   padding-right: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pr\:\$1\.5 {
  ///   padding-right: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pr\:\$2\.5 {
  ///   padding-right: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pr\:\$3\.5 {
  ///   padding-right: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPr for GeneratedAtomPr {}
pub struct GeneratedAtomPb(String);
impl GeneratedSkribbleValue for GeneratedAtomPb {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPb: GeneratedSkribbleValue {
  /// ```css
  /// .pb\:\$0 {
  ///   padding-bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pb\:\$1 {
  ///   padding-bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pb\:\$2 {
  ///   padding-bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pb\:\$3 {
  ///   padding-bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pb\:\$4 {
  ///   padding-bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pb\:\$5 {
  ///   padding-bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pb\:\$6 {
  ///   padding-bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pb\:\$7 {
  ///   padding-bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pb\:\$8 {
  ///   padding-bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pb\:\$9 {
  ///   padding-bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pb\:\$10 {
  ///   padding-bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pb\:\$11 {
  ///   padding-bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pb\:\$12 {
  ///   padding-bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pb\:\$14 {
  ///   padding-bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pb\:\$16 {
  ///   padding-bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pb\:\$20 {
  ///   padding-bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pb\:\$24 {
  ///   padding-bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pb\:\$28 {
  ///   padding-bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pb\:\$32 {
  ///   padding-bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pb\:\$36 {
  ///   padding-bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pb\:\$40 {
  ///   padding-bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pb\:\$44 {
  ///   padding-bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pb\:\$48 {
  ///   padding-bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pb\:\$52 {
  ///   padding-bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pb\:\$56 {
  ///   padding-bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pb\:\$60 {
  ///   padding-bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pb\:\$64 {
  ///   padding-bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pb\:\$72 {
  ///   padding-bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pb\:\$80 {
  ///   padding-bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pb\:\$96 {
  ///   padding-bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pb\:\$px {
  ///   padding-bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pb\:\$0\.5 {
  ///   padding-bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pb\:\$1\.5 {
  ///   padding-bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pb\:\$2\.5 {
  ///   padding-bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pb\:\$3\.5 {
  ///   padding-bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPb for GeneratedAtomPb {}
pub struct GeneratedAtomPl(String);
impl GeneratedSkribbleValue for GeneratedAtomPl {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPl: GeneratedSkribbleValue {
  /// ```css
  /// .pl\:\$0 {
  ///   padding-left: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pl\:\$1 {
  ///   padding-left: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pl\:\$2 {
  ///   padding-left: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pl\:\$3 {
  ///   padding-left: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pl\:\$4 {
  ///   padding-left: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pl\:\$5 {
  ///   padding-left: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pl\:\$6 {
  ///   padding-left: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pl\:\$7 {
  ///   padding-left: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pl\:\$8 {
  ///   padding-left: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pl\:\$9 {
  ///   padding-left: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pl\:\$10 {
  ///   padding-left: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pl\:\$11 {
  ///   padding-left: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pl\:\$12 {
  ///   padding-left: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pl\:\$14 {
  ///   padding-left: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pl\:\$16 {
  ///   padding-left: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pl\:\$20 {
  ///   padding-left: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pl\:\$24 {
  ///   padding-left: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pl\:\$28 {
  ///   padding-left: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pl\:\$32 {
  ///   padding-left: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pl\:\$36 {
  ///   padding-left: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pl\:\$40 {
  ///   padding-left: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pl\:\$44 {
  ///   padding-left: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pl\:\$48 {
  ///   padding-left: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pl\:\$52 {
  ///   padding-left: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pl\:\$56 {
  ///   padding-left: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pl\:\$60 {
  ///   padding-left: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pl\:\$64 {
  ///   padding-left: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pl\:\$72 {
  ///   padding-left: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pl\:\$80 {
  ///   padding-left: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pl\:\$96 {
  ///   padding-left: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pl\:\$px {
  ///   padding-left: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pl\:\$0\.5 {
  ///   padding-left: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pl\:\$1\.5 {
  ///   padding-left: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pl\:\$2\.5 {
  ///   padding-left: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pl\:\$3\.5 {
  ///   padding-left: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPl for GeneratedAtomPl {}
pub struct GeneratedAtomPbl(String);
impl GeneratedSkribbleValue for GeneratedAtomPbl {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPbl: GeneratedSkribbleValue {
  /// ```css
  /// .pbl\:\$0 {
  ///   padding-block: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pbl\:\$1 {
  ///   padding-block: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pbl\:\$2 {
  ///   padding-block: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pbl\:\$3 {
  ///   padding-block: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pbl\:\$4 {
  ///   padding-block: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pbl\:\$5 {
  ///   padding-block: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pbl\:\$6 {
  ///   padding-block: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pbl\:\$7 {
  ///   padding-block: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pbl\:\$8 {
  ///   padding-block: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pbl\:\$9 {
  ///   padding-block: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pbl\:\$10 {
  ///   padding-block: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pbl\:\$11 {
  ///   padding-block: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pbl\:\$12 {
  ///   padding-block: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pbl\:\$14 {
  ///   padding-block: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pbl\:\$16 {
  ///   padding-block: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pbl\:\$20 {
  ///   padding-block: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pbl\:\$24 {
  ///   padding-block: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pbl\:\$28 {
  ///   padding-block: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pbl\:\$32 {
  ///   padding-block: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pbl\:\$36 {
  ///   padding-block: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pbl\:\$40 {
  ///   padding-block: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pbl\:\$44 {
  ///   padding-block: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pbl\:\$48 {
  ///   padding-block: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pbl\:\$52 {
  ///   padding-block: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pbl\:\$56 {
  ///   padding-block: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pbl\:\$60 {
  ///   padding-block: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pbl\:\$64 {
  ///   padding-block: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pbl\:\$72 {
  ///   padding-block: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pbl\:\$80 {
  ///   padding-block: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pbl\:\$96 {
  ///   padding-block: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pbl\:\$px {
  ///   padding-block: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pbl\:\$0\.5 {
  ///   padding-block: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pbl\:\$1\.5 {
  ///   padding-block: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pbl\:\$2\.5 {
  ///   padding-block: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pbl\:\$3\.5 {
  ///   padding-block: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPbl for GeneratedAtomPbl {}
pub struct GeneratedAtomPbls(String);
impl GeneratedSkribbleValue for GeneratedAtomPbls {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPbls: GeneratedSkribbleValue {
  /// ```css
  /// .pbls\:\$0 {
  ///   padding-block-start: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pbls\:\$1 {
  ///   padding-block-start: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pbls\:\$2 {
  ///   padding-block-start: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pbls\:\$3 {
  ///   padding-block-start: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pbls\:\$4 {
  ///   padding-block-start: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pbls\:\$5 {
  ///   padding-block-start: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pbls\:\$6 {
  ///   padding-block-start: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pbls\:\$7 {
  ///   padding-block-start: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pbls\:\$8 {
  ///   padding-block-start: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pbls\:\$9 {
  ///   padding-block-start: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pbls\:\$10 {
  ///   padding-block-start: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pbls\:\$11 {
  ///   padding-block-start: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pbls\:\$12 {
  ///   padding-block-start: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pbls\:\$14 {
  ///   padding-block-start: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pbls\:\$16 {
  ///   padding-block-start: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pbls\:\$20 {
  ///   padding-block-start: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pbls\:\$24 {
  ///   padding-block-start: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pbls\:\$28 {
  ///   padding-block-start: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pbls\:\$32 {
  ///   padding-block-start: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pbls\:\$36 {
  ///   padding-block-start: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pbls\:\$40 {
  ///   padding-block-start: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pbls\:\$44 {
  ///   padding-block-start: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pbls\:\$48 {
  ///   padding-block-start: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pbls\:\$52 {
  ///   padding-block-start: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pbls\:\$56 {
  ///   padding-block-start: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pbls\:\$60 {
  ///   padding-block-start: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pbls\:\$64 {
  ///   padding-block-start: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pbls\:\$72 {
  ///   padding-block-start: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pbls\:\$80 {
  ///   padding-block-start: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pbls\:\$96 {
  ///   padding-block-start: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pbls\:\$px {
  ///   padding-block-start: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pbls\:\$0\.5 {
  ///   padding-block-start: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pbls\:\$1\.5 {
  ///   padding-block-start: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pbls\:\$2\.5 {
  ///   padding-block-start: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pbls\:\$3\.5 {
  ///   padding-block-start: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPbls for GeneratedAtomPbls {}
pub struct GeneratedAtomPble(String);
impl GeneratedSkribbleValue for GeneratedAtomPble {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPble: GeneratedSkribbleValue {
  /// ```css
  /// .pble\:\$0 {
  ///   padding-block-end: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pble\:\$1 {
  ///   padding-block-end: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pble\:\$2 {
  ///   padding-block-end: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pble\:\$3 {
  ///   padding-block-end: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pble\:\$4 {
  ///   padding-block-end: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pble\:\$5 {
  ///   padding-block-end: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pble\:\$6 {
  ///   padding-block-end: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pble\:\$7 {
  ///   padding-block-end: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pble\:\$8 {
  ///   padding-block-end: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pble\:\$9 {
  ///   padding-block-end: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pble\:\$10 {
  ///   padding-block-end: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pble\:\$11 {
  ///   padding-block-end: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pble\:\$12 {
  ///   padding-block-end: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pble\:\$14 {
  ///   padding-block-end: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pble\:\$16 {
  ///   padding-block-end: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pble\:\$20 {
  ///   padding-block-end: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pble\:\$24 {
  ///   padding-block-end: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pble\:\$28 {
  ///   padding-block-end: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pble\:\$32 {
  ///   padding-block-end: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pble\:\$36 {
  ///   padding-block-end: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pble\:\$40 {
  ///   padding-block-end: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pble\:\$44 {
  ///   padding-block-end: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pble\:\$48 {
  ///   padding-block-end: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pble\:\$52 {
  ///   padding-block-end: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pble\:\$56 {
  ///   padding-block-end: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pble\:\$60 {
  ///   padding-block-end: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pble\:\$64 {
  ///   padding-block-end: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pble\:\$72 {
  ///   padding-block-end: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pble\:\$80 {
  ///   padding-block-end: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pble\:\$96 {
  ///   padding-block-end: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pble\:\$px {
  ///   padding-block-end: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pble\:\$0\.5 {
  ///   padding-block-end: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pble\:\$1\.5 {
  ///   padding-block-end: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pble\:\$2\.5 {
  ///   padding-block-end: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pble\:\$3\.5 {
  ///   padding-block-end: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPble for GeneratedAtomPble {}
pub struct GeneratedAtomPin(String);
impl GeneratedSkribbleValue for GeneratedAtomPin {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPin: GeneratedSkribbleValue {
  /// ```css
  /// .pin\:\$0 {
  ///   padding-inline: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pin\:\$1 {
  ///   padding-inline: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pin\:\$2 {
  ///   padding-inline: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pin\:\$3 {
  ///   padding-inline: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pin\:\$4 {
  ///   padding-inline: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pin\:\$5 {
  ///   padding-inline: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pin\:\$6 {
  ///   padding-inline: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pin\:\$7 {
  ///   padding-inline: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pin\:\$8 {
  ///   padding-inline: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pin\:\$9 {
  ///   padding-inline: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pin\:\$10 {
  ///   padding-inline: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pin\:\$11 {
  ///   padding-inline: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pin\:\$12 {
  ///   padding-inline: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pin\:\$14 {
  ///   padding-inline: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pin\:\$16 {
  ///   padding-inline: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pin\:\$20 {
  ///   padding-inline: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pin\:\$24 {
  ///   padding-inline: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pin\:\$28 {
  ///   padding-inline: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pin\:\$32 {
  ///   padding-inline: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pin\:\$36 {
  ///   padding-inline: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pin\:\$40 {
  ///   padding-inline: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pin\:\$44 {
  ///   padding-inline: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pin\:\$48 {
  ///   padding-inline: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pin\:\$52 {
  ///   padding-inline: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pin\:\$56 {
  ///   padding-inline: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pin\:\$60 {
  ///   padding-inline: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pin\:\$64 {
  ///   padding-inline: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pin\:\$72 {
  ///   padding-inline: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pin\:\$80 {
  ///   padding-inline: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pin\:\$96 {
  ///   padding-inline: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pin\:\$px {
  ///   padding-inline: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pin\:\$0\.5 {
  ///   padding-inline: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pin\:\$1\.5 {
  ///   padding-inline: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pin\:\$2\.5 {
  ///   padding-inline: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pin\:\$3\.5 {
  ///   padding-inline: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPin for GeneratedAtomPin {}
pub struct GeneratedAtomPins(String);
impl GeneratedSkribbleValue for GeneratedAtomPins {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPins: GeneratedSkribbleValue {
  /// ```css
  /// .pins\:\$0 {
  ///   padding-inline-start: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pins\:\$1 {
  ///   padding-inline-start: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pins\:\$2 {
  ///   padding-inline-start: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pins\:\$3 {
  ///   padding-inline-start: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pins\:\$4 {
  ///   padding-inline-start: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pins\:\$5 {
  ///   padding-inline-start: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pins\:\$6 {
  ///   padding-inline-start: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pins\:\$7 {
  ///   padding-inline-start: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pins\:\$8 {
  ///   padding-inline-start: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pins\:\$9 {
  ///   padding-inline-start: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pins\:\$10 {
  ///   padding-inline-start: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pins\:\$11 {
  ///   padding-inline-start: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pins\:\$12 {
  ///   padding-inline-start: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pins\:\$14 {
  ///   padding-inline-start: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pins\:\$16 {
  ///   padding-inline-start: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pins\:\$20 {
  ///   padding-inline-start: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pins\:\$24 {
  ///   padding-inline-start: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pins\:\$28 {
  ///   padding-inline-start: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pins\:\$32 {
  ///   padding-inline-start: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pins\:\$36 {
  ///   padding-inline-start: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pins\:\$40 {
  ///   padding-inline-start: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pins\:\$44 {
  ///   padding-inline-start: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pins\:\$48 {
  ///   padding-inline-start: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pins\:\$52 {
  ///   padding-inline-start: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pins\:\$56 {
  ///   padding-inline-start: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pins\:\$60 {
  ///   padding-inline-start: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pins\:\$64 {
  ///   padding-inline-start: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pins\:\$72 {
  ///   padding-inline-start: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pins\:\$80 {
  ///   padding-inline-start: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pins\:\$96 {
  ///   padding-inline-start: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pins\:\$px {
  ///   padding-inline-start: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pins\:\$0\.5 {
  ///   padding-inline-start: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pins\:\$1\.5 {
  ///   padding-inline-start: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pins\:\$2\.5 {
  ///   padding-inline-start: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pins\:\$3\.5 {
  ///   padding-inline-start: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPins for GeneratedAtomPins {}
pub struct GeneratedAtomPine(String);
impl GeneratedSkribbleValue for GeneratedAtomPine {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPine: GeneratedSkribbleValue {
  /// ```css
  /// .pine\:\$0 {
  ///   padding-inline-end: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .pine\:\$1 {
  ///   padding-inline-end: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .pine\:\$2 {
  ///   padding-inline-end: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .pine\:\$3 {
  ///   padding-inline-end: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .pine\:\$4 {
  ///   padding-inline-end: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .pine\:\$5 {
  ///   padding-inline-end: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .pine\:\$6 {
  ///   padding-inline-end: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .pine\:\$7 {
  ///   padding-inline-end: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .pine\:\$8 {
  ///   padding-inline-end: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .pine\:\$9 {
  ///   padding-inline-end: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .pine\:\$10 {
  ///   padding-inline-end: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .pine\:\$11 {
  ///   padding-inline-end: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .pine\:\$12 {
  ///   padding-inline-end: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .pine\:\$14 {
  ///   padding-inline-end: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .pine\:\$16 {
  ///   padding-inline-end: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .pine\:\$20 {
  ///   padding-inline-end: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .pine\:\$24 {
  ///   padding-inline-end: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .pine\:\$28 {
  ///   padding-inline-end: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .pine\:\$32 {
  ///   padding-inline-end: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .pine\:\$36 {
  ///   padding-inline-end: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .pine\:\$40 {
  ///   padding-inline-end: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .pine\:\$44 {
  ///   padding-inline-end: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .pine\:\$48 {
  ///   padding-inline-end: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .pine\:\$52 {
  ///   padding-inline-end: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .pine\:\$56 {
  ///   padding-inline-end: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .pine\:\$60 {
  ///   padding-inline-end: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .pine\:\$64 {
  ///   padding-inline-end: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .pine\:\$72 {
  ///   padding-inline-end: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .pine\:\$80 {
  ///   padding-inline-end: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .pine\:\$96 {
  ///   padding-inline-end: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .pine\:\$px {
  ///   padding-inline-end: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .pine\:\$0\.5 {
  ///   padding-inline-end: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .pine\:\$1\.5 {
  ///   padding-inline-end: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .pine\:\$2\.5 {
  ///   padding-inline-end: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .pine\:\$3\.5 {
  ///   padding-inline-end: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetPine for GeneratedAtomPine {}
pub struct GeneratedAtomM(String);
impl GeneratedSkribbleValue for GeneratedAtomM {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetM: GeneratedSkribbleValue {
  /// ```css
  /// .m\:\$0 {
  ///   margin: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .m\:\$1 {
  ///   margin: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .m\:\$2 {
  ///   margin: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .m\:\$3 {
  ///   margin: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .m\:\$4 {
  ///   margin: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .m\:\$5 {
  ///   margin: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .m\:\$6 {
  ///   margin: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .m\:\$7 {
  ///   margin: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .m\:\$8 {
  ///   margin: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .m\:\$9 {
  ///   margin: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .m\:\$10 {
  ///   margin: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .m\:\$11 {
  ///   margin: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .m\:\$12 {
  ///   margin: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .m\:\$14 {
  ///   margin: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .m\:\$16 {
  ///   margin: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .m\:\$20 {
  ///   margin: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .m\:\$24 {
  ///   margin: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .m\:\$28 {
  ///   margin: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .m\:\$32 {
  ///   margin: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .m\:\$36 {
  ///   margin: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .m\:\$40 {
  ///   margin: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .m\:\$44 {
  ///   margin: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .m\:\$48 {
  ///   margin: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .m\:\$52 {
  ///   margin: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .m\:\$56 {
  ///   margin: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .m\:\$60 {
  ///   margin: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .m\:\$64 {
  ///   margin: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .m\:\$72 {
  ///   margin: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .m\:\$80 {
  ///   margin: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .m\:\$96 {
  ///   margin: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .m\:\$px {
  ///   margin: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .m\:\$0\.5 {
  ///   margin: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .m\:\$1\.5 {
  ///   margin: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .m\:\$2\.5 {
  ///   margin: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .m\:\$3\.5 {
  ///   margin: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetM for GeneratedAtomM {}
pub struct GeneratedAtomMy(String);
impl GeneratedSkribbleValue for GeneratedAtomMy {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMy: GeneratedSkribbleValue {
  /// ```css
  /// .my\:\$0 {
  ///   margin-top: 0px;
  ///   margin-bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .my\:\$1 {
  ///   margin-top: 0.25rem;
  ///   margin-bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .my\:\$2 {
  ///   margin-top: 0.5rem;
  ///   margin-bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .my\:\$3 {
  ///   margin-top: 0.75rem;
  ///   margin-bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .my\:\$4 {
  ///   margin-top: 1rem;
  ///   margin-bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .my\:\$5 {
  ///   margin-top: 1.25rem;
  ///   margin-bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .my\:\$6 {
  ///   margin-top: 1.5rem;
  ///   margin-bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .my\:\$7 {
  ///   margin-top: 1.75rem;
  ///   margin-bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .my\:\$8 {
  ///   margin-top: 2rem;
  ///   margin-bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .my\:\$9 {
  ///   margin-top: 2.25rem;
  ///   margin-bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .my\:\$10 {
  ///   margin-top: 2.5rem;
  ///   margin-bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .my\:\$11 {
  ///   margin-top: 2.75rem;
  ///   margin-bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .my\:\$12 {
  ///   margin-top: 3rem;
  ///   margin-bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .my\:\$14 {
  ///   margin-top: 3.5rem;
  ///   margin-bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .my\:\$16 {
  ///   margin-top: 4rem;
  ///   margin-bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .my\:\$20 {
  ///   margin-top: 5rem;
  ///   margin-bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .my\:\$24 {
  ///   margin-top: 6rem;
  ///   margin-bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .my\:\$28 {
  ///   margin-top: 7rem;
  ///   margin-bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .my\:\$32 {
  ///   margin-top: 8rem;
  ///   margin-bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .my\:\$36 {
  ///   margin-top: 9rem;
  ///   margin-bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .my\:\$40 {
  ///   margin-top: 10rem;
  ///   margin-bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .my\:\$44 {
  ///   margin-top: 11rem;
  ///   margin-bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .my\:\$48 {
  ///   margin-top: 12rem;
  ///   margin-bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .my\:\$52 {
  ///   margin-top: 13rem;
  ///   margin-bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .my\:\$56 {
  ///   margin-top: 14rem;
  ///   margin-bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .my\:\$60 {
  ///   margin-top: 15rem;
  ///   margin-bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .my\:\$64 {
  ///   margin-top: 16rem;
  ///   margin-bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .my\:\$72 {
  ///   margin-top: 18rem;
  ///   margin-bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .my\:\$80 {
  ///   margin-top: 20rem;
  ///   margin-bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .my\:\$96 {
  ///   margin-top: 24rem;
  ///   margin-bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .my\:\$px {
  ///   margin-top: 1px;
  ///   margin-bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .my\:\$0\.5 {
  ///   margin-top: 0.125rem;
  ///   margin-bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .my\:\$1\.5 {
  ///   margin-top: 0.375rem;
  ///   margin-bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .my\:\$2\.5 {
  ///   margin-top: 0.625rem;
  ///   margin-bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .my\:\$3\.5 {
  ///   margin-top: 0.875rem;
  ///   margin-bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetMy for GeneratedAtomMy {}
pub struct GeneratedAtomMx(String);
impl GeneratedSkribbleValue for GeneratedAtomMx {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMx: GeneratedSkribbleValue {
  /// ```css
  /// .mx\:\$0 {
  ///   margin-right: 0px;
  ///   margin-left: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .mx\:\$1 {
  ///   margin-right: 0.25rem;
  ///   margin-left: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .mx\:\$2 {
  ///   margin-right: 0.5rem;
  ///   margin-left: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .mx\:\$3 {
  ///   margin-right: 0.75rem;
  ///   margin-left: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .mx\:\$4 {
  ///   margin-right: 1rem;
  ///   margin-left: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .mx\:\$5 {
  ///   margin-right: 1.25rem;
  ///   margin-left: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .mx\:\$6 {
  ///   margin-right: 1.5rem;
  ///   margin-left: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .mx\:\$7 {
  ///   margin-right: 1.75rem;
  ///   margin-left: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .mx\:\$8 {
  ///   margin-right: 2rem;
  ///   margin-left: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .mx\:\$9 {
  ///   margin-right: 2.25rem;
  ///   margin-left: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .mx\:\$10 {
  ///   margin-right: 2.5rem;
  ///   margin-left: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .mx\:\$11 {
  ///   margin-right: 2.75rem;
  ///   margin-left: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .mx\:\$12 {
  ///   margin-right: 3rem;
  ///   margin-left: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .mx\:\$14 {
  ///   margin-right: 3.5rem;
  ///   margin-left: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .mx\:\$16 {
  ///   margin-right: 4rem;
  ///   margin-left: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .mx\:\$20 {
  ///   margin-right: 5rem;
  ///   margin-left: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .mx\:\$24 {
  ///   margin-right: 6rem;
  ///   margin-left: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .mx\:\$28 {
  ///   margin-right: 7rem;
  ///   margin-left: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .mx\:\$32 {
  ///   margin-right: 8rem;
  ///   margin-left: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .mx\:\$36 {
  ///   margin-right: 9rem;
  ///   margin-left: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .mx\:\$40 {
  ///   margin-right: 10rem;
  ///   margin-left: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .mx\:\$44 {
  ///   margin-right: 11rem;
  ///   margin-left: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .mx\:\$48 {
  ///   margin-right: 12rem;
  ///   margin-left: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .mx\:\$52 {
  ///   margin-right: 13rem;
  ///   margin-left: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .mx\:\$56 {
  ///   margin-right: 14rem;
  ///   margin-left: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .mx\:\$60 {
  ///   margin-right: 15rem;
  ///   margin-left: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .mx\:\$64 {
  ///   margin-right: 16rem;
  ///   margin-left: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .mx\:\$72 {
  ///   margin-right: 18rem;
  ///   margin-left: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .mx\:\$80 {
  ///   margin-right: 20rem;
  ///   margin-left: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .mx\:\$96 {
  ///   margin-right: 24rem;
  ///   margin-left: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .mx\:\$px {
  ///   margin-right: 1px;
  ///   margin-left: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .mx\:\$0\.5 {
  ///   margin-right: 0.125rem;
  ///   margin-left: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .mx\:\$1\.5 {
  ///   margin-right: 0.375rem;
  ///   margin-left: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .mx\:\$2\.5 {
  ///   margin-right: 0.625rem;
  ///   margin-left: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .mx\:\$3\.5 {
  ///   margin-right: 0.875rem;
  ///   margin-left: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetMx for GeneratedAtomMx {}
pub struct GeneratedAtomMt(String);
impl GeneratedSkribbleValue for GeneratedAtomMt {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMt: GeneratedSkribbleValue {
  /// ```css
  /// .mt\:\$0 {
  ///   margin-top: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .mt\:\$1 {
  ///   margin-top: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .mt\:\$2 {
  ///   margin-top: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .mt\:\$3 {
  ///   margin-top: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .mt\:\$4 {
  ///   margin-top: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .mt\:\$5 {
  ///   margin-top: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .mt\:\$6 {
  ///   margin-top: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .mt\:\$7 {
  ///   margin-top: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .mt\:\$8 {
  ///   margin-top: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .mt\:\$9 {
  ///   margin-top: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .mt\:\$10 {
  ///   margin-top: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .mt\:\$11 {
  ///   margin-top: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .mt\:\$12 {
  ///   margin-top: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .mt\:\$14 {
  ///   margin-top: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .mt\:\$16 {
  ///   margin-top: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .mt\:\$20 {
  ///   margin-top: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .mt\:\$24 {
  ///   margin-top: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .mt\:\$28 {
  ///   margin-top: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .mt\:\$32 {
  ///   margin-top: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .mt\:\$36 {
  ///   margin-top: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .mt\:\$40 {
  ///   margin-top: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .mt\:\$44 {
  ///   margin-top: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .mt\:\$48 {
  ///   margin-top: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .mt\:\$52 {
  ///   margin-top: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .mt\:\$56 {
  ///   margin-top: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .mt\:\$60 {
  ///   margin-top: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .mt\:\$64 {
  ///   margin-top: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .mt\:\$72 {
  ///   margin-top: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .mt\:\$80 {
  ///   margin-top: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .mt\:\$96 {
  ///   margin-top: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .mt\:\$px {
  ///   margin-top: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .mt\:\$0\.5 {
  ///   margin-top: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .mt\:\$1\.5 {
  ///   margin-top: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .mt\:\$2\.5 {
  ///   margin-top: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .mt\:\$3\.5 {
  ///   margin-top: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetMt for GeneratedAtomMt {}
pub struct GeneratedAtomMr(String);
impl GeneratedSkribbleValue for GeneratedAtomMr {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMr: GeneratedSkribbleValue {
  /// ```css
  /// .mr\:\$0 {
  ///   margin-right: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .mr\:\$1 {
  ///   margin-right: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .mr\:\$2 {
  ///   margin-right: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .mr\:\$3 {
  ///   margin-right: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .mr\:\$4 {
  ///   margin-right: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .mr\:\$5 {
  ///   margin-right: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .mr\:\$6 {
  ///   margin-right: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .mr\:\$7 {
  ///   margin-right: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .mr\:\$8 {
  ///   margin-right: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .mr\:\$9 {
  ///   margin-right: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .mr\:\$10 {
  ///   margin-right: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .mr\:\$11 {
  ///   margin-right: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .mr\:\$12 {
  ///   margin-right: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .mr\:\$14 {
  ///   margin-right: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .mr\:\$16 {
  ///   margin-right: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .mr\:\$20 {
  ///   margin-right: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .mr\:\$24 {
  ///   margin-right: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .mr\:\$28 {
  ///   margin-right: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .mr\:\$32 {
  ///   margin-right: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .mr\:\$36 {
  ///   margin-right: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .mr\:\$40 {
  ///   margin-right: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .mr\:\$44 {
  ///   margin-right: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .mr\:\$48 {
  ///   margin-right: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .mr\:\$52 {
  ///   margin-right: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .mr\:\$56 {
  ///   margin-right: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .mr\:\$60 {
  ///   margin-right: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .mr\:\$64 {
  ///   margin-right: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .mr\:\$72 {
  ///   margin-right: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .mr\:\$80 {
  ///   margin-right: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .mr\:\$96 {
  ///   margin-right: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .mr\:\$px {
  ///   margin-right: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .mr\:\$0\.5 {
  ///   margin-right: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .mr\:\$1\.5 {
  ///   margin-right: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .mr\:\$2\.5 {
  ///   margin-right: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .mr\:\$3\.5 {
  ///   margin-right: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetMr for GeneratedAtomMr {}
pub struct GeneratedAtomMb(String);
impl GeneratedSkribbleValue for GeneratedAtomMb {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMb: GeneratedSkribbleValue {
  /// ```css
  /// .mb\:\$0 {
  ///   margin-bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .mb\:\$1 {
  ///   margin-bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .mb\:\$2 {
  ///   margin-bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .mb\:\$3 {
  ///   margin-bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .mb\:\$4 {
  ///   margin-bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .mb\:\$5 {
  ///   margin-bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .mb\:\$6 {
  ///   margin-bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .mb\:\$7 {
  ///   margin-bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .mb\:\$8 {
  ///   margin-bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .mb\:\$9 {
  ///   margin-bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .mb\:\$10 {
  ///   margin-bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .mb\:\$11 {
  ///   margin-bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .mb\:\$12 {
  ///   margin-bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .mb\:\$14 {
  ///   margin-bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .mb\:\$16 {
  ///   margin-bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .mb\:\$20 {
  ///   margin-bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .mb\:\$24 {
  ///   margin-bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .mb\:\$28 {
  ///   margin-bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .mb\:\$32 {
  ///   margin-bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .mb\:\$36 {
  ///   margin-bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .mb\:\$40 {
  ///   margin-bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .mb\:\$44 {
  ///   margin-bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .mb\:\$48 {
  ///   margin-bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .mb\:\$52 {
  ///   margin-bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .mb\:\$56 {
  ///   margin-bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .mb\:\$60 {
  ///   margin-bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .mb\:\$64 {
  ///   margin-bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .mb\:\$72 {
  ///   margin-bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .mb\:\$80 {
  ///   margin-bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .mb\:\$96 {
  ///   margin-bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .mb\:\$px {
  ///   margin-bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .mb\:\$0\.5 {
  ///   margin-bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .mb\:\$1\.5 {
  ///   margin-bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .mb\:\$2\.5 {
  ///   margin-bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .mb\:\$3\.5 {
  ///   margin-bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetMb for GeneratedAtomMb {}
pub struct GeneratedAtomMl(String);
impl GeneratedSkribbleValue for GeneratedAtomMl {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMl: GeneratedSkribbleValue {
  /// ```css
  /// .ml\:\$0 {
  ///   margin-left: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .ml\:\$1 {
  ///   margin-left: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .ml\:\$2 {
  ///   margin-left: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .ml\:\$3 {
  ///   margin-left: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .ml\:\$4 {
  ///   margin-left: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .ml\:\$5 {
  ///   margin-left: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .ml\:\$6 {
  ///   margin-left: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  /// ```css
  /// .ml\:\$7 {
  ///   margin-left: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  /// ```css
  /// .ml\:\$8 {
  ///   margin-left: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  /// ```css
  /// .ml\:\$9 {
  ///   margin-left: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  /// ```css
  /// .ml\:\$10 {
  ///   margin-left: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .ml\:\$11 {
  ///   margin-left: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  /// ```css
  /// .ml\:\$12 {
  ///   margin-left: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  /// ```css
  /// .ml\:\$14 {
  ///   margin-left: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  /// ```css
  /// .ml\:\$16 {
  ///   margin-left: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  /// ```css
  /// .ml\:\$20 {
  ///   margin-left: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .ml\:\$24 {
  ///   margin-left: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  /// ```css
  /// .ml\:\$28 {
  ///   margin-left: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  /// ```css
  /// .ml\:\$32 {
  ///   margin-left: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  /// ```css
  /// .ml\:\$36 {
  ///   margin-left: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  /// ```css
  /// .ml\:\$40 {
  ///   margin-left: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .ml\:\$44 {
  ///   margin-left: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  /// ```css
  /// .ml\:\$48 {
  ///   margin-left: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  /// ```css
  /// .ml\:\$52 {
  ///   margin-left: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  /// ```css
  /// .ml\:\$56 {
  ///   margin-left: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  /// ```css
  /// .ml\:\$60 {
  ///   margin-left: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .ml\:\$64 {
  ///   margin-left: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  /// ```css
  /// .ml\:\$72 {
  ///   margin-left: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  /// ```css
  /// .ml\:\$80 {
  ///   margin-left: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .ml\:\$96 {
  ///   margin-left: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  /// ```css
  /// .ml\:\$px {
  ///   margin-left: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  /// ```css
  /// .ml\:\$0\.5 {
  ///   margin-left: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  /// ```css
  /// .ml\:\$1\.5 {
  ///   margin-left: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  /// ```css
  /// .ml\:\$2\.5 {
  ///   margin-left: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  /// ```css
  /// .ml\:\$3\.5 {
  ///   margin-left: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
impl GeneratedValueSetMl for GeneratedAtomMl {}
pub struct GeneratedAtomZ(String);
impl GeneratedSkribbleValue for GeneratedAtomZ {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetZ: GeneratedSkribbleValue {
  /// ```css
  /// .z\:\$0 {
  ///   z-index: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .z\:\$1 {
  ///   z-index: 1;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  /// ```css
  /// .z\:\$2 {
  ///   z-index: 2;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  /// ```css
  /// .z\:\$3 {
  ///   z-index: 3;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  /// ```css
  /// .z\:\$4 {
  ///   z-index: 4;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  /// ```css
  /// .z\:\$5 {
  ///   z-index: 5;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .z\:\$10 {
  ///   z-index: 10;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .z\:\$20 {
  ///   z-index: 20;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .z\:\$30 {
  ///   z-index: 30;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_string_to_skribble_value("30")
  }
  /// ```css
  /// .z\:\$40 {
  ///   z-index: 40;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .z\:\$50 {
  ///   z-index: 50;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  /// ```css
  /// .z\:\$60 {
  ///   z-index: 60;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .z\:\$auto {
  ///   z-index: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_string_to_skribble_value("auto")
  }
  /// ```css
  /// .z\:\$1 {
  ///   z-index: -1;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_string_to_skribble_value("-1")
  }
  /// ```css
  /// .z\:\$2 {
  ///   z-index: -2;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_string_to_skribble_value("-2")
  }
  /// ```css
  /// .z\:\$3 {
  ///   z-index: -3;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_string_to_skribble_value("-3")
  }
  /// ```css
  /// .z\:\$5 {
  ///   z-index: -5;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_string_to_skribble_value("-5")
  }
}
impl GeneratedValueSetZ for GeneratedAtomZ {}
pub struct GeneratedAtomDir(String);
impl GeneratedSkribbleValue for GeneratedAtomDir {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetDir: GeneratedSkribbleValue {
  /// ```css
  /// .dir\:\$ltr {
  ///   direction: ltr;
  /// }
  /// ```
  #[inline]
  fn ltr(&self) -> String {
    self.append_string_to_skribble_value("ltr")
  }
  /// ```css
  /// .dir\:\$rtl {
  ///   direction: rtl;
  /// }
  /// ```
  #[inline]
  fn rtl(&self) -> String {
    self.append_string_to_skribble_value("rtl")
  }
}
impl GeneratedValueSetDir for GeneratedAtomDir {}
pub struct GeneratedAtomBg(String);
impl GeneratedSkribbleValue for GeneratedAtomBg {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl GeneratedColorSet for GeneratedAtomBg {}
pub struct GeneratedAtomBgOpacity(String);
impl GeneratedSkribbleValue for GeneratedAtomBgOpacity {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBgOpacity: GeneratedSkribbleValue {
  /// ```css
  /// .bg-opacity\:\$0 {
  ///   --sk-invalid-css-variable: 0%;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .bg-opacity\:\$5 {
  ///   --sk-invalid-css-variable: 5%;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .bg-opacity\:\$10 {
  ///   --sk-invalid-css-variable: 10%;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .bg-opacity\:\$20 {
  ///   --sk-invalid-css-variable: 20%;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .bg-opacity\:\$30 {
  ///   --sk-invalid-css-variable: 30%;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_string_to_skribble_value("30")
  }
  /// ```css
  /// .bg-opacity\:\$40 {
  ///   --sk-invalid-css-variable: 40%;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .bg-opacity\:\$50 {
  ///   --sk-invalid-css-variable: 50%;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  /// ```css
  /// .bg-opacity\:\$60 {
  ///   --sk-invalid-css-variable: 60%;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .bg-opacity\:\$70 {
  ///   --sk-invalid-css-variable: 70%;
  /// }
  /// ```
  #[inline]
  fn n70(&self) -> String {
    self.append_string_to_skribble_value("70")
  }
  /// ```css
  /// .bg-opacity\:\$75 {
  ///   --sk-invalid-css-variable: 75%;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .bg-opacity\:\$80 {
  ///   --sk-invalid-css-variable: 80%;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .bg-opacity\:\$90 {
  ///   --sk-invalid-css-variable: 90%;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// ```css
  /// .bg-opacity\:\$95 {
  ///   --sk-invalid-css-variable: 95%;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_string_to_skribble_value("95")
  }
  /// ```css
  /// .bg-opacity\:\$100 {
  ///   --sk-invalid-css-variable: 100%;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
}
impl GeneratedValueSetBgOpacity for GeneratedAtomBgOpacity {}
pub struct GeneratedAtomOpacity(String);
impl GeneratedSkribbleValue for GeneratedAtomOpacity {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetOpacity: GeneratedSkribbleValue {
  /// ```css
  /// .opacity\:\$0 {
  ///   opacity: 0%;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// ```css
  /// .opacity\:\$5 {
  ///   opacity: 5%;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// ```css
  /// .opacity\:\$10 {
  ///   opacity: 10%;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// ```css
  /// .opacity\:\$20 {
  ///   opacity: 20%;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// ```css
  /// .opacity\:\$30 {
  ///   opacity: 30%;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_string_to_skribble_value("30")
  }
  /// ```css
  /// .opacity\:\$40 {
  ///   opacity: 40%;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// ```css
  /// .opacity\:\$50 {
  ///   opacity: 50%;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  /// ```css
  /// .opacity\:\$60 {
  ///   opacity: 60%;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// ```css
  /// .opacity\:\$70 {
  ///   opacity: 70%;
  /// }
  /// ```
  #[inline]
  fn n70(&self) -> String {
    self.append_string_to_skribble_value("70")
  }
  /// ```css
  /// .opacity\:\$75 {
  ///   opacity: 75%;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// ```css
  /// .opacity\:\$80 {
  ///   opacity: 80%;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// ```css
  /// .opacity\:\$90 {
  ///   opacity: 90%;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// ```css
  /// .opacity\:\$95 {
  ///   opacity: 95%;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_string_to_skribble_value("95")
  }
  /// ```css
  /// .opacity\:\$100 {
  ///   opacity: 100%;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
}
impl GeneratedValueSetOpacity for GeneratedAtomOpacity {}
pub trait GeneratedAtom: GeneratedSkribbleValue {
  /// Screen reader only
  #[inline]
  fn sr(&self) -> GeneratedAtomSr {
    GeneratedAtomSr::from_ref(self.append_to_skribble_value("sr"))
  }
  /// A class to apply transition effects.
  #[inline]
  fn transition(&self) -> GeneratedAtomTransition {
    GeneratedAtomTransition::from_ref(self.append_to_skribble_value("transition"))
  }
  #[inline]
  fn transition_property(&self) -> GeneratedAtomTransitionProperty {
    GeneratedAtomTransitionProperty::from_ref(self.append_to_skribble_value("transitionProperty"))
  }
  #[inline]
  fn duration(&self) -> GeneratedAtomDuration {
    GeneratedAtomDuration::from_ref(self.append_to_skribble_value("duration"))
  }
  #[inline]
  fn ease(&self) -> GeneratedAtomEase {
    GeneratedAtomEase::from_ref(self.append_to_skribble_value("ease"))
  }
  #[inline]
  fn delay(&self) -> GeneratedAtomDelay {
    GeneratedAtomDelay::from_ref(self.append_to_skribble_value("delay"))
  }
  #[inline]
  fn animate(&self) -> GeneratedAtomAnimate {
    GeneratedAtomAnimate::from_ref(self.append_to_skribble_value("animate"))
  }
  /// Fade in an element. Requires the `animate:$in` class to be applied to the
  /// element.
  #[inline]
  fn fade_in(&self) -> GeneratedAtomFadeIn {
    GeneratedAtomFadeIn::from_ref(self.append_to_skribble_value("fadeIn"))
  }
  /// Fade out an element. Requires the `animate:$out` class to be applied to
  /// the element.
  #[inline]
  fn fade_out(&self) -> GeneratedAtomFadeOut {
    GeneratedAtomFadeOut::from_ref(self.append_to_skribble_value("fadeOut"))
  }
  /// Rotate an element to enter. Requires the `animate:$in` class to be applied
  /// to the element.
  #[inline]
  fn spin_in(&self) -> GeneratedAtomSpinIn {
    GeneratedAtomSpinIn::from_ref(self.append_to_skribble_value("spinIn"))
  }
  /// Rotate an element to exit. Requires the `animate:$out` class to be applied
  /// to the element.
  #[inline]
  fn spin_out(&self) -> GeneratedAtomSpinOut {
    GeneratedAtomSpinOut::from_ref(self.append_to_skribble_value("spinOut"))
  }
  /// Entry animation from the left. Requires the `animate:$in` class to be
  /// applied to the element.
  #[inline]
  fn slide_in_left(&self) -> GeneratedAtomSlideInLeft {
    GeneratedAtomSlideInLeft::from_ref(self.append_to_skribble_value("slideInLeft"))
  }
  /// Entry animation from the right. Requires the `animate:$in` class to be
  /// applied to the element.
  #[inline]
  fn slide_in_right(&self) -> GeneratedAtomSlideInRight {
    GeneratedAtomSlideInRight::from_ref(self.append_to_skribble_value("slideInRight"))
  }
  /// Exit animation to the left. Requires the `animate:$out` class to be
  /// applied to the element.
  #[inline]
  fn slide_out_left(&self) -> GeneratedAtomSlideOutLeft {
    GeneratedAtomSlideOutLeft::from_ref(self.append_to_skribble_value("slideOutLeft"))
  }
  /// Exit animation to the right. Requires the `animate:$out` class to be
  /// applied to the element.
  #[inline]
  fn slide_out_right(&self) -> GeneratedAtomSlideOutRight {
    GeneratedAtomSlideOutRight::from_ref(self.append_to_skribble_value("slideOutRight"))
  }
  /// Entry animation from the top. Requires the `animate:$in` class to be
  /// applied to the element.
  #[inline]
  fn slide_in_top(&self) -> GeneratedAtomSlideInTop {
    GeneratedAtomSlideInTop::from_ref(self.append_to_skribble_value("slideInTop"))
  }
  /// Entry animation from the bottom. Requires the `animate:$in` class to be
  /// applied to the element.
  #[inline]
  fn slide_in_bottom(&self) -> GeneratedAtomSlideInBottom {
    GeneratedAtomSlideInBottom::from_ref(self.append_to_skribble_value("slideInBottom"))
  }
  /// Exit animation to the top. Requires the `animate:$out` class to be applied
  /// to the element.
  #[inline]
  fn slide_out_top(&self) -> GeneratedAtomSlideOutTop {
    GeneratedAtomSlideOutTop::from_ref(self.append_to_skribble_value("slideOutTop"))
  }
  /// Exit animation to the bottom. Requires the `animate:$out` class to be
  /// applied to the element.
  #[inline]
  fn slide_out_bottom(&self) -> GeneratedAtomSlideOutBottom {
    GeneratedAtomSlideOutBottom::from_ref(self.append_to_skribble_value("slideOutBottom"))
  }
  /// Entry animation from this zoom level. Requires the `animate:$in` class to
  /// be applied to the element.
  #[inline]
  fn zoom_in(&self) -> GeneratedAtomZoomIn {
    GeneratedAtomZoomIn::from_ref(self.append_to_skribble_value("zoomIn"))
  }
  /// Exit animation from this zoom level. Requires the `animate:$out` class to
  /// be applied to the element.
  #[inline]
  fn zoom_out(&self) -> GeneratedAtomZoomOut {
    GeneratedAtomZoomOut::from_ref(self.append_to_skribble_value("zoomOut"))
  }
  #[inline]
  fn animate_duration(&self) -> GeneratedAtomAnimateDuration {
    GeneratedAtomAnimateDuration::from_ref(self.append_to_skribble_value("animateDuration"))
  }
  #[inline]
  fn animate_easing(&self) -> GeneratedAtomAnimateEasing {
    GeneratedAtomAnimateEasing::from_ref(self.append_to_skribble_value("animateEasing"))
  }
  #[inline]
  fn animate_delay(&self) -> GeneratedAtomAnimateDelay {
    GeneratedAtomAnimateDelay::from_ref(self.append_to_skribble_value("animateDelay"))
  }
  #[inline]
  fn animate_repeat(&self) -> GeneratedAtomAnimateRepeat {
    GeneratedAtomAnimateRepeat::from_ref(self.append_to_skribble_value("animateRepeat"))
  }
  #[inline]
  fn animate_direction(&self) -> GeneratedAtomAnimateDirection {
    GeneratedAtomAnimateDirection::from_ref(self.append_to_skribble_value("animateDirection"))
  }
  #[inline]
  fn animate_fill_mode(&self) -> GeneratedAtomAnimateFillMode {
    GeneratedAtomAnimateFillMode::from_ref(self.append_to_skribble_value("animateFillMode"))
  }
  #[inline]
  fn animate_state(&self) -> GeneratedAtomAnimateState {
    GeneratedAtomAnimateState::from_ref(self.append_to_skribble_value("animateState"))
  }
  #[inline]
  fn zoom(&self) -> GeneratedAtomZoom {
    GeneratedAtomZoom::from_ref(self.append_to_skribble_value("zoom"))
  }
  #[inline]
  fn font(&self) -> GeneratedAtomFont {
    GeneratedAtomFont::from_ref(self.append_to_skribble_value("font"))
  }
  #[inline]
  fn p(&self) -> GeneratedAtomP {
    GeneratedAtomP::from_ref(self.append_to_skribble_value("p"))
  }
  #[inline]
  fn py(&self) -> GeneratedAtomPy {
    GeneratedAtomPy::from_ref(self.append_to_skribble_value("py"))
  }
  #[inline]
  fn px(&self) -> GeneratedAtomPx {
    GeneratedAtomPx::from_ref(self.append_to_skribble_value("px"))
  }
  #[inline]
  fn pt(&self) -> GeneratedAtomPt {
    GeneratedAtomPt::from_ref(self.append_to_skribble_value("pt"))
  }
  #[inline]
  fn pr(&self) -> GeneratedAtomPr {
    GeneratedAtomPr::from_ref(self.append_to_skribble_value("pr"))
  }
  #[inline]
  fn pb(&self) -> GeneratedAtomPb {
    GeneratedAtomPb::from_ref(self.append_to_skribble_value("pb"))
  }
  #[inline]
  fn pl(&self) -> GeneratedAtomPl {
    GeneratedAtomPl::from_ref(self.append_to_skribble_value("pl"))
  }
  #[inline]
  fn pbl(&self) -> GeneratedAtomPbl {
    GeneratedAtomPbl::from_ref(self.append_to_skribble_value("pbl"))
  }
  #[inline]
  fn pbls(&self) -> GeneratedAtomPbls {
    GeneratedAtomPbls::from_ref(self.append_to_skribble_value("pbls"))
  }
  #[inline]
  fn pble(&self) -> GeneratedAtomPble {
    GeneratedAtomPble::from_ref(self.append_to_skribble_value("pble"))
  }
  #[inline]
  fn pin(&self) -> GeneratedAtomPin {
    GeneratedAtomPin::from_ref(self.append_to_skribble_value("pin"))
  }
  #[inline]
  fn pins(&self) -> GeneratedAtomPins {
    GeneratedAtomPins::from_ref(self.append_to_skribble_value("pins"))
  }
  #[inline]
  fn pine(&self) -> GeneratedAtomPine {
    GeneratedAtomPine::from_ref(self.append_to_skribble_value("pine"))
  }
  #[inline]
  fn m(&self) -> GeneratedAtomM {
    GeneratedAtomM::from_ref(self.append_to_skribble_value("m"))
  }
  #[inline]
  fn my(&self) -> GeneratedAtomMy {
    GeneratedAtomMy::from_ref(self.append_to_skribble_value("my"))
  }
  #[inline]
  fn mx(&self) -> GeneratedAtomMx {
    GeneratedAtomMx::from_ref(self.append_to_skribble_value("mx"))
  }
  #[inline]
  fn mt(&self) -> GeneratedAtomMt {
    GeneratedAtomMt::from_ref(self.append_to_skribble_value("mt"))
  }
  #[inline]
  fn mr(&self) -> GeneratedAtomMr {
    GeneratedAtomMr::from_ref(self.append_to_skribble_value("mr"))
  }
  #[inline]
  fn mb(&self) -> GeneratedAtomMb {
    GeneratedAtomMb::from_ref(self.append_to_skribble_value("mb"))
  }
  #[inline]
  fn ml(&self) -> GeneratedAtomMl {
    GeneratedAtomMl::from_ref(self.append_to_skribble_value("ml"))
  }
  #[inline]
  fn z(&self) -> GeneratedAtomZ {
    GeneratedAtomZ::from_ref(self.append_to_skribble_value("z"))
  }
  #[inline]
  fn dir(&self) -> GeneratedAtomDir {
    GeneratedAtomDir::from_ref(self.append_to_skribble_value("dir"))
  }
  #[inline]
  fn bg(&self) -> GeneratedAtomBg {
    GeneratedAtomBg::from_ref(self.append_to_skribble_value("bg"))
  }
  #[inline]
  fn bg_opacity(&self) -> GeneratedAtomBgOpacity {
    GeneratedAtomBgOpacity::from_ref(self.append_to_skribble_value("bgOpacity"))
  }
  #[inline]
  fn opacity(&self) -> GeneratedAtomOpacity {
    GeneratedAtomOpacity::from_ref(self.append_to_skribble_value("opacity"))
  }
}
pub trait GeneratedNamedClasses: GeneratedSkribbleValue {
  #[inline]
  fn group(&self) -> String {
    self.append_string_to_skribble_value("group")
  }
  #[inline]
  fn contained(&self) -> String {
    self.append_string_to_skribble_value("contained")
  }
  #[inline]
  fn italic(&self) -> String {
    self.append_string_to_skribble_value("italic")
  }
  #[inline]
  fn non_italic(&self) -> String {
    self.append_string_to_skribble_value("nonItalic")
  }
  #[inline]
  fn oblique(&self) -> String {
    self.append_string_to_skribble_value("oblique")
  }
  #[inline]
  fn antialiased(&self) -> String {
    self.append_string_to_skribble_value("antialiased")
  }
  #[inline]
  fn subpixel_antialiased(&self) -> String {
    self.append_string_to_skribble_value("subpixelAntialiased")
  }
  #[inline]
  fn block(&self) -> String {
    self.append_string_to_skribble_value("block")
  }
  #[inline]
  fn inline_block(&self) -> String {
    self.append_string_to_skribble_value("inlineBlock")
  }
  #[inline]
  fn inline(&self) -> String {
    self.append_string_to_skribble_value("inline")
  }
  #[inline]
  fn flow_root(&self) -> String {
    self.append_string_to_skribble_value("flowRoot")
  }
  #[inline]
  fn content(&self) -> String {
    self.append_string_to_skribble_value("content")
  }
  #[inline]
  fn hidden(&self) -> String {
    self.append_string_to_skribble_value("hidden")
  }
  #[inline]
  fn invisible(&self) -> String {
    self.append_string_to_skribble_value("invisible")
  }
  #[inline]
  fn visible(&self) -> String {
    self.append_string_to_skribble_value("visible")
  }
  #[inline]
  fn remove_filter(&self) -> String {
    self.append_string_to_skribble_value("removeFilter")
  }
  #[inline]
  fn remove_backdrop(&self) -> String {
    self.append_string_to_skribble_value("removeBackdrop")
  }
  #[inline]
  fn transform_gpu(&self) -> String {
    self.append_string_to_skribble_value("transformGpu")
  }
  #[inline]
  fn transform_cpu(&self) -> String {
    self.append_string_to_skribble_value("transformCpu")
  }
}
impl MediaQueryDeviceCategories for GeneratedSkribbleRoot {}
impl MediaQueryBreakpoints for GeneratedSkribbleRoot {}
impl MediaQueryOrientation for GeneratedSkribbleRoot {}
impl MediaQueryMotion for GeneratedSkribbleRoot {}
impl MediaQueryDarkMode for GeneratedSkribbleRoot {}
impl ModifierParentGroup for GeneratedSkribbleRoot {}
impl ModifierHoverGroup for GeneratedSkribbleRoot {}
impl ModifierActiveGroup for GeneratedSkribbleRoot {}
impl ModifierFocusGroup for GeneratedSkribbleRoot {}
impl ModifierFocusWithinGroup for GeneratedSkribbleRoot {}
impl ModifierFocusVisibleGroup for GeneratedSkribbleRoot {}
impl ModifierEnabledGroup for GeneratedSkribbleRoot {}
impl ModifierEmptyGroup for GeneratedSkribbleRoot {}
impl ModifierReadGroup for GeneratedSkribbleRoot {}
impl ModifierExpandedGroup for GeneratedSkribbleRoot {}
impl ModifierCheckedGroup for GeneratedSkribbleRoot {}
impl ModifierGrabbedGroup for GeneratedSkribbleRoot {}
impl ModifierPressedGroup for GeneratedSkribbleRoot {}
impl ModifierInvalidGrammarGroup for GeneratedSkribbleRoot {}
impl ModifierInvalidSpellingGroup for GeneratedSkribbleRoot {}
impl ModifierValidGroup for GeneratedSkribbleRoot {}
impl ModifierLoadingGroup for GeneratedSkribbleRoot {}
impl ModifierSelectedGroup for GeneratedSkribbleRoot {}
impl ModifierHiddenGroup for GeneratedSkribbleRoot {}
impl ModifierAutofillGroup for GeneratedSkribbleRoot {}
impl ModifierEvenGroup for GeneratedSkribbleRoot {}
impl ModifierNodePositionGroup for GeneratedSkribbleRoot {}
impl ModifierNodeOfTypeGroup for GeneratedSkribbleRoot {}
impl ModifierVisitedGroup for GeneratedSkribbleRoot {}
impl ModifierOptionalGroup for GeneratedSkribbleRoot {}
impl ModifierFullScreenGroup for GeneratedSkribbleRoot {}
impl ModifierTargetGroup for GeneratedSkribbleRoot {}
impl ModifierPlaceholderShownGroup for GeneratedSkribbleRoot {}
impl ModifierRequiredGroup for GeneratedSkribbleRoot {}
impl ModifierDefaultGroup for GeneratedSkribbleRoot {}
impl ModifierOnlyChildGroup for GeneratedSkribbleRoot {}
impl ModifierOnlyGroup for GeneratedSkribbleRoot {}
impl ModifierRootGroup for GeneratedSkribbleRoot {}
impl ModifierLinkGroup for GeneratedSkribbleRoot {}
impl ModifierPseudoGroup for GeneratedSkribbleRoot {}
impl GeneratedAtom for GeneratedSkribbleRoot {}
impl GeneratedNamedClasses for GeneratedSkribbleRoot {}
impl MediaQueryBreakpoints for MediaQueryDeviceCategoriesChild {}
impl MediaQueryOrientation for MediaQueryDeviceCategoriesChild {}
impl MediaQueryMotion for MediaQueryDeviceCategoriesChild {}
impl MediaQueryDarkMode for MediaQueryDeviceCategoriesChild {}
impl ModifierParentGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierHoverGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierActiveGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierFocusGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierFocusWithinGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierFocusVisibleGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierEnabledGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierEmptyGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierReadGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierExpandedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierCheckedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierGrabbedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierPressedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierInvalidGrammarGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierInvalidSpellingGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierValidGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierLoadingGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierSelectedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierHiddenGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierAutofillGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierEvenGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierNodePositionGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierNodeOfTypeGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierVisitedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierOptionalGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierFullScreenGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierTargetGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierPlaceholderShownGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierRequiredGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierDefaultGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierOnlyChildGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierOnlyGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierRootGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierLinkGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierPseudoGroup for MediaQueryDeviceCategoriesChild {}
impl GeneratedAtom for MediaQueryDeviceCategoriesChild {}
impl GeneratedNamedClasses for MediaQueryDeviceCategoriesChild {}
impl MediaQueryOrientation for MediaQueryBreakpointsChild {}
impl MediaQueryMotion for MediaQueryBreakpointsChild {}
impl MediaQueryDarkMode for MediaQueryBreakpointsChild {}
impl ModifierParentGroup for MediaQueryBreakpointsChild {}
impl ModifierHoverGroup for MediaQueryBreakpointsChild {}
impl ModifierActiveGroup for MediaQueryBreakpointsChild {}
impl ModifierFocusGroup for MediaQueryBreakpointsChild {}
impl ModifierFocusWithinGroup for MediaQueryBreakpointsChild {}
impl ModifierFocusVisibleGroup for MediaQueryBreakpointsChild {}
impl ModifierEnabledGroup for MediaQueryBreakpointsChild {}
impl ModifierEmptyGroup for MediaQueryBreakpointsChild {}
impl ModifierReadGroup for MediaQueryBreakpointsChild {}
impl ModifierExpandedGroup for MediaQueryBreakpointsChild {}
impl ModifierCheckedGroup for MediaQueryBreakpointsChild {}
impl ModifierGrabbedGroup for MediaQueryBreakpointsChild {}
impl ModifierPressedGroup for MediaQueryBreakpointsChild {}
impl ModifierInvalidGrammarGroup for MediaQueryBreakpointsChild {}
impl ModifierInvalidSpellingGroup for MediaQueryBreakpointsChild {}
impl ModifierValidGroup for MediaQueryBreakpointsChild {}
impl ModifierLoadingGroup for MediaQueryBreakpointsChild {}
impl ModifierSelectedGroup for MediaQueryBreakpointsChild {}
impl ModifierHiddenGroup for MediaQueryBreakpointsChild {}
impl ModifierAutofillGroup for MediaQueryBreakpointsChild {}
impl ModifierEvenGroup for MediaQueryBreakpointsChild {}
impl ModifierNodePositionGroup for MediaQueryBreakpointsChild {}
impl ModifierNodeOfTypeGroup for MediaQueryBreakpointsChild {}
impl ModifierVisitedGroup for MediaQueryBreakpointsChild {}
impl ModifierOptionalGroup for MediaQueryBreakpointsChild {}
impl ModifierFullScreenGroup for MediaQueryBreakpointsChild {}
impl ModifierTargetGroup for MediaQueryBreakpointsChild {}
impl ModifierPlaceholderShownGroup for MediaQueryBreakpointsChild {}
impl ModifierRequiredGroup for MediaQueryBreakpointsChild {}
impl ModifierDefaultGroup for MediaQueryBreakpointsChild {}
impl ModifierOnlyChildGroup for MediaQueryBreakpointsChild {}
impl ModifierOnlyGroup for MediaQueryBreakpointsChild {}
impl ModifierRootGroup for MediaQueryBreakpointsChild {}
impl ModifierLinkGroup for MediaQueryBreakpointsChild {}
impl ModifierPseudoGroup for MediaQueryBreakpointsChild {}
impl GeneratedAtom for MediaQueryBreakpointsChild {}
impl GeneratedNamedClasses for MediaQueryBreakpointsChild {}
impl MediaQueryMotion for MediaQueryOrientationChild {}
impl MediaQueryDarkMode for MediaQueryOrientationChild {}
impl ModifierParentGroup for MediaQueryOrientationChild {}
impl ModifierHoverGroup for MediaQueryOrientationChild {}
impl ModifierActiveGroup for MediaQueryOrientationChild {}
impl ModifierFocusGroup for MediaQueryOrientationChild {}
impl ModifierFocusWithinGroup for MediaQueryOrientationChild {}
impl ModifierFocusVisibleGroup for MediaQueryOrientationChild {}
impl ModifierEnabledGroup for MediaQueryOrientationChild {}
impl ModifierEmptyGroup for MediaQueryOrientationChild {}
impl ModifierReadGroup for MediaQueryOrientationChild {}
impl ModifierExpandedGroup for MediaQueryOrientationChild {}
impl ModifierCheckedGroup for MediaQueryOrientationChild {}
impl ModifierGrabbedGroup for MediaQueryOrientationChild {}
impl ModifierPressedGroup for MediaQueryOrientationChild {}
impl ModifierInvalidGrammarGroup for MediaQueryOrientationChild {}
impl ModifierInvalidSpellingGroup for MediaQueryOrientationChild {}
impl ModifierValidGroup for MediaQueryOrientationChild {}
impl ModifierLoadingGroup for MediaQueryOrientationChild {}
impl ModifierSelectedGroup for MediaQueryOrientationChild {}
impl ModifierHiddenGroup for MediaQueryOrientationChild {}
impl ModifierAutofillGroup for MediaQueryOrientationChild {}
impl ModifierEvenGroup for MediaQueryOrientationChild {}
impl ModifierNodePositionGroup for MediaQueryOrientationChild {}
impl ModifierNodeOfTypeGroup for MediaQueryOrientationChild {}
impl ModifierVisitedGroup for MediaQueryOrientationChild {}
impl ModifierOptionalGroup for MediaQueryOrientationChild {}
impl ModifierFullScreenGroup for MediaQueryOrientationChild {}
impl ModifierTargetGroup for MediaQueryOrientationChild {}
impl ModifierPlaceholderShownGroup for MediaQueryOrientationChild {}
impl ModifierRequiredGroup for MediaQueryOrientationChild {}
impl ModifierDefaultGroup for MediaQueryOrientationChild {}
impl ModifierOnlyChildGroup for MediaQueryOrientationChild {}
impl ModifierOnlyGroup for MediaQueryOrientationChild {}
impl ModifierRootGroup for MediaQueryOrientationChild {}
impl ModifierLinkGroup for MediaQueryOrientationChild {}
impl ModifierPseudoGroup for MediaQueryOrientationChild {}
impl GeneratedAtom for MediaQueryOrientationChild {}
impl GeneratedNamedClasses for MediaQueryOrientationChild {}
impl MediaQueryDarkMode for MediaQueryMotionChild {}
impl ModifierParentGroup for MediaQueryMotionChild {}
impl ModifierHoverGroup for MediaQueryMotionChild {}
impl ModifierActiveGroup for MediaQueryMotionChild {}
impl ModifierFocusGroup for MediaQueryMotionChild {}
impl ModifierFocusWithinGroup for MediaQueryMotionChild {}
impl ModifierFocusVisibleGroup for MediaQueryMotionChild {}
impl ModifierEnabledGroup for MediaQueryMotionChild {}
impl ModifierEmptyGroup for MediaQueryMotionChild {}
impl ModifierReadGroup for MediaQueryMotionChild {}
impl ModifierExpandedGroup for MediaQueryMotionChild {}
impl ModifierCheckedGroup for MediaQueryMotionChild {}
impl ModifierGrabbedGroup for MediaQueryMotionChild {}
impl ModifierPressedGroup for MediaQueryMotionChild {}
impl ModifierInvalidGrammarGroup for MediaQueryMotionChild {}
impl ModifierInvalidSpellingGroup for MediaQueryMotionChild {}
impl ModifierValidGroup for MediaQueryMotionChild {}
impl ModifierLoadingGroup for MediaQueryMotionChild {}
impl ModifierSelectedGroup for MediaQueryMotionChild {}
impl ModifierHiddenGroup for MediaQueryMotionChild {}
impl ModifierAutofillGroup for MediaQueryMotionChild {}
impl ModifierEvenGroup for MediaQueryMotionChild {}
impl ModifierNodePositionGroup for MediaQueryMotionChild {}
impl ModifierNodeOfTypeGroup for MediaQueryMotionChild {}
impl ModifierVisitedGroup for MediaQueryMotionChild {}
impl ModifierOptionalGroup for MediaQueryMotionChild {}
impl ModifierFullScreenGroup for MediaQueryMotionChild {}
impl ModifierTargetGroup for MediaQueryMotionChild {}
impl ModifierPlaceholderShownGroup for MediaQueryMotionChild {}
impl ModifierRequiredGroup for MediaQueryMotionChild {}
impl ModifierDefaultGroup for MediaQueryMotionChild {}
impl ModifierOnlyChildGroup for MediaQueryMotionChild {}
impl ModifierOnlyGroup for MediaQueryMotionChild {}
impl ModifierRootGroup for MediaQueryMotionChild {}
impl ModifierLinkGroup for MediaQueryMotionChild {}
impl ModifierPseudoGroup for MediaQueryMotionChild {}
impl GeneratedAtom for MediaQueryMotionChild {}
impl GeneratedNamedClasses for MediaQueryMotionChild {}
impl ModifierParentGroup for MediaQueryDarkModeChild {}
impl ModifierHoverGroup for MediaQueryDarkModeChild {}
impl ModifierActiveGroup for MediaQueryDarkModeChild {}
impl ModifierFocusGroup for MediaQueryDarkModeChild {}
impl ModifierFocusWithinGroup for MediaQueryDarkModeChild {}
impl ModifierFocusVisibleGroup for MediaQueryDarkModeChild {}
impl ModifierEnabledGroup for MediaQueryDarkModeChild {}
impl ModifierEmptyGroup for MediaQueryDarkModeChild {}
impl ModifierReadGroup for MediaQueryDarkModeChild {}
impl ModifierExpandedGroup for MediaQueryDarkModeChild {}
impl ModifierCheckedGroup for MediaQueryDarkModeChild {}
impl ModifierGrabbedGroup for MediaQueryDarkModeChild {}
impl ModifierPressedGroup for MediaQueryDarkModeChild {}
impl ModifierInvalidGrammarGroup for MediaQueryDarkModeChild {}
impl ModifierInvalidSpellingGroup for MediaQueryDarkModeChild {}
impl ModifierValidGroup for MediaQueryDarkModeChild {}
impl ModifierLoadingGroup for MediaQueryDarkModeChild {}
impl ModifierSelectedGroup for MediaQueryDarkModeChild {}
impl ModifierHiddenGroup for MediaQueryDarkModeChild {}
impl ModifierAutofillGroup for MediaQueryDarkModeChild {}
impl ModifierEvenGroup for MediaQueryDarkModeChild {}
impl ModifierNodePositionGroup for MediaQueryDarkModeChild {}
impl ModifierNodeOfTypeGroup for MediaQueryDarkModeChild {}
impl ModifierVisitedGroup for MediaQueryDarkModeChild {}
impl ModifierOptionalGroup for MediaQueryDarkModeChild {}
impl ModifierFullScreenGroup for MediaQueryDarkModeChild {}
impl ModifierTargetGroup for MediaQueryDarkModeChild {}
impl ModifierPlaceholderShownGroup for MediaQueryDarkModeChild {}
impl ModifierRequiredGroup for MediaQueryDarkModeChild {}
impl ModifierDefaultGroup for MediaQueryDarkModeChild {}
impl ModifierOnlyChildGroup for MediaQueryDarkModeChild {}
impl ModifierOnlyGroup for MediaQueryDarkModeChild {}
impl ModifierRootGroup for MediaQueryDarkModeChild {}
impl ModifierLinkGroup for MediaQueryDarkModeChild {}
impl ModifierPseudoGroup for MediaQueryDarkModeChild {}
impl GeneratedAtom for MediaQueryDarkModeChild {}
impl GeneratedNamedClasses for MediaQueryDarkModeChild {}
impl ModifierHoverGroup for ModifierParentGroupChild {}
impl ModifierActiveGroup for ModifierParentGroupChild {}
impl ModifierFocusGroup for ModifierParentGroupChild {}
impl ModifierFocusWithinGroup for ModifierParentGroupChild {}
impl ModifierFocusVisibleGroup for ModifierParentGroupChild {}
impl ModifierEnabledGroup for ModifierParentGroupChild {}
impl ModifierEmptyGroup for ModifierParentGroupChild {}
impl ModifierReadGroup for ModifierParentGroupChild {}
impl ModifierExpandedGroup for ModifierParentGroupChild {}
impl ModifierCheckedGroup for ModifierParentGroupChild {}
impl ModifierGrabbedGroup for ModifierParentGroupChild {}
impl ModifierPressedGroup for ModifierParentGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierParentGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierParentGroupChild {}
impl ModifierValidGroup for ModifierParentGroupChild {}
impl ModifierLoadingGroup for ModifierParentGroupChild {}
impl ModifierSelectedGroup for ModifierParentGroupChild {}
impl ModifierHiddenGroup for ModifierParentGroupChild {}
impl ModifierAutofillGroup for ModifierParentGroupChild {}
impl ModifierEvenGroup for ModifierParentGroupChild {}
impl ModifierNodePositionGroup for ModifierParentGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierParentGroupChild {}
impl ModifierVisitedGroup for ModifierParentGroupChild {}
impl ModifierOptionalGroup for ModifierParentGroupChild {}
impl ModifierFullScreenGroup for ModifierParentGroupChild {}
impl ModifierTargetGroup for ModifierParentGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierParentGroupChild {}
impl ModifierRequiredGroup for ModifierParentGroupChild {}
impl ModifierDefaultGroup for ModifierParentGroupChild {}
impl ModifierOnlyChildGroup for ModifierParentGroupChild {}
impl ModifierOnlyGroup for ModifierParentGroupChild {}
impl ModifierRootGroup for ModifierParentGroupChild {}
impl ModifierLinkGroup for ModifierParentGroupChild {}
impl ModifierPseudoGroup for ModifierParentGroupChild {}
impl GeneratedAtom for ModifierParentGroupChild {}
impl GeneratedNamedClasses for ModifierParentGroupChild {}
impl ModifierActiveGroup for ModifierHoverGroupChild {}
impl ModifierFocusGroup for ModifierHoverGroupChild {}
impl ModifierFocusWithinGroup for ModifierHoverGroupChild {}
impl ModifierFocusVisibleGroup for ModifierHoverGroupChild {}
impl ModifierEnabledGroup for ModifierHoverGroupChild {}
impl ModifierEmptyGroup for ModifierHoverGroupChild {}
impl ModifierReadGroup for ModifierHoverGroupChild {}
impl ModifierExpandedGroup for ModifierHoverGroupChild {}
impl ModifierCheckedGroup for ModifierHoverGroupChild {}
impl ModifierGrabbedGroup for ModifierHoverGroupChild {}
impl ModifierPressedGroup for ModifierHoverGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierHoverGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierHoverGroupChild {}
impl ModifierValidGroup for ModifierHoverGroupChild {}
impl ModifierLoadingGroup for ModifierHoverGroupChild {}
impl ModifierSelectedGroup for ModifierHoverGroupChild {}
impl ModifierHiddenGroup for ModifierHoverGroupChild {}
impl ModifierAutofillGroup for ModifierHoverGroupChild {}
impl ModifierEvenGroup for ModifierHoverGroupChild {}
impl ModifierNodePositionGroup for ModifierHoverGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierHoverGroupChild {}
impl ModifierVisitedGroup for ModifierHoverGroupChild {}
impl ModifierOptionalGroup for ModifierHoverGroupChild {}
impl ModifierFullScreenGroup for ModifierHoverGroupChild {}
impl ModifierTargetGroup for ModifierHoverGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierHoverGroupChild {}
impl ModifierRequiredGroup for ModifierHoverGroupChild {}
impl ModifierDefaultGroup for ModifierHoverGroupChild {}
impl ModifierOnlyChildGroup for ModifierHoverGroupChild {}
impl ModifierOnlyGroup for ModifierHoverGroupChild {}
impl ModifierRootGroup for ModifierHoverGroupChild {}
impl ModifierLinkGroup for ModifierHoverGroupChild {}
impl ModifierPseudoGroup for ModifierHoverGroupChild {}
impl GeneratedAtom for ModifierHoverGroupChild {}
impl GeneratedNamedClasses for ModifierHoverGroupChild {}
impl ModifierFocusGroup for ModifierActiveGroupChild {}
impl ModifierFocusWithinGroup for ModifierActiveGroupChild {}
impl ModifierFocusVisibleGroup for ModifierActiveGroupChild {}
impl ModifierEnabledGroup for ModifierActiveGroupChild {}
impl ModifierEmptyGroup for ModifierActiveGroupChild {}
impl ModifierReadGroup for ModifierActiveGroupChild {}
impl ModifierExpandedGroup for ModifierActiveGroupChild {}
impl ModifierCheckedGroup for ModifierActiveGroupChild {}
impl ModifierGrabbedGroup for ModifierActiveGroupChild {}
impl ModifierPressedGroup for ModifierActiveGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierActiveGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierActiveGroupChild {}
impl ModifierValidGroup for ModifierActiveGroupChild {}
impl ModifierLoadingGroup for ModifierActiveGroupChild {}
impl ModifierSelectedGroup for ModifierActiveGroupChild {}
impl ModifierHiddenGroup for ModifierActiveGroupChild {}
impl ModifierAutofillGroup for ModifierActiveGroupChild {}
impl ModifierEvenGroup for ModifierActiveGroupChild {}
impl ModifierNodePositionGroup for ModifierActiveGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierActiveGroupChild {}
impl ModifierVisitedGroup for ModifierActiveGroupChild {}
impl ModifierOptionalGroup for ModifierActiveGroupChild {}
impl ModifierFullScreenGroup for ModifierActiveGroupChild {}
impl ModifierTargetGroup for ModifierActiveGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierActiveGroupChild {}
impl ModifierRequiredGroup for ModifierActiveGroupChild {}
impl ModifierDefaultGroup for ModifierActiveGroupChild {}
impl ModifierOnlyChildGroup for ModifierActiveGroupChild {}
impl ModifierOnlyGroup for ModifierActiveGroupChild {}
impl ModifierRootGroup for ModifierActiveGroupChild {}
impl ModifierLinkGroup for ModifierActiveGroupChild {}
impl ModifierPseudoGroup for ModifierActiveGroupChild {}
impl GeneratedAtom for ModifierActiveGroupChild {}
impl GeneratedNamedClasses for ModifierActiveGroupChild {}
impl ModifierFocusWithinGroup for ModifierFocusGroupChild {}
impl ModifierFocusVisibleGroup for ModifierFocusGroupChild {}
impl ModifierEnabledGroup for ModifierFocusGroupChild {}
impl ModifierEmptyGroup for ModifierFocusGroupChild {}
impl ModifierReadGroup for ModifierFocusGroupChild {}
impl ModifierExpandedGroup for ModifierFocusGroupChild {}
impl ModifierCheckedGroup for ModifierFocusGroupChild {}
impl ModifierGrabbedGroup for ModifierFocusGroupChild {}
impl ModifierPressedGroup for ModifierFocusGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierFocusGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierFocusGroupChild {}
impl ModifierValidGroup for ModifierFocusGroupChild {}
impl ModifierLoadingGroup for ModifierFocusGroupChild {}
impl ModifierSelectedGroup for ModifierFocusGroupChild {}
impl ModifierHiddenGroup for ModifierFocusGroupChild {}
impl ModifierAutofillGroup for ModifierFocusGroupChild {}
impl ModifierEvenGroup for ModifierFocusGroupChild {}
impl ModifierNodePositionGroup for ModifierFocusGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierFocusGroupChild {}
impl ModifierVisitedGroup for ModifierFocusGroupChild {}
impl ModifierOptionalGroup for ModifierFocusGroupChild {}
impl ModifierFullScreenGroup for ModifierFocusGroupChild {}
impl ModifierTargetGroup for ModifierFocusGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierFocusGroupChild {}
impl ModifierRequiredGroup for ModifierFocusGroupChild {}
impl ModifierDefaultGroup for ModifierFocusGroupChild {}
impl ModifierOnlyChildGroup for ModifierFocusGroupChild {}
impl ModifierOnlyGroup for ModifierFocusGroupChild {}
impl ModifierRootGroup for ModifierFocusGroupChild {}
impl ModifierLinkGroup for ModifierFocusGroupChild {}
impl ModifierPseudoGroup for ModifierFocusGroupChild {}
impl GeneratedAtom for ModifierFocusGroupChild {}
impl GeneratedNamedClasses for ModifierFocusGroupChild {}
impl ModifierFocusVisibleGroup for ModifierFocusWithinGroupChild {}
impl ModifierEnabledGroup for ModifierFocusWithinGroupChild {}
impl ModifierEmptyGroup for ModifierFocusWithinGroupChild {}
impl ModifierReadGroup for ModifierFocusWithinGroupChild {}
impl ModifierExpandedGroup for ModifierFocusWithinGroupChild {}
impl ModifierCheckedGroup for ModifierFocusWithinGroupChild {}
impl ModifierGrabbedGroup for ModifierFocusWithinGroupChild {}
impl ModifierPressedGroup for ModifierFocusWithinGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierFocusWithinGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierFocusWithinGroupChild {}
impl ModifierValidGroup for ModifierFocusWithinGroupChild {}
impl ModifierLoadingGroup for ModifierFocusWithinGroupChild {}
impl ModifierSelectedGroup for ModifierFocusWithinGroupChild {}
impl ModifierHiddenGroup for ModifierFocusWithinGroupChild {}
impl ModifierAutofillGroup for ModifierFocusWithinGroupChild {}
impl ModifierEvenGroup for ModifierFocusWithinGroupChild {}
impl ModifierNodePositionGroup for ModifierFocusWithinGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierFocusWithinGroupChild {}
impl ModifierVisitedGroup for ModifierFocusWithinGroupChild {}
impl ModifierOptionalGroup for ModifierFocusWithinGroupChild {}
impl ModifierFullScreenGroup for ModifierFocusWithinGroupChild {}
impl ModifierTargetGroup for ModifierFocusWithinGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierFocusWithinGroupChild {}
impl ModifierRequiredGroup for ModifierFocusWithinGroupChild {}
impl ModifierDefaultGroup for ModifierFocusWithinGroupChild {}
impl ModifierOnlyChildGroup for ModifierFocusWithinGroupChild {}
impl ModifierOnlyGroup for ModifierFocusWithinGroupChild {}
impl ModifierRootGroup for ModifierFocusWithinGroupChild {}
impl ModifierLinkGroup for ModifierFocusWithinGroupChild {}
impl ModifierPseudoGroup for ModifierFocusWithinGroupChild {}
impl GeneratedAtom for ModifierFocusWithinGroupChild {}
impl GeneratedNamedClasses for ModifierFocusWithinGroupChild {}
impl ModifierEnabledGroup for ModifierFocusVisibleGroupChild {}
impl ModifierEmptyGroup for ModifierFocusVisibleGroupChild {}
impl ModifierReadGroup for ModifierFocusVisibleGroupChild {}
impl ModifierExpandedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierCheckedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierGrabbedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierPressedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierFocusVisibleGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierFocusVisibleGroupChild {}
impl ModifierValidGroup for ModifierFocusVisibleGroupChild {}
impl ModifierLoadingGroup for ModifierFocusVisibleGroupChild {}
impl ModifierSelectedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierHiddenGroup for ModifierFocusVisibleGroupChild {}
impl ModifierAutofillGroup for ModifierFocusVisibleGroupChild {}
impl ModifierEvenGroup for ModifierFocusVisibleGroupChild {}
impl ModifierNodePositionGroup for ModifierFocusVisibleGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierFocusVisibleGroupChild {}
impl ModifierVisitedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierOptionalGroup for ModifierFocusVisibleGroupChild {}
impl ModifierFullScreenGroup for ModifierFocusVisibleGroupChild {}
impl ModifierTargetGroup for ModifierFocusVisibleGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierFocusVisibleGroupChild {}
impl ModifierRequiredGroup for ModifierFocusVisibleGroupChild {}
impl ModifierDefaultGroup for ModifierFocusVisibleGroupChild {}
impl ModifierOnlyChildGroup for ModifierFocusVisibleGroupChild {}
impl ModifierOnlyGroup for ModifierFocusVisibleGroupChild {}
impl ModifierRootGroup for ModifierFocusVisibleGroupChild {}
impl ModifierLinkGroup for ModifierFocusVisibleGroupChild {}
impl ModifierPseudoGroup for ModifierFocusVisibleGroupChild {}
impl GeneratedAtom for ModifierFocusVisibleGroupChild {}
impl GeneratedNamedClasses for ModifierFocusVisibleGroupChild {}
impl ModifierEmptyGroup for ModifierEnabledGroupChild {}
impl ModifierReadGroup for ModifierEnabledGroupChild {}
impl ModifierExpandedGroup for ModifierEnabledGroupChild {}
impl ModifierCheckedGroup for ModifierEnabledGroupChild {}
impl ModifierGrabbedGroup for ModifierEnabledGroupChild {}
impl ModifierPressedGroup for ModifierEnabledGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierEnabledGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierEnabledGroupChild {}
impl ModifierValidGroup for ModifierEnabledGroupChild {}
impl ModifierLoadingGroup for ModifierEnabledGroupChild {}
impl ModifierSelectedGroup for ModifierEnabledGroupChild {}
impl ModifierHiddenGroup for ModifierEnabledGroupChild {}
impl ModifierAutofillGroup for ModifierEnabledGroupChild {}
impl ModifierEvenGroup for ModifierEnabledGroupChild {}
impl ModifierNodePositionGroup for ModifierEnabledGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierEnabledGroupChild {}
impl ModifierVisitedGroup for ModifierEnabledGroupChild {}
impl ModifierOptionalGroup for ModifierEnabledGroupChild {}
impl ModifierFullScreenGroup for ModifierEnabledGroupChild {}
impl ModifierTargetGroup for ModifierEnabledGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierEnabledGroupChild {}
impl ModifierRequiredGroup for ModifierEnabledGroupChild {}
impl ModifierDefaultGroup for ModifierEnabledGroupChild {}
impl ModifierOnlyChildGroup for ModifierEnabledGroupChild {}
impl ModifierOnlyGroup for ModifierEnabledGroupChild {}
impl ModifierRootGroup for ModifierEnabledGroupChild {}
impl ModifierLinkGroup for ModifierEnabledGroupChild {}
impl ModifierPseudoGroup for ModifierEnabledGroupChild {}
impl GeneratedAtom for ModifierEnabledGroupChild {}
impl GeneratedNamedClasses for ModifierEnabledGroupChild {}
impl ModifierReadGroup for ModifierEmptyGroupChild {}
impl ModifierExpandedGroup for ModifierEmptyGroupChild {}
impl ModifierCheckedGroup for ModifierEmptyGroupChild {}
impl ModifierGrabbedGroup for ModifierEmptyGroupChild {}
impl ModifierPressedGroup for ModifierEmptyGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierEmptyGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierEmptyGroupChild {}
impl ModifierValidGroup for ModifierEmptyGroupChild {}
impl ModifierLoadingGroup for ModifierEmptyGroupChild {}
impl ModifierSelectedGroup for ModifierEmptyGroupChild {}
impl ModifierHiddenGroup for ModifierEmptyGroupChild {}
impl ModifierAutofillGroup for ModifierEmptyGroupChild {}
impl ModifierEvenGroup for ModifierEmptyGroupChild {}
impl ModifierNodePositionGroup for ModifierEmptyGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierEmptyGroupChild {}
impl ModifierVisitedGroup for ModifierEmptyGroupChild {}
impl ModifierOptionalGroup for ModifierEmptyGroupChild {}
impl ModifierFullScreenGroup for ModifierEmptyGroupChild {}
impl ModifierTargetGroup for ModifierEmptyGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierEmptyGroupChild {}
impl ModifierRequiredGroup for ModifierEmptyGroupChild {}
impl ModifierDefaultGroup for ModifierEmptyGroupChild {}
impl ModifierOnlyChildGroup for ModifierEmptyGroupChild {}
impl ModifierOnlyGroup for ModifierEmptyGroupChild {}
impl ModifierRootGroup for ModifierEmptyGroupChild {}
impl ModifierLinkGroup for ModifierEmptyGroupChild {}
impl ModifierPseudoGroup for ModifierEmptyGroupChild {}
impl GeneratedAtom for ModifierEmptyGroupChild {}
impl GeneratedNamedClasses for ModifierEmptyGroupChild {}
impl ModifierExpandedGroup for ModifierReadGroupChild {}
impl ModifierCheckedGroup for ModifierReadGroupChild {}
impl ModifierGrabbedGroup for ModifierReadGroupChild {}
impl ModifierPressedGroup for ModifierReadGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierReadGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierReadGroupChild {}
impl ModifierValidGroup for ModifierReadGroupChild {}
impl ModifierLoadingGroup for ModifierReadGroupChild {}
impl ModifierSelectedGroup for ModifierReadGroupChild {}
impl ModifierHiddenGroup for ModifierReadGroupChild {}
impl ModifierAutofillGroup for ModifierReadGroupChild {}
impl ModifierEvenGroup for ModifierReadGroupChild {}
impl ModifierNodePositionGroup for ModifierReadGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierReadGroupChild {}
impl ModifierVisitedGroup for ModifierReadGroupChild {}
impl ModifierOptionalGroup for ModifierReadGroupChild {}
impl ModifierFullScreenGroup for ModifierReadGroupChild {}
impl ModifierTargetGroup for ModifierReadGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierReadGroupChild {}
impl ModifierRequiredGroup for ModifierReadGroupChild {}
impl ModifierDefaultGroup for ModifierReadGroupChild {}
impl ModifierOnlyChildGroup for ModifierReadGroupChild {}
impl ModifierOnlyGroup for ModifierReadGroupChild {}
impl ModifierRootGroup for ModifierReadGroupChild {}
impl ModifierLinkGroup for ModifierReadGroupChild {}
impl ModifierPseudoGroup for ModifierReadGroupChild {}
impl GeneratedAtom for ModifierReadGroupChild {}
impl GeneratedNamedClasses for ModifierReadGroupChild {}
impl ModifierCheckedGroup for ModifierExpandedGroupChild {}
impl ModifierGrabbedGroup for ModifierExpandedGroupChild {}
impl ModifierPressedGroup for ModifierExpandedGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierExpandedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierExpandedGroupChild {}
impl ModifierValidGroup for ModifierExpandedGroupChild {}
impl ModifierLoadingGroup for ModifierExpandedGroupChild {}
impl ModifierSelectedGroup for ModifierExpandedGroupChild {}
impl ModifierHiddenGroup for ModifierExpandedGroupChild {}
impl ModifierAutofillGroup for ModifierExpandedGroupChild {}
impl ModifierEvenGroup for ModifierExpandedGroupChild {}
impl ModifierNodePositionGroup for ModifierExpandedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierExpandedGroupChild {}
impl ModifierVisitedGroup for ModifierExpandedGroupChild {}
impl ModifierOptionalGroup for ModifierExpandedGroupChild {}
impl ModifierFullScreenGroup for ModifierExpandedGroupChild {}
impl ModifierTargetGroup for ModifierExpandedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierExpandedGroupChild {}
impl ModifierRequiredGroup for ModifierExpandedGroupChild {}
impl ModifierDefaultGroup for ModifierExpandedGroupChild {}
impl ModifierOnlyChildGroup for ModifierExpandedGroupChild {}
impl ModifierOnlyGroup for ModifierExpandedGroupChild {}
impl ModifierRootGroup for ModifierExpandedGroupChild {}
impl ModifierLinkGroup for ModifierExpandedGroupChild {}
impl ModifierPseudoGroup for ModifierExpandedGroupChild {}
impl GeneratedAtom for ModifierExpandedGroupChild {}
impl GeneratedNamedClasses for ModifierExpandedGroupChild {}
impl ModifierGrabbedGroup for ModifierCheckedGroupChild {}
impl ModifierPressedGroup for ModifierCheckedGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierCheckedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierCheckedGroupChild {}
impl ModifierValidGroup for ModifierCheckedGroupChild {}
impl ModifierLoadingGroup for ModifierCheckedGroupChild {}
impl ModifierSelectedGroup for ModifierCheckedGroupChild {}
impl ModifierHiddenGroup for ModifierCheckedGroupChild {}
impl ModifierAutofillGroup for ModifierCheckedGroupChild {}
impl ModifierEvenGroup for ModifierCheckedGroupChild {}
impl ModifierNodePositionGroup for ModifierCheckedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierCheckedGroupChild {}
impl ModifierVisitedGroup for ModifierCheckedGroupChild {}
impl ModifierOptionalGroup for ModifierCheckedGroupChild {}
impl ModifierFullScreenGroup for ModifierCheckedGroupChild {}
impl ModifierTargetGroup for ModifierCheckedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierCheckedGroupChild {}
impl ModifierRequiredGroup for ModifierCheckedGroupChild {}
impl ModifierDefaultGroup for ModifierCheckedGroupChild {}
impl ModifierOnlyChildGroup for ModifierCheckedGroupChild {}
impl ModifierOnlyGroup for ModifierCheckedGroupChild {}
impl ModifierRootGroup for ModifierCheckedGroupChild {}
impl ModifierLinkGroup for ModifierCheckedGroupChild {}
impl ModifierPseudoGroup for ModifierCheckedGroupChild {}
impl GeneratedAtom for ModifierCheckedGroupChild {}
impl GeneratedNamedClasses for ModifierCheckedGroupChild {}
impl ModifierPressedGroup for ModifierGrabbedGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierGrabbedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierGrabbedGroupChild {}
impl ModifierValidGroup for ModifierGrabbedGroupChild {}
impl ModifierLoadingGroup for ModifierGrabbedGroupChild {}
impl ModifierSelectedGroup for ModifierGrabbedGroupChild {}
impl ModifierHiddenGroup for ModifierGrabbedGroupChild {}
impl ModifierAutofillGroup for ModifierGrabbedGroupChild {}
impl ModifierEvenGroup for ModifierGrabbedGroupChild {}
impl ModifierNodePositionGroup for ModifierGrabbedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierGrabbedGroupChild {}
impl ModifierVisitedGroup for ModifierGrabbedGroupChild {}
impl ModifierOptionalGroup for ModifierGrabbedGroupChild {}
impl ModifierFullScreenGroup for ModifierGrabbedGroupChild {}
impl ModifierTargetGroup for ModifierGrabbedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierGrabbedGroupChild {}
impl ModifierRequiredGroup for ModifierGrabbedGroupChild {}
impl ModifierDefaultGroup for ModifierGrabbedGroupChild {}
impl ModifierOnlyChildGroup for ModifierGrabbedGroupChild {}
impl ModifierOnlyGroup for ModifierGrabbedGroupChild {}
impl ModifierRootGroup for ModifierGrabbedGroupChild {}
impl ModifierLinkGroup for ModifierGrabbedGroupChild {}
impl ModifierPseudoGroup for ModifierGrabbedGroupChild {}
impl GeneratedAtom for ModifierGrabbedGroupChild {}
impl GeneratedNamedClasses for ModifierGrabbedGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierPressedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierPressedGroupChild {}
impl ModifierValidGroup for ModifierPressedGroupChild {}
impl ModifierLoadingGroup for ModifierPressedGroupChild {}
impl ModifierSelectedGroup for ModifierPressedGroupChild {}
impl ModifierHiddenGroup for ModifierPressedGroupChild {}
impl ModifierAutofillGroup for ModifierPressedGroupChild {}
impl ModifierEvenGroup for ModifierPressedGroupChild {}
impl ModifierNodePositionGroup for ModifierPressedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierPressedGroupChild {}
impl ModifierVisitedGroup for ModifierPressedGroupChild {}
impl ModifierOptionalGroup for ModifierPressedGroupChild {}
impl ModifierFullScreenGroup for ModifierPressedGroupChild {}
impl ModifierTargetGroup for ModifierPressedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierPressedGroupChild {}
impl ModifierRequiredGroup for ModifierPressedGroupChild {}
impl ModifierDefaultGroup for ModifierPressedGroupChild {}
impl ModifierOnlyChildGroup for ModifierPressedGroupChild {}
impl ModifierOnlyGroup for ModifierPressedGroupChild {}
impl ModifierRootGroup for ModifierPressedGroupChild {}
impl ModifierLinkGroup for ModifierPressedGroupChild {}
impl ModifierPseudoGroup for ModifierPressedGroupChild {}
impl GeneratedAtom for ModifierPressedGroupChild {}
impl GeneratedNamedClasses for ModifierPressedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierValidGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierLoadingGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierSelectedGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierHiddenGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierAutofillGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierEvenGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierNodePositionGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierVisitedGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierOptionalGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierFullScreenGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierTargetGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierRequiredGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierDefaultGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierOnlyChildGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierOnlyGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierRootGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierLinkGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierPseudoGroup for ModifierInvalidGrammarGroupChild {}
impl GeneratedAtom for ModifierInvalidGrammarGroupChild {}
impl GeneratedNamedClasses for ModifierInvalidGrammarGroupChild {}
impl ModifierValidGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierLoadingGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierSelectedGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierHiddenGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierAutofillGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierEvenGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierNodePositionGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierVisitedGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierOptionalGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierFullScreenGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierTargetGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierRequiredGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierDefaultGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierOnlyChildGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierOnlyGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierRootGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierLinkGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierPseudoGroup for ModifierInvalidSpellingGroupChild {}
impl GeneratedAtom for ModifierInvalidSpellingGroupChild {}
impl GeneratedNamedClasses for ModifierInvalidSpellingGroupChild {}
impl ModifierLoadingGroup for ModifierValidGroupChild {}
impl ModifierSelectedGroup for ModifierValidGroupChild {}
impl ModifierHiddenGroup for ModifierValidGroupChild {}
impl ModifierAutofillGroup for ModifierValidGroupChild {}
impl ModifierEvenGroup for ModifierValidGroupChild {}
impl ModifierNodePositionGroup for ModifierValidGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierValidGroupChild {}
impl ModifierVisitedGroup for ModifierValidGroupChild {}
impl ModifierOptionalGroup for ModifierValidGroupChild {}
impl ModifierFullScreenGroup for ModifierValidGroupChild {}
impl ModifierTargetGroup for ModifierValidGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierValidGroupChild {}
impl ModifierRequiredGroup for ModifierValidGroupChild {}
impl ModifierDefaultGroup for ModifierValidGroupChild {}
impl ModifierOnlyChildGroup for ModifierValidGroupChild {}
impl ModifierOnlyGroup for ModifierValidGroupChild {}
impl ModifierRootGroup for ModifierValidGroupChild {}
impl ModifierLinkGroup for ModifierValidGroupChild {}
impl ModifierPseudoGroup for ModifierValidGroupChild {}
impl GeneratedAtom for ModifierValidGroupChild {}
impl GeneratedNamedClasses for ModifierValidGroupChild {}
impl ModifierSelectedGroup for ModifierLoadingGroupChild {}
impl ModifierHiddenGroup for ModifierLoadingGroupChild {}
impl ModifierAutofillGroup for ModifierLoadingGroupChild {}
impl ModifierEvenGroup for ModifierLoadingGroupChild {}
impl ModifierNodePositionGroup for ModifierLoadingGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierLoadingGroupChild {}
impl ModifierVisitedGroup for ModifierLoadingGroupChild {}
impl ModifierOptionalGroup for ModifierLoadingGroupChild {}
impl ModifierFullScreenGroup for ModifierLoadingGroupChild {}
impl ModifierTargetGroup for ModifierLoadingGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierLoadingGroupChild {}
impl ModifierRequiredGroup for ModifierLoadingGroupChild {}
impl ModifierDefaultGroup for ModifierLoadingGroupChild {}
impl ModifierOnlyChildGroup for ModifierLoadingGroupChild {}
impl ModifierOnlyGroup for ModifierLoadingGroupChild {}
impl ModifierRootGroup for ModifierLoadingGroupChild {}
impl ModifierLinkGroup for ModifierLoadingGroupChild {}
impl ModifierPseudoGroup for ModifierLoadingGroupChild {}
impl GeneratedAtom for ModifierLoadingGroupChild {}
impl GeneratedNamedClasses for ModifierLoadingGroupChild {}
impl ModifierHiddenGroup for ModifierSelectedGroupChild {}
impl ModifierAutofillGroup for ModifierSelectedGroupChild {}
impl ModifierEvenGroup for ModifierSelectedGroupChild {}
impl ModifierNodePositionGroup for ModifierSelectedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierSelectedGroupChild {}
impl ModifierVisitedGroup for ModifierSelectedGroupChild {}
impl ModifierOptionalGroup for ModifierSelectedGroupChild {}
impl ModifierFullScreenGroup for ModifierSelectedGroupChild {}
impl ModifierTargetGroup for ModifierSelectedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierSelectedGroupChild {}
impl ModifierRequiredGroup for ModifierSelectedGroupChild {}
impl ModifierDefaultGroup for ModifierSelectedGroupChild {}
impl ModifierOnlyChildGroup for ModifierSelectedGroupChild {}
impl ModifierOnlyGroup for ModifierSelectedGroupChild {}
impl ModifierRootGroup for ModifierSelectedGroupChild {}
impl ModifierLinkGroup for ModifierSelectedGroupChild {}
impl ModifierPseudoGroup for ModifierSelectedGroupChild {}
impl GeneratedAtom for ModifierSelectedGroupChild {}
impl GeneratedNamedClasses for ModifierSelectedGroupChild {}
impl ModifierAutofillGroup for ModifierHiddenGroupChild {}
impl ModifierEvenGroup for ModifierHiddenGroupChild {}
impl ModifierNodePositionGroup for ModifierHiddenGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierHiddenGroupChild {}
impl ModifierVisitedGroup for ModifierHiddenGroupChild {}
impl ModifierOptionalGroup for ModifierHiddenGroupChild {}
impl ModifierFullScreenGroup for ModifierHiddenGroupChild {}
impl ModifierTargetGroup for ModifierHiddenGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierHiddenGroupChild {}
impl ModifierRequiredGroup for ModifierHiddenGroupChild {}
impl ModifierDefaultGroup for ModifierHiddenGroupChild {}
impl ModifierOnlyChildGroup for ModifierHiddenGroupChild {}
impl ModifierOnlyGroup for ModifierHiddenGroupChild {}
impl ModifierRootGroup for ModifierHiddenGroupChild {}
impl ModifierLinkGroup for ModifierHiddenGroupChild {}
impl ModifierPseudoGroup for ModifierHiddenGroupChild {}
impl GeneratedAtom for ModifierHiddenGroupChild {}
impl GeneratedNamedClasses for ModifierHiddenGroupChild {}
impl ModifierEvenGroup for ModifierAutofillGroupChild {}
impl ModifierNodePositionGroup for ModifierAutofillGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierAutofillGroupChild {}
impl ModifierVisitedGroup for ModifierAutofillGroupChild {}
impl ModifierOptionalGroup for ModifierAutofillGroupChild {}
impl ModifierFullScreenGroup for ModifierAutofillGroupChild {}
impl ModifierTargetGroup for ModifierAutofillGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierAutofillGroupChild {}
impl ModifierRequiredGroup for ModifierAutofillGroupChild {}
impl ModifierDefaultGroup for ModifierAutofillGroupChild {}
impl ModifierOnlyChildGroup for ModifierAutofillGroupChild {}
impl ModifierOnlyGroup for ModifierAutofillGroupChild {}
impl ModifierRootGroup for ModifierAutofillGroupChild {}
impl ModifierLinkGroup for ModifierAutofillGroupChild {}
impl ModifierPseudoGroup for ModifierAutofillGroupChild {}
impl GeneratedAtom for ModifierAutofillGroupChild {}
impl GeneratedNamedClasses for ModifierAutofillGroupChild {}
impl ModifierNodePositionGroup for ModifierEvenGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierEvenGroupChild {}
impl ModifierVisitedGroup for ModifierEvenGroupChild {}
impl ModifierOptionalGroup for ModifierEvenGroupChild {}
impl ModifierFullScreenGroup for ModifierEvenGroupChild {}
impl ModifierTargetGroup for ModifierEvenGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierEvenGroupChild {}
impl ModifierRequiredGroup for ModifierEvenGroupChild {}
impl ModifierDefaultGroup for ModifierEvenGroupChild {}
impl ModifierOnlyChildGroup for ModifierEvenGroupChild {}
impl ModifierOnlyGroup for ModifierEvenGroupChild {}
impl ModifierRootGroup for ModifierEvenGroupChild {}
impl ModifierLinkGroup for ModifierEvenGroupChild {}
impl ModifierPseudoGroup for ModifierEvenGroupChild {}
impl GeneratedAtom for ModifierEvenGroupChild {}
impl GeneratedNamedClasses for ModifierEvenGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierNodePositionGroupChild {}
impl ModifierVisitedGroup for ModifierNodePositionGroupChild {}
impl ModifierOptionalGroup for ModifierNodePositionGroupChild {}
impl ModifierFullScreenGroup for ModifierNodePositionGroupChild {}
impl ModifierTargetGroup for ModifierNodePositionGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierNodePositionGroupChild {}
impl ModifierRequiredGroup for ModifierNodePositionGroupChild {}
impl ModifierDefaultGroup for ModifierNodePositionGroupChild {}
impl ModifierOnlyChildGroup for ModifierNodePositionGroupChild {}
impl ModifierOnlyGroup for ModifierNodePositionGroupChild {}
impl ModifierRootGroup for ModifierNodePositionGroupChild {}
impl ModifierLinkGroup for ModifierNodePositionGroupChild {}
impl ModifierPseudoGroup for ModifierNodePositionGroupChild {}
impl GeneratedAtom for ModifierNodePositionGroupChild {}
impl GeneratedNamedClasses for ModifierNodePositionGroupChild {}
impl ModifierVisitedGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierOptionalGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierFullScreenGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierTargetGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierRequiredGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierDefaultGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierOnlyChildGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierOnlyGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierRootGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierLinkGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierPseudoGroup for ModifierNodeOfTypeGroupChild {}
impl GeneratedAtom for ModifierNodeOfTypeGroupChild {}
impl GeneratedNamedClasses for ModifierNodeOfTypeGroupChild {}
impl ModifierOptionalGroup for ModifierVisitedGroupChild {}
impl ModifierFullScreenGroup for ModifierVisitedGroupChild {}
impl ModifierTargetGroup for ModifierVisitedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierVisitedGroupChild {}
impl ModifierRequiredGroup for ModifierVisitedGroupChild {}
impl ModifierDefaultGroup for ModifierVisitedGroupChild {}
impl ModifierOnlyChildGroup for ModifierVisitedGroupChild {}
impl ModifierOnlyGroup for ModifierVisitedGroupChild {}
impl ModifierRootGroup for ModifierVisitedGroupChild {}
impl ModifierLinkGroup for ModifierVisitedGroupChild {}
impl ModifierPseudoGroup for ModifierVisitedGroupChild {}
impl GeneratedAtom for ModifierVisitedGroupChild {}
impl GeneratedNamedClasses for ModifierVisitedGroupChild {}
impl ModifierFullScreenGroup for ModifierOptionalGroupChild {}
impl ModifierTargetGroup for ModifierOptionalGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierOptionalGroupChild {}
impl ModifierRequiredGroup for ModifierOptionalGroupChild {}
impl ModifierDefaultGroup for ModifierOptionalGroupChild {}
impl ModifierOnlyChildGroup for ModifierOptionalGroupChild {}
impl ModifierOnlyGroup for ModifierOptionalGroupChild {}
impl ModifierRootGroup for ModifierOptionalGroupChild {}
impl ModifierLinkGroup for ModifierOptionalGroupChild {}
impl ModifierPseudoGroup for ModifierOptionalGroupChild {}
impl GeneratedAtom for ModifierOptionalGroupChild {}
impl GeneratedNamedClasses for ModifierOptionalGroupChild {}
impl ModifierTargetGroup for ModifierFullScreenGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierFullScreenGroupChild {}
impl ModifierRequiredGroup for ModifierFullScreenGroupChild {}
impl ModifierDefaultGroup for ModifierFullScreenGroupChild {}
impl ModifierOnlyChildGroup for ModifierFullScreenGroupChild {}
impl ModifierOnlyGroup for ModifierFullScreenGroupChild {}
impl ModifierRootGroup for ModifierFullScreenGroupChild {}
impl ModifierLinkGroup for ModifierFullScreenGroupChild {}
impl ModifierPseudoGroup for ModifierFullScreenGroupChild {}
impl GeneratedAtom for ModifierFullScreenGroupChild {}
impl GeneratedNamedClasses for ModifierFullScreenGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierTargetGroupChild {}
impl ModifierRequiredGroup for ModifierTargetGroupChild {}
impl ModifierDefaultGroup for ModifierTargetGroupChild {}
impl ModifierOnlyChildGroup for ModifierTargetGroupChild {}
impl ModifierOnlyGroup for ModifierTargetGroupChild {}
impl ModifierRootGroup for ModifierTargetGroupChild {}
impl ModifierLinkGroup for ModifierTargetGroupChild {}
impl ModifierPseudoGroup for ModifierTargetGroupChild {}
impl GeneratedAtom for ModifierTargetGroupChild {}
impl GeneratedNamedClasses for ModifierTargetGroupChild {}
impl ModifierRequiredGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierDefaultGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierOnlyChildGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierOnlyGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierRootGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierLinkGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierPseudoGroup for ModifierPlaceholderShownGroupChild {}
impl GeneratedAtom for ModifierPlaceholderShownGroupChild {}
impl GeneratedNamedClasses for ModifierPlaceholderShownGroupChild {}
impl ModifierDefaultGroup for ModifierRequiredGroupChild {}
impl ModifierOnlyChildGroup for ModifierRequiredGroupChild {}
impl ModifierOnlyGroup for ModifierRequiredGroupChild {}
impl ModifierRootGroup for ModifierRequiredGroupChild {}
impl ModifierLinkGroup for ModifierRequiredGroupChild {}
impl ModifierPseudoGroup for ModifierRequiredGroupChild {}
impl GeneratedAtom for ModifierRequiredGroupChild {}
impl GeneratedNamedClasses for ModifierRequiredGroupChild {}
impl ModifierOnlyChildGroup for ModifierDefaultGroupChild {}
impl ModifierOnlyGroup for ModifierDefaultGroupChild {}
impl ModifierRootGroup for ModifierDefaultGroupChild {}
impl ModifierLinkGroup for ModifierDefaultGroupChild {}
impl ModifierPseudoGroup for ModifierDefaultGroupChild {}
impl GeneratedAtom for ModifierDefaultGroupChild {}
impl GeneratedNamedClasses for ModifierDefaultGroupChild {}
impl ModifierOnlyGroup for ModifierOnlyChildGroupChild {}
impl ModifierRootGroup for ModifierOnlyChildGroupChild {}
impl ModifierLinkGroup for ModifierOnlyChildGroupChild {}
impl ModifierPseudoGroup for ModifierOnlyChildGroupChild {}
impl GeneratedAtom for ModifierOnlyChildGroupChild {}
impl GeneratedNamedClasses for ModifierOnlyChildGroupChild {}
impl ModifierRootGroup for ModifierOnlyGroupChild {}
impl ModifierLinkGroup for ModifierOnlyGroupChild {}
impl ModifierPseudoGroup for ModifierOnlyGroupChild {}
impl GeneratedAtom for ModifierOnlyGroupChild {}
impl GeneratedNamedClasses for ModifierOnlyGroupChild {}
impl ModifierLinkGroup for ModifierRootGroupChild {}
impl ModifierPseudoGroup for ModifierRootGroupChild {}
impl GeneratedAtom for ModifierRootGroupChild {}
impl GeneratedNamedClasses for ModifierRootGroupChild {}
impl ModifierPseudoGroup for ModifierLinkGroupChild {}
impl GeneratedAtom for ModifierLinkGroupChild {}
impl GeneratedNamedClasses for ModifierLinkGroupChild {}
impl GeneratedAtom for ModifierPseudoGroupChild {}
impl GeneratedNamedClasses for ModifierPseudoGroupChild {}
