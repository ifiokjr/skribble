#![allow(unused)]
// This file was generated by skribble.
use private::GeneratedSkribbleValue;
pub fn sk() -> GeneratedSkribbleRoot {
  GeneratedSkribbleRoot::from_ref("")
}
pub struct GeneratedSkribbleRoot(String);
impl GeneratedSkribbleValue for GeneratedSkribbleRoot {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
mod private {
  #[doc(hidden)]
  pub trait GeneratedSkribbleValue {
    fn from_ref(value: impl AsRef<str>) -> Self;
    fn get_skribble_value(&self) -> &String;
    #[inline]
    fn append(&self, value: impl AsRef<str>) -> String {
      let current_value = self.get_skribble_value();
      let prefix = if current_value.is_empty() {
        "".into()
      } else {
        format!("{current_value}:")
      };

      format!("{}{}", prefix, value.as_ref())
    }
    #[inline]
    fn append_value(&self, value: impl AsRef<str>) -> String {
      format!("{}:${}", self.get_skribble_value(), value.as_ref())
    }
  }
}
pub fn vars() -> GeneratedCssVariables {
  GeneratedCssVariables
}
pub struct GeneratedCssVariables;
impl GeneratedCssVariables {
  /// The primary color. Useful for primary buttons.
  ///
  /// ```css
  /// @property --sk-p {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(258.89362 94.37751% 51.17647%);
  /// }
  /// ```
  #[inline]
  pub fn primary(&self) -> String {
    "--sk-p".into()
  }

  /// The primary content color
  ///
  /// ```css
  /// @property --sk-pc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn primary_content(&self) -> String {
    "--sk-pc".into()
  }

  /// The secondary color. Useful for secondary buttons.
  ///
  /// ```css
  /// @property --sk-s {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(314 100% 47.058823%);
  /// }
  /// ```
  #[inline]
  pub fn secondary(&self) -> String {
    "--sk-s".into()
  }

  /// The secondary content color. Useful for text within secondary buttons.
  ///
  /// ```css
  /// @property --sk-sc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn secondary_content(&self) -> String {
    "--sk-sc".into()
  }

  /// Color for accents.
  ///
  /// ```css
  /// @property --sk-a {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(174 60.000008% 50.980396%);
  /// }
  /// ```
  #[inline]
  pub fn accent(&self) -> String {
    "--sk-a".into()
  }

  /// Color for content within accents.
  ///
  /// ```css
  /// @property --sk-ac {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(174.70587 43.589737% 15.294118%);
  /// }
  /// ```
  #[inline]
  pub fn accent_content(&self) -> String {
    "--sk-ac".into()
  }

  /// The neutral color.
  ///
  /// ```css
  /// @property --sk-n {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(218.99998 14.084508% 27.843138%);
  /// }
  /// ```
  #[inline]
  pub fn neutral(&self) -> String {
    "--sk-n".into()
  }

  /// The neutral content color.
  ///
  /// ```css
  /// @property --sk-nc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn neutral_content(&self) -> String {
    "--sk-nc".into()
  }

  /// The base color.
  ///
  /// ```css
  /// @property --sk-b1 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn base100(&self) -> String {
    "--sk-b1".into()
  }

  /// The secondary base color.
  ///
  /// ```css
  /// @property --sk-b2 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 94.90196%);
  /// }
  /// ```
  #[inline]
  pub fn base200(&self) -> String {
    "--sk-b2".into()
  }

  /// The tertiary base color.
  ///
  /// ```css
  /// @property --sk-b3 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(180 1.9607836% 90%);
  /// }
  /// ```
  #[inline]
  pub fn base300(&self) -> String {
    "--sk-b3".into()
  }

  /// The base content color. This is useful for text.
  ///
  /// ```css
  /// @property --sk-bc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(215 27.906975% 16.862745%);
  /// }
  /// ```
  #[inline]
  pub fn base_content(&self) -> String {
    "--sk-bc".into()
  }

  /// The info color. Useful for info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-in {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(212.34569 100% 47.64706%);
  /// }
  /// ```
  #[inline]
  pub fn info(&self) -> String {
    "--sk-in".into()
  }

  /// The info content color. Useful for text within info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-inc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn info_content(&self) -> String {
    "--sk-inc".into()
  }

  /// The success color. Useful for success buttons and alerts.
  ///
  /// ```css
  /// @property --sk-su {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(136.8421 72.1519% 46.47059%);
  /// }
  /// ```
  #[inline]
  pub fn success(&self) -> String {
    "--sk-su".into()
  }

  /// The success content color. Useful for text within success buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-suc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn success_content(&self) -> String {
    "--sk-suc".into()
  }

  /// The warning color. Useful for warning buttons and alerts.
  ///
  /// ```css
  /// @property --sk-wa {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(4.5614033 100% 66.47059%);
  /// }
  /// ```
  #[inline]
  pub fn warning(&self) -> String {
    "--sk-wa".into()
  }

  /// The warning content color. Useful for text within warning buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-wac {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn warning_content(&self) -> String {
    "--sk-wac".into()
  }

  /// The error color. Useful for error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-er {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(325.05154 77.600006% 49.019608%);
  /// }
  /// ```
  #[inline]
  pub fn error(&self) -> String {
    "--sk-er".into()
  }

  /// The error content color. Useful for text within error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-erc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  pub fn error_content(&self) -> String {
    "--sk-erc".into()
  }

  /// ```css
  /// @property --sk-cmw {
  ///   syntax: "*";
  ///   inherits: true;
  ///   initial-value: inherit;
  /// }
  /// ```
  #[inline]
  pub fn contained_max_width(&self) -> String {
    "--sk-cmw".into()
  }

  /// ```css
  /// @property --sk-empty {
  ///   syntax: "*";
  ///   inherits: true;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn empty(&self) -> String {
    "--sk-empty".into()
  }

  /// ```css
  /// @property --sk-filter-blur {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_blur(&self) -> String {
    "--sk-filter-blur".into()
  }

  /// ```css
  /// @property --sk-filter-brightness {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_brightness(&self) -> String {
    "--sk-filter-brightness".into()
  }

  /// ```css
  /// @property --sk-filter-contrast {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_contrast(&self) -> String {
    "--sk-filter-contrast".into()
  }

  /// ```css
  /// @property --sk-filter-custom {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_custom(&self) -> String {
    "--sk-filter-custom".into()
  }

  /// ```css
  /// @property --sk-filter-grayscale {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_grayscale(&self) -> String {
    "--sk-filter-grayscale".into()
  }

  /// ```css
  /// @property --sk-filter-hue-rotate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_hue_rotate(&self) -> String {
    "--sk-filter-hue-rotate".into()
  }

  /// ```css
  /// @property --sk-filter-invert {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_invert(&self) -> String {
    "--sk-filter-invert".into()
  }

  /// ```css
  /// @property --sk-filter-saturate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_saturate(&self) -> String {
    "--sk-filter-saturate".into()
  }

  /// ```css
  /// @property --sk-filter-sepia {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_sepia(&self) -> String {
    "--sk-filter-sepia".into()
  }

  /// ```css
  /// @property --sk-filter-drop-shadow {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_drop_shadow(&self) -> String {
    "--sk-filter-drop-shadow".into()
  }

  /// ```css
  /// @property --sk-backdrop-blur {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_blur(&self) -> String {
    "--sk-backdrop-blur".into()
  }

  /// ```css
  /// @property --sk-backdrop-brightness {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_brightness(&self) -> String {
    "--sk-backdrop-brightness".into()
  }

  /// ```css
  /// @property --sk-backdrop-contrast {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_contrast(&self) -> String {
    "--sk-backdrop-contrast".into()
  }

  /// ```css
  /// @property --sk-backdrop-custom {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_custom(&self) -> String {
    "--sk-backdrop-custom".into()
  }

  /// ```css
  /// @property --sk-backdrop-grayscale {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_grayscale(&self) -> String {
    "--sk-backdrop-grayscale".into()
  }

  /// ```css
  /// @property --sk-backdrop-hue-rotate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_hue_rotate(&self) -> String {
    "--sk-backdrop-hue-rotate".into()
  }

  /// ```css
  /// @property --sk-backdrop-invert {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_invert(&self) -> String {
    "--sk-backdrop-invert".into()
  }

  /// ```css
  /// @property --sk-backdrop-saturate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_saturate(&self) -> String {
    "--sk-backdrop-saturate".into()
  }

  /// ```css
  /// @property --sk-backdrop-sepia {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_sepia(&self) -> String {
    "--sk-backdrop-sepia".into()
  }

  /// ```css
  /// @property --sk-backdrop-drop-shadow {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_drop_shadow(&self) -> String {
    "--sk-backdrop-drop-shadow".into()
  }

  /// ```css
  /// @property --sk-transition-duration {
  ///   syntax: "<time>";
  ///   inherits: true;
  ///   initial-value: 150ms;
  /// }
  /// ```
  #[inline]
  pub fn transition_duration(&self) -> String {
    "--sk-transition-duration".into()
  }

  /// ```css
  /// @property --sk-animation-duration {
  ///   syntax: "<time>";
  ///   inherits: true;
  ///   initial-value: 1s;
  /// }
  /// ```
  #[inline]
  pub fn animation_duration(&self) -> String {
    "--sk-animation-duration".into()
  }

  /// ```css
  /// @property --sk-enter-opacity {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn enter_opacity(&self) -> String {
    "--sk-enter-opacity".into()
  }

  /// ```css
  /// @property --sk-enter-tx {
  ///   syntax: "<length-percentage>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn enter_translate_x(&self) -> String {
    "--sk-enter-tx".into()
  }

  /// ```css
  /// @property --sk-enter-ty {
  ///   syntax: "<length-percentage>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn enter_translate_y(&self) -> String {
    "--sk-enter-ty".into()
  }

  /// ```css
  /// @property --sk-enter-sx {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn enter_scale_x(&self) -> String {
    "--sk-enter-sx".into()
  }

  /// ```css
  /// @property --sk-enter-sy {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn enter_scale_y(&self) -> String {
    "--sk-enter-sy".into()
  }

  /// ```css
  /// @property --sk-enter-rotate {
  ///   syntax: "<angle>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn enter_rotate(&self) -> String {
    "--sk-enter-rotate".into()
  }

  /// ```css
  /// @property --sk-exit-opacity {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn exit_opacity(&self) -> String {
    "--sk-exit-opacity".into()
  }

  /// ```css
  /// @property --sk-exit-tx {
  ///   syntax: "<length-percentage>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn exit_translate_x(&self) -> String {
    "--sk-exit-tx".into()
  }

  /// ```css
  /// @property --sk-exit-ty {
  ///   syntax: "<length-percentage>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn exit_translate_y(&self) -> String {
    "--sk-exit-ty".into()
  }

  /// ```css
  /// @property --sk-exit-sx {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn exit_scale_x(&self) -> String {
    "--sk-exit-sx".into()
  }

  /// ```css
  /// @property --sk-exit-sy {
  ///   syntax: "<number> | <percentage>";
  ///   inherits: true;
  ///   initial-value: 1;
  /// }
  /// ```
  #[inline]
  pub fn exit_scale_y(&self) -> String {
    "--sk-exit-sy".into()
  }

  /// ```css
  /// @property --sk-exit-rotate {
  ///   syntax: "<angle>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn exit_rotate(&self) -> String {
    "--sk-exit-rotate".into()
  }

  /// ```css
  /// @property --sk-space-x-reverse {
  ///   syntax: "<number>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn space_x_reverse(&self) -> String {
    "--sk-space-x-reverse".into()
  }

  /// ```css
  /// @property --sk-space-y-reverse {
  ///   syntax: "<number>";
  ///   inherits: true;
  ///   initial-value: 0;
  /// }
  /// ```
  #[inline]
  pub fn space_y_reverse(&self) -> String {
    "--sk-space-y-reverse".into()
  }
}
pub struct GeneratedMediaQueryDeviceCategoriesChild(String);
impl GeneratedSkribbleValue for GeneratedMediaQueryDeviceCategoriesChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedMediaQueryDeviceCategories: GeneratedSkribbleValue {
  /// The media query for devices with a screen.
  ///
  /// ```css
  /// @media screen {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn screen(&self) -> GeneratedMediaQueryDeviceCategoriesChild {
    GeneratedMediaQueryDeviceCategoriesChild::from_ref(self.append("screen"))
  }
  #[inline]
  fn screen_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("screen:[{}={}]", property.trim(), value.trim()))
  }
  /// The media query for devices with a printer.
  ///
  /// ```css
  /// @media print {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn print(&self) -> GeneratedMediaQueryDeviceCategoriesChild {
    GeneratedMediaQueryDeviceCategoriesChild::from_ref(self.append("print"))
  }
  #[inline]
  fn print_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("print:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedMediaQueryBreakpointsChild(String);
impl GeneratedSkribbleValue for GeneratedMediaQueryBreakpointsChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedMediaQueryBreakpoints: GeneratedSkribbleValue {
  /// The breakpoint for devices with screen size greater than tiny.
  ///
  /// ```css
  /// @media (min-width: 640px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn sm(&self) -> GeneratedMediaQueryBreakpointsChild {
    GeneratedMediaQueryBreakpointsChild::from_ref(self.append("sm"))
  }
  #[inline]
  fn sm_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("sm:[{}={}]", property.trim(), value.trim()))
  }
  /// The breakpoint for devices screen size greater than medium
  ///
  /// ```css
  /// @media (min-width: 768px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn md(&self) -> GeneratedMediaQueryBreakpointsChild {
    GeneratedMediaQueryBreakpointsChild::from_ref(self.append("md"))
  }
  #[inline]
  fn md_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("md:[{}={}]", property.trim(), value.trim()))
  }
  /// The breakpoint for devices screen size greater than large
  ///
  /// ```css
  /// @media (min-width: 1024px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn lg(&self) -> GeneratedMediaQueryBreakpointsChild {
    GeneratedMediaQueryBreakpointsChild::from_ref(self.append("lg"))
  }
  #[inline]
  fn lg_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("lg:[{}={}]", property.trim(), value.trim()))
  }
  /// The breakpoint for devices screen size greater than extra large
  ///
  /// ```css
  /// @media (min-width: 1280px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn xl(&self) -> GeneratedMediaQueryBreakpointsChild {
    GeneratedMediaQueryBreakpointsChild::from_ref(self.append("xl"))
  }
  #[inline]
  fn xl_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("xl:[{}={}]", property.trim(), value.trim()))
  }
  /// The breakpoint for devices screen size greater than xxl
  ///
  /// ```css
  /// @media (min-width: 1536px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn xxl(&self) -> GeneratedMediaQueryBreakpointsChild {
    GeneratedMediaQueryBreakpointsChild::from_ref(self.append("xxl"))
  }
  #[inline]
  fn xxl_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("xxl:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedMediaQueryOrientationChild(String);
impl GeneratedSkribbleValue for GeneratedMediaQueryOrientationChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedMediaQueryOrientation: GeneratedSkribbleValue {
  /// The media query for devices with a portrait orientation.
  ///
  /// ```css
  /// @media (orientation: portrait) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn portrait(&self) -> GeneratedMediaQueryOrientationChild {
    GeneratedMediaQueryOrientationChild::from_ref(self.append("portrait"))
  }
  #[inline]
  fn portrait_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("portrait:[{}={}]", property.trim(), value.trim()))
  }
  /// The media query for devices with a landscape orientation.
  ///
  /// ```css
  /// @media (orientation: landscape) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn landscape(&self) -> GeneratedMediaQueryOrientationChild {
    GeneratedMediaQueryOrientationChild::from_ref(self.append("landscape"))
  }
  #[inline]
  fn landscape_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("landscape:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedMediaQueryMotionChild(String);
impl GeneratedSkribbleValue for GeneratedMediaQueryMotionChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedMediaQueryMotion: GeneratedSkribbleValue {
  /// The media query for devices with a reduced motion preference.
  ///
  /// ```css
  /// @media (prefers-reduced-motion: reduce) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn motion_reduce(&self) -> GeneratedMediaQueryMotionChild {
    GeneratedMediaQueryMotionChild::from_ref(self.append("motion-reduce"))
  }
  #[inline]
  fn motion_reduce_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "motion-reduce:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// The media query for devices with a no preference motion preference.
  ///
  /// ```css
  /// @media (prefers-reduced-motion: no-preference) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn motion_safe(&self) -> GeneratedMediaQueryMotionChild {
    GeneratedMediaQueryMotionChild::from_ref(self.append("motion-safe"))
  }
  #[inline]
  fn motion_safe_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "motion-safe:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedMediaQueryDarkModeChild(String);
impl GeneratedSkribbleValue for GeneratedMediaQueryDarkModeChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedMediaQueryDarkMode: GeneratedSkribbleValue {
  /// The media query for devices with a dark color scheme.
  ///
  /// ```css
  /// @media (prefers-color-scheme: dark) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn dark(&self) -> GeneratedMediaQueryDarkModeChild {
    GeneratedMediaQueryDarkModeChild::from_ref(self.append("dark"))
  }
  #[inline]
  fn dark_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("dark:[{}={}]", property.trim(), value.trim()))
  }
  /// The media query for devices with a light color scheme.
  ///
  /// ```css
  /// @media (prefers-color-scheme: light) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn light(&self) -> GeneratedMediaQueryDarkModeChild {
    GeneratedMediaQueryDarkModeChild::from_ref(self.append("light"))
  }
  #[inline]
  fn light_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("light:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierParentGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierParentGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierParentGroup: GeneratedSkribbleValue {
  /// This class modifier becomes active when when the text direction of any
  /// parent nodes is set to right to left.
  ///
  /// ```css
  /// [dir=rtl] & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn rtl(&self) -> GeneratedModifierParentGroupChild {
    GeneratedModifierParentGroupChild::from_ref(self.append("rtl"))
  }
  #[inline]
  fn rtl_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("rtl:[{}={}]", property.trim(), value.trim()))
  }
  /// This class modifier becomes active when a parent group is hovered.
  ///
  /// ```css
  /// .\$group:hover &, .group:hover &, [role='group']:hover & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_hover(&self) -> GeneratedModifierParentGroupChild {
    GeneratedModifierParentGroupChild::from_ref(self.append("group-hover"))
  }
  #[inline]
  fn group_hover_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "group-hover:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// This class modifier becomes active when a parent group is focused.
  ///
  /// ```css
  /// .\$group:focus &, .group:focus &, [role='group']:focus & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_focus(&self) -> GeneratedModifierParentGroupChild {
    GeneratedModifierParentGroupChild::from_ref(self.append("group-focus"))
  }
  #[inline]
  fn group_focus_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "group-focus:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// This class modifier becomes active when a parent group is active.
  ///
  /// ```css
  /// .\$group:active &, .group:active &, [role='group']:active & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_active(&self) -> GeneratedModifierParentGroupChild {
    GeneratedModifierParentGroupChild::from_ref(self.append("group-active"))
  }
  #[inline]
  fn group_active_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "group-active:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// This class modifier becomes active when a parent group is visited.
  ///
  /// ```css
  /// .\$group:visited &, .group:visited &, [role='group']:visited & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_visited(&self) -> GeneratedModifierParentGroupChild {
    GeneratedModifierParentGroupChild::from_ref(self.append("group-visited"))
  }
  #[inline]
  fn group_visited_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "group-visited:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierHoverGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierHoverGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierHoverGroup: GeneratedSkribbleValue {
  /// This class modifier becomes active when the element is hovered.
  ///
  /// ```css
  /// &:hover {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn hover(&self) -> GeneratedModifierHoverGroupChild {
    GeneratedModifierHoverGroupChild::from_ref(self.append("hover"))
  }
  #[inline]
  fn hover_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("hover:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierActiveGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierActiveGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierActiveGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:active {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active(&self) -> GeneratedModifierActiveGroupChild {
    GeneratedModifierActiveGroupChild::from_ref(self.append("active"))
  }
  #[inline]
  fn active_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("active:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierFocusGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierFocusGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierFocusGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:focus {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn focus(&self) -> GeneratedModifierFocusGroupChild {
    GeneratedModifierFocusGroupChild::from_ref(self.append("focus"))
  }
  #[inline]
  fn focus_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("focus:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierFocusWithinGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierFocusWithinGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierFocusWithinGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:focus-within {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn focus_within(&self) -> GeneratedModifierFocusWithinGroupChild {
    GeneratedModifierFocusWithinGroupChild::from_ref(self.append("focus-within"))
  }
  #[inline]
  fn focus_within_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "focus-within:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierFocusVisibleGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierFocusVisibleGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierFocusVisibleGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:focus-visible {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn focus_visible(&self) -> GeneratedModifierFocusVisibleGroupChild {
    GeneratedModifierFocusVisibleGroupChild::from_ref(self.append("focus-visible"))
  }
  #[inline]
  fn focus_visible_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "focus-visible:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierEnabledGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierEnabledGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierEnabledGroup: GeneratedSkribbleValue {
  /// ```css
  /// &[disabled], &:disabled {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn disabled(&self) -> GeneratedModifierEnabledGroupChild {
    GeneratedModifierEnabledGroupChild::from_ref(self.append("disabled"))
  }
  #[inline]
  fn disabled_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("disabled:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:disabled {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_disabled(&self) -> GeneratedModifierEnabledGroupChild {
    GeneratedModifierEnabledGroupChild::from_ref(self.append("not-disabled"))
  }
  #[inline]
  fn not_disabled_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "not-disabled:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &:enabled {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn enabled(&self) -> GeneratedModifierEnabledGroupChild {
    GeneratedModifierEnabledGroupChild::from_ref(self.append("enabled"))
  }
  #[inline]
  fn enabled_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("enabled:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierEmptyGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierEmptyGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierEmptyGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:empty {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn empty(&self) -> GeneratedModifierEmptyGroupChild {
    GeneratedModifierEmptyGroupChild::from_ref(self.append("empty"))
  }
  #[inline]
  fn empty_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("empty:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierReadGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierReadGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierReadGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:read-write {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn read_write(&self) -> GeneratedModifierReadGroupChild {
    GeneratedModifierReadGroupChild::from_ref(self.append("read-write"))
  }
  #[inline]
  fn read_write_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("read-write:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &[readonly], &:read-only {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn readonly(&self) -> GeneratedModifierReadGroupChild {
    GeneratedModifierReadGroupChild::from_ref(self.append("readonly"))
  }
  #[inline]
  fn readonly_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("readonly:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &[readonly=false], &:not(:read-only) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_readonly(&self) -> GeneratedModifierReadGroupChild {
    GeneratedModifierReadGroupChild::from_ref(self.append("not-readonly"))
  }
  #[inline]
  fn not_readonly_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "not-readonly:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierCheckedGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierCheckedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierCheckedGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:indeterminate {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn indeterminate(&self) -> GeneratedModifierCheckedGroupChild {
    GeneratedModifierCheckedGroupChild::from_ref(self.append("indeterminate"))
  }
  #[inline]
  fn indeterminate_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "indeterminate:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &:checked {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn checked(&self) -> GeneratedModifierCheckedGroupChild {
    GeneratedModifierCheckedGroupChild::from_ref(self.append("checked"))
  }
  #[inline]
  fn checked_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("checked:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:not(:checked) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn unchecked(&self) -> GeneratedModifierCheckedGroupChild {
    GeneratedModifierCheckedGroupChild::from_ref(self.append("unchecked"))
  }
  #[inline]
  fn unchecked_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("unchecked:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierValidGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierValidGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierValidGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:valid {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn valid(&self) -> GeneratedModifierValidGroupChild {
    GeneratedModifierValidGroupChild::from_ref(self.append("valid"))
  }
  #[inline]
  fn valid_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("valid:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:invalid {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn invalid(&self) -> GeneratedModifierValidGroupChild {
    GeneratedModifierValidGroupChild::from_ref(self.append("invalid"))
  }
  #[inline]
  fn invalid_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("invalid:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierAutofillGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierAutofillGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierAutofillGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:-webkit-autofill {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn autofill(&self) -> GeneratedModifierAutofillGroupChild {
    GeneratedModifierAutofillGroupChild::from_ref(self.append("autofill"))
  }
  #[inline]
  fn autofill_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("autofill:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierEvenGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierEvenGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierEvenGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:even {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn even(&self) -> GeneratedModifierEvenGroupChild {
    GeneratedModifierEvenGroupChild::from_ref(self.append("even"))
  }
  #[inline]
  fn even_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("even:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:odd {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn odd(&self) -> GeneratedModifierEvenGroupChild {
    GeneratedModifierEvenGroupChild::from_ref(self.append("odd"))
  }
  #[inline]
  fn odd_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("odd:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:nth-of-type(even) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn even_of_type(&self) -> GeneratedModifierEvenGroupChild {
    GeneratedModifierEvenGroupChild::from_ref(self.append("even-of-type"))
  }
  #[inline]
  fn even_of_type_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "even-of-type:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &:nth-of-type(odd) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn odd_of_type(&self) -> GeneratedModifierEvenGroupChild {
    GeneratedModifierEvenGroupChild::from_ref(self.append("odd-of-type"))
  }
  #[inline]
  fn odd_of_type_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "odd-of-type:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierNodePositionGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierNodePositionGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierNodePositionGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:first {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first(&self) -> GeneratedModifierNodePositionGroupChild {
    GeneratedModifierNodePositionGroupChild::from_ref(self.append("first"))
  }
  #[inline]
  fn first_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("first:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:not(:first-child) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_first(&self) -> GeneratedModifierNodePositionGroupChild {
    GeneratedModifierNodePositionGroupChild::from_ref(self.append("not-first"))
  }
  #[inline]
  fn not_first_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("not-first:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:last {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn last(&self) -> GeneratedModifierNodePositionGroupChild {
    GeneratedModifierNodePositionGroupChild::from_ref(self.append("last"))
  }
  #[inline]
  fn last_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("last:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:not(:last-child) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_last(&self) -> GeneratedModifierNodePositionGroupChild {
    GeneratedModifierNodePositionGroupChild::from_ref(self.append("not-last"))
  }
  #[inline]
  fn not_last_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("not-last:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierNodeOfTypeGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierNodeOfTypeGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierNodeOfTypeGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:first-of-type {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first_of_type(&self) -> GeneratedModifierNodeOfTypeGroupChild {
    GeneratedModifierNodeOfTypeGroupChild::from_ref(self.append("first-of-type"))
  }
  #[inline]
  fn first_of_type_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "first-of-type:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &:not(:first-of-type) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_first_of_type(&self) -> GeneratedModifierNodeOfTypeGroupChild {
    GeneratedModifierNodeOfTypeGroupChild::from_ref(self.append("not-first-of-type"))
  }
  #[inline]
  fn not_first_of_type_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "not-first-of-type:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &:last-of-type {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn last_of_type(&self) -> GeneratedModifierNodeOfTypeGroupChild {
    GeneratedModifierNodeOfTypeGroupChild::from_ref(self.append("last-of-type"))
  }
  #[inline]
  fn last_of_type_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "last-of-type:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &:not(:last-of-type) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_last_of_type(&self) -> GeneratedModifierNodeOfTypeGroupChild {
    GeneratedModifierNodeOfTypeGroupChild::from_ref(self.append("not-last-of-type"))
  }
  #[inline]
  fn not_last_of_type_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "not-last-of-type:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierVisitedGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierVisitedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierVisitedGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:visited {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn visited(&self) -> GeneratedModifierVisitedGroupChild {
    GeneratedModifierVisitedGroupChild::from_ref(self.append("visited"))
  }
  #[inline]
  fn visited_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("visited:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierOptionalGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierOptionalGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierOptionalGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:optional {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn optional(&self) -> GeneratedModifierOptionalGroupChild {
    GeneratedModifierOptionalGroupChild::from_ref(self.append("optional"))
  }
  #[inline]
  fn optional_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("optional:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierAriaChild(String);
impl GeneratedSkribbleValue for GeneratedModifierAriaChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierAria: GeneratedSkribbleValue {
  /// ```css
  /// &[aria-current=page] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_current_page(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-current-page"))
  }
  #[inline]
  fn aria_current_page_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-current-page:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-current=location] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_current_location(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-current-location"))
  }
  #[inline]
  fn aria_current_location_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-current-location:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-current=date] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_current_date(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-current-date"))
  }
  #[inline]
  fn aria_current_date_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-current-date:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-current=time] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_current_time(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-current-time"))
  }
  #[inline]
  fn aria_current_time_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-current-time:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-current=step] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_current_step(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-current-step"))
  }
  #[inline]
  fn aria_current_step_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-current-step:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-disabled=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_disabled(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-disabled"))
  }
  #[inline]
  fn aria_disabled_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-disabled:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-disabled=false] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_not_disabled(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-not-disabled"))
  }
  #[inline]
  fn aria_not_disabled_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-not-disabled:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-readonly=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_readonly(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-readonly"))
  }
  #[inline]
  fn aria_readonly_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-readonly:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-readonly=false] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_not_readonly(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-not-readonly"))
  }
  #[inline]
  fn aria_not_readonly_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-not-readonly:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-expanded=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_expanded(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-expanded"))
  }
  #[inline]
  fn aria_expanded_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-expanded:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-checked=mixed] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_indeterminate(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-indeterminate"))
  }
  #[inline]
  fn aria_indeterminate_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-indeterminate:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-checked=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_checked(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-checked"))
  }
  #[inline]
  fn aria_checked_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-checked:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-checked=false] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_unchecked(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-unchecked"))
  }
  #[inline]
  fn aria_unchecked_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-unchecked:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-grabbed=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_grabbed(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-grabbed"))
  }
  #[inline]
  fn aria_grabbed_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-grabbed:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-pressed=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_pressed(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-pressed"))
  }
  #[inline]
  fn aria_pressed_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-pressed:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-invalid=grammar] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_invalid_grammar(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-invalid-grammar"))
  }
  #[inline]
  fn aria_invalid_grammar_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-invalid-grammar:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-invalid=spelling] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_invalid_spelling(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-invalid-spelling"))
  }
  #[inline]
  fn aria_invalid_spelling_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-invalid-spelling:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-invalid=false] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_valid(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-valid"))
  }
  #[inline]
  fn aria_valid_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("aria-valid:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &[aria-invalid=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_invalid(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-invalid"))
  }
  #[inline]
  fn aria_invalid_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-invalid:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// [aria-required=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_required(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-required"))
  }
  #[inline]
  fn aria_required_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-required:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// [aria-required=false] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_not_required(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-not-required"))
  }
  #[inline]
  fn aria_not_required_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-not-required:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-busy=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn loading(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("loading"))
  }
  #[inline]
  fn loading_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("loading:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &[aria-selected=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_selected(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-selected"))
  }
  #[inline]
  fn aria_selected_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-selected:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-hidden=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_hidden(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-hidden"))
  }
  #[inline]
  fn aria_hidden_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "aria-hidden:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &[aria-live=polite] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn aria_live(&self) -> GeneratedModifierAriaChild {
    GeneratedModifierAriaChild::from_ref(self.append("aria-live"))
  }
  #[inline]
  fn aria_live_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("aria-live:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierFullScreenGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierFullScreenGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierFullScreenGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:fullscreen {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn full_screen(&self) -> GeneratedModifierFullScreenGroupChild {
    GeneratedModifierFullScreenGroupChild::from_ref(self.append("full-screen"))
  }
  #[inline]
  fn full_screen_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "full-screen:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierTargetGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierTargetGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierTargetGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:target {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn target(&self) -> GeneratedModifierTargetGroupChild {
    GeneratedModifierTargetGroupChild::from_ref(self.append("target"))
  }
  #[inline]
  fn target_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("target:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierPlaceholderShownGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierPlaceholderShownGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierPlaceholderShownGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:placeholder-shown {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn placeholder_shown(&self) -> GeneratedModifierPlaceholderShownGroupChild {
    GeneratedModifierPlaceholderShownGroupChild::from_ref(self.append("placeholder-shown"))
  }
  #[inline]
  fn placeholder_shown_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "placeholder-shown:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierRequiredGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierRequiredGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierRequiredGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:required {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn required(&self) -> GeneratedModifierRequiredGroupChild {
    GeneratedModifierRequiredGroupChild::from_ref(self.append("required"))
  }
  #[inline]
  fn required_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("required:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:not(:required) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_required(&self) -> GeneratedModifierRequiredGroupChild {
    GeneratedModifierRequiredGroupChild::from_ref(self.append("not-required"))
  }
  #[inline]
  fn not_required_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "not-required:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierDefaultGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierDefaultGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierDefaultGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:default {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn default(&self) -> GeneratedModifierDefaultGroupChild {
    GeneratedModifierDefaultGroupChild::from_ref(self.append("default"))
  }
  #[inline]
  fn default_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("default:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierOnlyChildGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierOnlyChildGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierOnlyChildGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:only-child {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn only_child(&self) -> GeneratedModifierOnlyChildGroupChild {
    GeneratedModifierOnlyChildGroupChild::from_ref(self.append("only-child"))
  }
  #[inline]
  fn only_child_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("only-child:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &:not(:only-child) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_only_child(&self) -> GeneratedModifierOnlyChildGroupChild {
    GeneratedModifierOnlyChildGroupChild::from_ref(self.append("not-only-child"))
  }
  #[inline]
  fn not_only_child_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "not-only-child:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierOnlyGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierOnlyGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierOnlyGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:only-of-type {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn only_of_type(&self) -> GeneratedModifierOnlyGroupChild {
    GeneratedModifierOnlyGroupChild::from_ref(self.append("only-of-type"))
  }
  #[inline]
  fn only_of_type_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "only-of-type:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &:not(:only-of-type) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_only_of_type(&self) -> GeneratedModifierOnlyGroupChild {
    GeneratedModifierOnlyGroupChild::from_ref(self.append("not-only-of-type"))
  }
  #[inline]
  fn not_only_of_type_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "not-only-of-type:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
}
pub struct GeneratedModifierRootGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierRootGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierRootGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:root {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn root(&self) -> GeneratedModifierRootGroupChild {
    GeneratedModifierRootGroupChild::from_ref(self.append("root"))
  }
  #[inline]
  fn root_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("root:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierLinkGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierLinkGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierLinkGroup: GeneratedSkribbleValue {
  /// ```css
  /// &:link {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn link(&self) -> GeneratedModifierLinkGroupChild {
    GeneratedModifierLinkGroupChild::from_ref(self.append("link"))
  }
  #[inline]
  fn link_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("link:[{}={}]", property.trim(), value.trim()))
  }
}
pub struct GeneratedModifierPseudoGroupChild(String);
impl GeneratedSkribbleValue for GeneratedModifierPseudoGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedModifierPseudoGroup: GeneratedSkribbleValue {
  /// ```css
  /// &::placeholder {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn placeholder(&self) -> GeneratedModifierPseudoGroupChild {
    GeneratedModifierPseudoGroupChild::from_ref(self.append("placeholder"))
  }
  #[inline]
  fn placeholder_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "placeholder:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &::selection {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn selection(&self) -> GeneratedModifierPseudoGroupChild {
    GeneratedModifierPseudoGroupChild::from_ref(self.append("selection"))
  }
  #[inline]
  fn selection_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("selection:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &::first-letter {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first_letter(&self) -> GeneratedModifierPseudoGroupChild {
    GeneratedModifierPseudoGroupChild::from_ref(self.append("first-letter"))
  }
  #[inline]
  fn first_letter_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!(
      "first-letter:[{}={}]",
      property.trim(),
      value.trim()
    ))
  }
  /// ```css
  /// &::first-line {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first_line(&self) -> GeneratedModifierPseudoGroupChild {
    GeneratedModifierPseudoGroupChild::from_ref(self.append("first-line"))
  }
  #[inline]
  fn first_line_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("first-line:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &::before {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn before(&self) -> GeneratedModifierPseudoGroupChild {
    GeneratedModifierPseudoGroupChild::from_ref(self.append("before"))
  }
  #[inline]
  fn before_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("before:[{}={}]", property.trim(), value.trim()))
  }
  /// ```css
  /// &::after {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn after(&self) -> GeneratedModifierPseudoGroupChild {
    GeneratedModifierPseudoGroupChild::from_ref(self.append("after"))
  }
  #[inline]
  fn after_(&self, property: &'static str, value: &'static str) -> String {
    self.append(format!("after:[{}={}]", property.trim(), value.trim()))
  }
}
pub trait GeneratedKeyframeSet: GeneratedSkribbleValue {
  /// Manages the keyframes for the entry animation
  ///
  /// ```css
  /// @keyframes in {
  ///   from {
  ///     opacity: var(--sk-enter-opacity, 1);
  ///     transform: translate3d(var(--sk-enter-tx, 0), var(--sk-enter-ty, 0), 0) scale3d(var(--sk-enter-sx, 1), var(--sk-enter-sy, 1), 1) rotate(var(--sk-enter-rotate, 0deg));
  ///   }
  /// }
  /// ```
  #[inline]
  fn r#in(&self) -> String {
    self.append_value("in")
  }
  /// Manages the keyframes for the exit animation.
  ///
  /// ```css
  /// @keyframes out {
  ///   to {
  ///     opacity: var(--sk-exit-opacity, 1);
  ///     transform: translate3d(var(--sk-exit-tx, 0), var(--sk-exit-ty, 0), 0) scale3d(var(--sk-exit-sx, 1), var(--sk-exit-sy, 1), 1) rotate(var(--sk-exit-rotate, 0deg));
  ///   }
  /// }
  /// ```
  #[inline]
  fn out(&self) -> String {
    self.append_value("out")
  }
  /// Manages the keyframes for the spin animation.
  ///
  /// ```css
  /// @keyframes spin {
  ///   from {
  ///     transform: rotate(0deg);
  ///   }
  ///   to {
  ///     transform: rotate(360deg);
  ///   }
  /// }
  /// ```
  #[inline]
  fn spin(&self) -> String {
    self.append_value("spin")
  }
  /// Manages the keyframes for the ping animation.
  ///
  /// ```css
  /// @keyframes ping {
  ///   75%, 100% {
  ///     transform: scale(2);
  ///     opacity: 0;
  ///   }
  /// }
  /// ```
  #[inline]
  fn ping(&self) -> String {
    self.append_value("ping")
  }
  /// Manages the keyframes for the pulse animation.
  ///
  /// ```css
  /// @keyframes pulse {
  ///   0%, 100% {
  ///     opacity: 1;
  ///   }
  ///   50% {
  ///     opacity: 0.5;
  ///   }
  /// }
  /// ```
  #[inline]
  fn pulse(&self) -> String {
    self.append_value("pulse")
  }
  /// Manages the keyframes for the bounce animation.
  ///
  /// ```css
  /// @keyframes bounce {
  ///   0%, 100% {
  ///     transform: translateY(-25%);
  ///     animationTimingFunction: cubic-bezier(0.8, 0, 1, 1);
  ///   }
  ///   50% {
  ///     transform: translateY(0);
  ///     animationTimingFunction: cubic-bezier(0, 0, 0.2, 1);
  ///   }
  /// }
  /// ```
  #[inline]
  fn bounce(&self) -> String {
    self.append_value("bounce")
  }
}
pub trait GeneratedColorSet: GeneratedSkribbleValue {
  /// The primary color. Useful for primary buttons.
  ///
  /// ```css
  /// @property --sk-p {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(258.89362 94.37751% 51.17647%);
  /// }
  /// ```
  #[inline]
  fn primary(&self) -> String {
    self.append_value("primary")
  }
  /// The primary content color
  ///
  /// ```css
  /// @property --sk-pc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn primary_content(&self) -> String {
    self.append_value("primary-content")
  }
  /// The secondary color. Useful for secondary buttons.
  ///
  /// ```css
  /// @property --sk-s {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(314 100% 47.058823%);
  /// }
  /// ```
  #[inline]
  fn secondary(&self) -> String {
    self.append_value("secondary")
  }
  /// The secondary content color. Useful for text within secondary buttons.
  ///
  /// ```css
  /// @property --sk-sc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn secondary_content(&self) -> String {
    self.append_value("secondary-content")
  }
  /// Color for accents.
  ///
  /// ```css
  /// @property --sk-a {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(174 60.000008% 50.980396%);
  /// }
  /// ```
  #[inline]
  fn accent(&self) -> String {
    self.append_value("accent")
  }
  /// Color for content within accents.
  ///
  /// ```css
  /// @property --sk-ac {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(174.70587 43.589737% 15.294118%);
  /// }
  /// ```
  #[inline]
  fn accent_content(&self) -> String {
    self.append_value("accent-content")
  }
  /// The neutral color.
  ///
  /// ```css
  /// @property --sk-n {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(218.99998 14.084508% 27.843138%);
  /// }
  /// ```
  #[inline]
  fn neutral(&self) -> String {
    self.append_value("neutral")
  }
  /// The neutral content color.
  ///
  /// ```css
  /// @property --sk-nc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn neutral_content(&self) -> String {
    self.append_value("neutral-content")
  }
  /// The base color.
  ///
  /// ```css
  /// @property --sk-b1 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn base100(&self) -> String {
    self.append_value("base100")
  }
  /// The secondary base color.
  ///
  /// ```css
  /// @property --sk-b2 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 94.90196%);
  /// }
  /// ```
  #[inline]
  fn base200(&self) -> String {
    self.append_value("base200")
  }
  /// The tertiary base color.
  ///
  /// ```css
  /// @property --sk-b3 {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(180 1.9607836% 90%);
  /// }
  /// ```
  #[inline]
  fn base300(&self) -> String {
    self.append_value("base300")
  }
  /// The base content color. This is useful for text.
  ///
  /// ```css
  /// @property --sk-bc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(215 27.906975% 16.862745%);
  /// }
  /// ```
  #[inline]
  fn base_content(&self) -> String {
    self.append_value("base-content")
  }
  /// The info color. Useful for info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-in {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(212.34569 100% 47.64706%);
  /// }
  /// ```
  #[inline]
  fn info(&self) -> String {
    self.append_value("info")
  }
  /// The info content color. Useful for text within info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-inc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn info_content(&self) -> String {
    self.append_value("info-content")
  }
  /// The success color. Useful for success buttons and alerts.
  ///
  /// ```css
  /// @property --sk-su {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(136.8421 72.1519% 46.47059%);
  /// }
  /// ```
  #[inline]
  fn success(&self) -> String {
    self.append_value("success")
  }
  /// The success content color. Useful for text within success buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-suc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn success_content(&self) -> String {
    self.append_value("success-content")
  }
  /// The warning color. Useful for warning buttons and alerts.
  ///
  /// ```css
  /// @property --sk-wa {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(4.5614033 100% 66.47059%);
  /// }
  /// ```
  #[inline]
  fn warning(&self) -> String {
    self.append_value("warning")
  }
  /// The warning content color. Useful for text within warning buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-wac {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn warning_content(&self) -> String {
    self.append_value("warning-content")
  }
  /// The error color. Useful for error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-er {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(325.05154 77.600006% 49.019608%);
  /// }
  /// ```
  #[inline]
  fn error(&self) -> String {
    self.append_value("error")
  }
  /// The error content color. Useful for text within error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-erc {
  ///   syntax: "<color>";
  ///   inherits: true;
  ///   initial-value: hsl(0 0% 100%);
  /// }
  /// ```
  #[inline]
  fn error_content(&self) -> String {
    self.append_value("error-content")
  }
  #[inline]
  fn inherit(&self) -> String {
    self.append_value("inherit")
  }
  #[inline]
  fn current(&self) -> String {
    self.append_value("current")
  }
  #[inline]
  fn transparent(&self) -> String {
    self.append_value("transparent")
  }
  #[inline]
  fn black(&self) -> String {
    self.append_value("black")
  }
  #[inline]
  fn white(&self) -> String {
    self.append_value("white")
  }
  #[inline]
  fn slate50(&self) -> String {
    self.append_value("slate50")
  }
  #[inline]
  fn slate100(&self) -> String {
    self.append_value("slate100")
  }
  #[inline]
  fn slate200(&self) -> String {
    self.append_value("slate200")
  }
  #[inline]
  fn slate300(&self) -> String {
    self.append_value("slate300")
  }
  #[inline]
  fn slate400(&self) -> String {
    self.append_value("slate400")
  }
  #[inline]
  fn slate500(&self) -> String {
    self.append_value("slate500")
  }
  #[inline]
  fn slate600(&self) -> String {
    self.append_value("slate600")
  }
  #[inline]
  fn slate700(&self) -> String {
    self.append_value("slate700")
  }
  #[inline]
  fn slate800(&self) -> String {
    self.append_value("slate800")
  }
  #[inline]
  fn slate900(&self) -> String {
    self.append_value("slate900")
  }
  #[inline]
  fn slate950(&self) -> String {
    self.append_value("slate950")
  }
  #[inline]
  fn gray50(&self) -> String {
    self.append_value("gray50")
  }
  #[inline]
  fn gray100(&self) -> String {
    self.append_value("gray100")
  }
  #[inline]
  fn gray200(&self) -> String {
    self.append_value("gray200")
  }
  #[inline]
  fn gray300(&self) -> String {
    self.append_value("gray300")
  }
  #[inline]
  fn gray400(&self) -> String {
    self.append_value("gray400")
  }
  #[inline]
  fn gray500(&self) -> String {
    self.append_value("gray500")
  }
  #[inline]
  fn gray600(&self) -> String {
    self.append_value("gray600")
  }
  #[inline]
  fn gray700(&self) -> String {
    self.append_value("gray700")
  }
  #[inline]
  fn gray800(&self) -> String {
    self.append_value("gray800")
  }
  #[inline]
  fn gray900(&self) -> String {
    self.append_value("gray900")
  }
  #[inline]
  fn gray950(&self) -> String {
    self.append_value("gray950")
  }
  #[inline]
  fn zinc50(&self) -> String {
    self.append_value("zinc50")
  }
  #[inline]
  fn zinc100(&self) -> String {
    self.append_value("zinc100")
  }
  #[inline]
  fn zinc200(&self) -> String {
    self.append_value("zinc200")
  }
  #[inline]
  fn zinc300(&self) -> String {
    self.append_value("zinc300")
  }
  #[inline]
  fn zinc400(&self) -> String {
    self.append_value("zinc400")
  }
  #[inline]
  fn zinc500(&self) -> String {
    self.append_value("zinc500")
  }
  #[inline]
  fn zinc600(&self) -> String {
    self.append_value("zinc600")
  }
  #[inline]
  fn zinc700(&self) -> String {
    self.append_value("zinc700")
  }
  #[inline]
  fn zinc800(&self) -> String {
    self.append_value("zinc800")
  }
  #[inline]
  fn zinc900(&self) -> String {
    self.append_value("zinc900")
  }
  #[inline]
  fn zinc950(&self) -> String {
    self.append_value("zinc950")
  }
  #[inline]
  fn neutral50(&self) -> String {
    self.append_value("neutral50")
  }
  #[inline]
  fn neutral100(&self) -> String {
    self.append_value("neutral100")
  }
  #[inline]
  fn neutral200(&self) -> String {
    self.append_value("neutral200")
  }
  #[inline]
  fn neutral300(&self) -> String {
    self.append_value("neutral300")
  }
  #[inline]
  fn neutral400(&self) -> String {
    self.append_value("neutral400")
  }
  #[inline]
  fn neutral500(&self) -> String {
    self.append_value("neutral500")
  }
  #[inline]
  fn neutral600(&self) -> String {
    self.append_value("neutral600")
  }
  #[inline]
  fn neutral700(&self) -> String {
    self.append_value("neutral700")
  }
  #[inline]
  fn neutral800(&self) -> String {
    self.append_value("neutral800")
  }
  #[inline]
  fn neutral900(&self) -> String {
    self.append_value("neutral900")
  }
  #[inline]
  fn neutral950(&self) -> String {
    self.append_value("neutral950")
  }
  #[inline]
  fn stone50(&self) -> String {
    self.append_value("stone50")
  }
  #[inline]
  fn stone100(&self) -> String {
    self.append_value("stone100")
  }
  #[inline]
  fn stone200(&self) -> String {
    self.append_value("stone200")
  }
  #[inline]
  fn stone300(&self) -> String {
    self.append_value("stone300")
  }
  #[inline]
  fn stone400(&self) -> String {
    self.append_value("stone400")
  }
  #[inline]
  fn stone500(&self) -> String {
    self.append_value("stone500")
  }
  #[inline]
  fn stone600(&self) -> String {
    self.append_value("stone600")
  }
  #[inline]
  fn stone700(&self) -> String {
    self.append_value("stone700")
  }
  #[inline]
  fn stone800(&self) -> String {
    self.append_value("stone800")
  }
  #[inline]
  fn stone900(&self) -> String {
    self.append_value("stone900")
  }
  #[inline]
  fn stone950(&self) -> String {
    self.append_value("stone950")
  }
  #[inline]
  fn red50(&self) -> String {
    self.append_value("red50")
  }
  #[inline]
  fn red100(&self) -> String {
    self.append_value("red100")
  }
  #[inline]
  fn red200(&self) -> String {
    self.append_value("red200")
  }
  #[inline]
  fn red300(&self) -> String {
    self.append_value("red300")
  }
  #[inline]
  fn red400(&self) -> String {
    self.append_value("red400")
  }
  #[inline]
  fn red500(&self) -> String {
    self.append_value("red500")
  }
  #[inline]
  fn red600(&self) -> String {
    self.append_value("red600")
  }
  #[inline]
  fn red700(&self) -> String {
    self.append_value("red700")
  }
  #[inline]
  fn red800(&self) -> String {
    self.append_value("red800")
  }
  #[inline]
  fn red900(&self) -> String {
    self.append_value("red900")
  }
  #[inline]
  fn red950(&self) -> String {
    self.append_value("red950")
  }
  #[inline]
  fn orange50(&self) -> String {
    self.append_value("orange50")
  }
  #[inline]
  fn orange100(&self) -> String {
    self.append_value("orange100")
  }
  #[inline]
  fn orange200(&self) -> String {
    self.append_value("orange200")
  }
  #[inline]
  fn orange300(&self) -> String {
    self.append_value("orange300")
  }
  #[inline]
  fn orange400(&self) -> String {
    self.append_value("orange400")
  }
  #[inline]
  fn orange500(&self) -> String {
    self.append_value("orange500")
  }
  #[inline]
  fn orange600(&self) -> String {
    self.append_value("orange600")
  }
  #[inline]
  fn orange700(&self) -> String {
    self.append_value("orange700")
  }
  #[inline]
  fn orange800(&self) -> String {
    self.append_value("orange800")
  }
  #[inline]
  fn orange900(&self) -> String {
    self.append_value("orange900")
  }
  #[inline]
  fn orange950(&self) -> String {
    self.append_value("orange950")
  }
  #[inline]
  fn amber50(&self) -> String {
    self.append_value("amber50")
  }
  #[inline]
  fn amber100(&self) -> String {
    self.append_value("amber100")
  }
  #[inline]
  fn amber200(&self) -> String {
    self.append_value("amber200")
  }
  #[inline]
  fn amber300(&self) -> String {
    self.append_value("amber300")
  }
  #[inline]
  fn amber400(&self) -> String {
    self.append_value("amber400")
  }
  #[inline]
  fn amber500(&self) -> String {
    self.append_value("amber500")
  }
  #[inline]
  fn amber600(&self) -> String {
    self.append_value("amber600")
  }
  #[inline]
  fn amber700(&self) -> String {
    self.append_value("amber700")
  }
  #[inline]
  fn amber800(&self) -> String {
    self.append_value("amber800")
  }
  #[inline]
  fn amber900(&self) -> String {
    self.append_value("amber900")
  }
  #[inline]
  fn amber950(&self) -> String {
    self.append_value("amber950")
  }
  #[inline]
  fn yellow50(&self) -> String {
    self.append_value("yellow50")
  }
  #[inline]
  fn yellow100(&self) -> String {
    self.append_value("yellow100")
  }
  #[inline]
  fn yellow200(&self) -> String {
    self.append_value("yellow200")
  }
  #[inline]
  fn yellow300(&self) -> String {
    self.append_value("yellow300")
  }
  #[inline]
  fn yellow400(&self) -> String {
    self.append_value("yellow400")
  }
  #[inline]
  fn yellow500(&self) -> String {
    self.append_value("yellow500")
  }
  #[inline]
  fn yellow600(&self) -> String {
    self.append_value("yellow600")
  }
  #[inline]
  fn yellow700(&self) -> String {
    self.append_value("yellow700")
  }
  #[inline]
  fn yellow800(&self) -> String {
    self.append_value("yellow800")
  }
  #[inline]
  fn yellow900(&self) -> String {
    self.append_value("yellow900")
  }
  #[inline]
  fn yellow950(&self) -> String {
    self.append_value("yellow950")
  }
  #[inline]
  fn lime50(&self) -> String {
    self.append_value("lime50")
  }
  #[inline]
  fn lime100(&self) -> String {
    self.append_value("lime100")
  }
  #[inline]
  fn lime200(&self) -> String {
    self.append_value("lime200")
  }
  #[inline]
  fn lime300(&self) -> String {
    self.append_value("lime300")
  }
  #[inline]
  fn lime400(&self) -> String {
    self.append_value("lime400")
  }
  #[inline]
  fn lime500(&self) -> String {
    self.append_value("lime500")
  }
  #[inline]
  fn lime600(&self) -> String {
    self.append_value("lime600")
  }
  #[inline]
  fn lime700(&self) -> String {
    self.append_value("lime700")
  }
  #[inline]
  fn lime800(&self) -> String {
    self.append_value("lime800")
  }
  #[inline]
  fn lime900(&self) -> String {
    self.append_value("lime900")
  }
  #[inline]
  fn lime950(&self) -> String {
    self.append_value("lime950")
  }
  #[inline]
  fn green50(&self) -> String {
    self.append_value("green50")
  }
  #[inline]
  fn green100(&self) -> String {
    self.append_value("green100")
  }
  #[inline]
  fn green200(&self) -> String {
    self.append_value("green200")
  }
  #[inline]
  fn green300(&self) -> String {
    self.append_value("green300")
  }
  #[inline]
  fn green400(&self) -> String {
    self.append_value("green400")
  }
  #[inline]
  fn green500(&self) -> String {
    self.append_value("green500")
  }
  #[inline]
  fn green600(&self) -> String {
    self.append_value("green600")
  }
  #[inline]
  fn green700(&self) -> String {
    self.append_value("green700")
  }
  #[inline]
  fn green800(&self) -> String {
    self.append_value("green800")
  }
  #[inline]
  fn green900(&self) -> String {
    self.append_value("green900")
  }
  #[inline]
  fn green950(&self) -> String {
    self.append_value("green950")
  }
  #[inline]
  fn emerald50(&self) -> String {
    self.append_value("emerald50")
  }
  #[inline]
  fn emerald100(&self) -> String {
    self.append_value("emerald100")
  }
  #[inline]
  fn emerald200(&self) -> String {
    self.append_value("emerald200")
  }
  #[inline]
  fn emerald300(&self) -> String {
    self.append_value("emerald300")
  }
  #[inline]
  fn emerald400(&self) -> String {
    self.append_value("emerald400")
  }
  #[inline]
  fn emerald500(&self) -> String {
    self.append_value("emerald500")
  }
  #[inline]
  fn emerald600(&self) -> String {
    self.append_value("emerald600")
  }
  #[inline]
  fn emerald700(&self) -> String {
    self.append_value("emerald700")
  }
  #[inline]
  fn emerald800(&self) -> String {
    self.append_value("emerald800")
  }
  #[inline]
  fn emerald900(&self) -> String {
    self.append_value("emerald900")
  }
  #[inline]
  fn emerald950(&self) -> String {
    self.append_value("emerald950")
  }
  #[inline]
  fn teal50(&self) -> String {
    self.append_value("teal50")
  }
  #[inline]
  fn teal100(&self) -> String {
    self.append_value("teal100")
  }
  #[inline]
  fn teal200(&self) -> String {
    self.append_value("teal200")
  }
  #[inline]
  fn teal300(&self) -> String {
    self.append_value("teal300")
  }
  #[inline]
  fn teal400(&self) -> String {
    self.append_value("teal400")
  }
  #[inline]
  fn teal500(&self) -> String {
    self.append_value("teal500")
  }
  #[inline]
  fn teal600(&self) -> String {
    self.append_value("teal600")
  }
  #[inline]
  fn teal700(&self) -> String {
    self.append_value("teal700")
  }
  #[inline]
  fn teal800(&self) -> String {
    self.append_value("teal800")
  }
  #[inline]
  fn teal900(&self) -> String {
    self.append_value("teal900")
  }
  #[inline]
  fn teal950(&self) -> String {
    self.append_value("teal950")
  }
  #[inline]
  fn cyan50(&self) -> String {
    self.append_value("cyan50")
  }
  #[inline]
  fn cyan100(&self) -> String {
    self.append_value("cyan100")
  }
  #[inline]
  fn cyan200(&self) -> String {
    self.append_value("cyan200")
  }
  #[inline]
  fn cyan300(&self) -> String {
    self.append_value("cyan300")
  }
  #[inline]
  fn cyan400(&self) -> String {
    self.append_value("cyan400")
  }
  #[inline]
  fn cyan500(&self) -> String {
    self.append_value("cyan500")
  }
  #[inline]
  fn cyan600(&self) -> String {
    self.append_value("cyan600")
  }
  #[inline]
  fn cyan700(&self) -> String {
    self.append_value("cyan700")
  }
  #[inline]
  fn cyan800(&self) -> String {
    self.append_value("cyan800")
  }
  #[inline]
  fn cyan900(&self) -> String {
    self.append_value("cyan900")
  }
  #[inline]
  fn cyan950(&self) -> String {
    self.append_value("cyan950")
  }
  #[inline]
  fn sky50(&self) -> String {
    self.append_value("sky50")
  }
  #[inline]
  fn sky100(&self) -> String {
    self.append_value("sky100")
  }
  #[inline]
  fn sky200(&self) -> String {
    self.append_value("sky200")
  }
  #[inline]
  fn sky300(&self) -> String {
    self.append_value("sky300")
  }
  #[inline]
  fn sky400(&self) -> String {
    self.append_value("sky400")
  }
  #[inline]
  fn sky500(&self) -> String {
    self.append_value("sky500")
  }
  #[inline]
  fn sky600(&self) -> String {
    self.append_value("sky600")
  }
  #[inline]
  fn sky700(&self) -> String {
    self.append_value("sky700")
  }
  #[inline]
  fn sky800(&self) -> String {
    self.append_value("sky800")
  }
  #[inline]
  fn sky900(&self) -> String {
    self.append_value("sky900")
  }
  #[inline]
  fn sky950(&self) -> String {
    self.append_value("sky950")
  }
  #[inline]
  fn blue50(&self) -> String {
    self.append_value("blue50")
  }
  #[inline]
  fn blue100(&self) -> String {
    self.append_value("blue100")
  }
  #[inline]
  fn blue200(&self) -> String {
    self.append_value("blue200")
  }
  #[inline]
  fn blue300(&self) -> String {
    self.append_value("blue300")
  }
  #[inline]
  fn blue400(&self) -> String {
    self.append_value("blue400")
  }
  #[inline]
  fn blue500(&self) -> String {
    self.append_value("blue500")
  }
  #[inline]
  fn blue600(&self) -> String {
    self.append_value("blue600")
  }
  #[inline]
  fn blue700(&self) -> String {
    self.append_value("blue700")
  }
  #[inline]
  fn blue800(&self) -> String {
    self.append_value("blue800")
  }
  #[inline]
  fn blue900(&self) -> String {
    self.append_value("blue900")
  }
  #[inline]
  fn blue950(&self) -> String {
    self.append_value("blue950")
  }
  #[inline]
  fn indigo50(&self) -> String {
    self.append_value("indigo50")
  }
  #[inline]
  fn indigo100(&self) -> String {
    self.append_value("indigo100")
  }
  #[inline]
  fn indigo200(&self) -> String {
    self.append_value("indigo200")
  }
  #[inline]
  fn indigo300(&self) -> String {
    self.append_value("indigo300")
  }
  #[inline]
  fn indigo400(&self) -> String {
    self.append_value("indigo400")
  }
  #[inline]
  fn indigo500(&self) -> String {
    self.append_value("indigo500")
  }
  #[inline]
  fn indigo600(&self) -> String {
    self.append_value("indigo600")
  }
  #[inline]
  fn indigo700(&self) -> String {
    self.append_value("indigo700")
  }
  #[inline]
  fn indigo800(&self) -> String {
    self.append_value("indigo800")
  }
  #[inline]
  fn indigo900(&self) -> String {
    self.append_value("indigo900")
  }
  #[inline]
  fn indigo950(&self) -> String {
    self.append_value("indigo950")
  }
  #[inline]
  fn violet50(&self) -> String {
    self.append_value("violet50")
  }
  #[inline]
  fn violet100(&self) -> String {
    self.append_value("violet100")
  }
  #[inline]
  fn violet200(&self) -> String {
    self.append_value("violet200")
  }
  #[inline]
  fn violet300(&self) -> String {
    self.append_value("violet300")
  }
  #[inline]
  fn violet400(&self) -> String {
    self.append_value("violet400")
  }
  #[inline]
  fn violet500(&self) -> String {
    self.append_value("violet500")
  }
  #[inline]
  fn violet600(&self) -> String {
    self.append_value("violet600")
  }
  #[inline]
  fn violet700(&self) -> String {
    self.append_value("violet700")
  }
  #[inline]
  fn violet800(&self) -> String {
    self.append_value("violet800")
  }
  #[inline]
  fn violet900(&self) -> String {
    self.append_value("violet900")
  }
  #[inline]
  fn violet950(&self) -> String {
    self.append_value("violet950")
  }
  #[inline]
  fn purple50(&self) -> String {
    self.append_value("purple50")
  }
  #[inline]
  fn purple100(&self) -> String {
    self.append_value("purple100")
  }
  #[inline]
  fn purple200(&self) -> String {
    self.append_value("purple200")
  }
  #[inline]
  fn purple300(&self) -> String {
    self.append_value("purple300")
  }
  #[inline]
  fn purple400(&self) -> String {
    self.append_value("purple400")
  }
  #[inline]
  fn purple500(&self) -> String {
    self.append_value("purple500")
  }
  #[inline]
  fn purple600(&self) -> String {
    self.append_value("purple600")
  }
  #[inline]
  fn purple700(&self) -> String {
    self.append_value("purple700")
  }
  #[inline]
  fn purple800(&self) -> String {
    self.append_value("purple800")
  }
  #[inline]
  fn purple900(&self) -> String {
    self.append_value("purple900")
  }
  #[inline]
  fn purple950(&self) -> String {
    self.append_value("purple950")
  }
  #[inline]
  fn fuchsia50(&self) -> String {
    self.append_value("fuchsia50")
  }
  #[inline]
  fn fuchsia100(&self) -> String {
    self.append_value("fuchsia100")
  }
  #[inline]
  fn fuchsia200(&self) -> String {
    self.append_value("fuchsia200")
  }
  #[inline]
  fn fuchsia300(&self) -> String {
    self.append_value("fuchsia300")
  }
  #[inline]
  fn fuchsia400(&self) -> String {
    self.append_value("fuchsia400")
  }
  #[inline]
  fn fuchsia500(&self) -> String {
    self.append_value("fuchsia500")
  }
  #[inline]
  fn fuchsia600(&self) -> String {
    self.append_value("fuchsia600")
  }
  #[inline]
  fn fuchsia700(&self) -> String {
    self.append_value("fuchsia700")
  }
  #[inline]
  fn fuchsia800(&self) -> String {
    self.append_value("fuchsia800")
  }
  #[inline]
  fn fuchsia900(&self) -> String {
    self.append_value("fuchsia900")
  }
  #[inline]
  fn fuchsia950(&self) -> String {
    self.append_value("fuchsia950")
  }
  #[inline]
  fn pink50(&self) -> String {
    self.append_value("pink50")
  }
  #[inline]
  fn pink100(&self) -> String {
    self.append_value("pink100")
  }
  #[inline]
  fn pink200(&self) -> String {
    self.append_value("pink200")
  }
  #[inline]
  fn pink300(&self) -> String {
    self.append_value("pink300")
  }
  #[inline]
  fn pink400(&self) -> String {
    self.append_value("pink400")
  }
  #[inline]
  fn pink500(&self) -> String {
    self.append_value("pink500")
  }
  #[inline]
  fn pink600(&self) -> String {
    self.append_value("pink600")
  }
  #[inline]
  fn pink700(&self) -> String {
    self.append_value("pink700")
  }
  #[inline]
  fn pink800(&self) -> String {
    self.append_value("pink800")
  }
  #[inline]
  fn pink900(&self) -> String {
    self.append_value("pink900")
  }
  #[inline]
  fn pink950(&self) -> String {
    self.append_value("pink950")
  }
  #[inline]
  fn rose50(&self) -> String {
    self.append_value("rose50")
  }
  #[inline]
  fn rose100(&self) -> String {
    self.append_value("rose100")
  }
  #[inline]
  fn rose200(&self) -> String {
    self.append_value("rose200")
  }
  #[inline]
  fn rose300(&self) -> String {
    self.append_value("rose300")
  }
  #[inline]
  fn rose400(&self) -> String {
    self.append_value("rose400")
  }
  #[inline]
  fn rose500(&self) -> String {
    self.append_value("rose500")
  }
  #[inline]
  fn rose600(&self) -> String {
    self.append_value("rose600")
  }
  #[inline]
  fn rose700(&self) -> String {
    self.append_value("rose700")
  }
  #[inline]
  fn rose800(&self) -> String {
    self.append_value("rose800")
  }
  #[inline]
  fn rose900(&self) -> String {
    self.append_value("rose900")
  }
  #[inline]
  fn rose950(&self) -> String {
    self.append_value("rose950")
  }
}
pub struct GeneratedAtomSr(String);
impl GeneratedSkribbleValue for GeneratedAtomSr {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSr: GeneratedSkribbleValue {
  /// ```css
  /// .sr\:\$only {
  ///   position: absolute;
  ///   width: 1px;
  ///   height: 1px;
  ///   padding: 0;
  ///   margin: -1px;
  ///   overflow: hidden;
  ///   clip: rect(0, 0, 0, 0);
  ///   whiteSpace: nowrap;
  ///   borderWidth: 0;
  /// }
  /// ```
  #[inline]
  fn only(&self) -> String {
    self.append_value("only")
  }
  /// ```css
  /// .sr\:\$exclude {
  ///   position: static;
  ///   width: auto;
  ///   height: auto;
  ///   padding: 0;
  ///   margin: 0;
  ///   overflow: visible;
  ///   clip: auto;
  ///   whiteSpace: normal;
  /// }
  /// ```
  #[inline]
  fn exclude(&self) -> String {
    self.append_value("exclude")
  }
}
impl GeneratedValueSetSr for GeneratedAtomSr {}
pub struct GeneratedAtomTransition(String);
impl GeneratedSkribbleValue for GeneratedAtomTransition {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetTransition: GeneratedSkribbleValue {
  /// ```css
  /// .transition\:\$main {
  ///   transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn main(&self) -> String {
    self.append_value("main")
  }
  /// ```css
  /// .transition\:\$none {
  ///   transitionProperty: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
  /// ```css
  /// .transition\:\$all {
  ///   transition-property: all;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn all(&self) -> String {
    self.append_value("all")
  }
  /// ```css
  /// .transition\:\$colors {
  ///   transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn colors(&self) -> String {
    self.append_value("colors")
  }
  /// ```css
  /// .transition\:\$opacity {
  ///   transition-property: opacity;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn opacity(&self) -> String {
    self.append_value("opacity")
  }
  /// ```css
  /// .transition\:\$shadow {
  ///   transition-property: box-shadow;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn shadow(&self) -> String {
    self.append_value("shadow")
  }
  /// ```css
  /// .transition\:\$transform {
  ///   transition-property: transform;
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  ///   transition-duration: var(--default-transition-duration);
  /// }
  /// ```
  #[inline]
  fn transform(&self) -> String {
    self.append_value("transform")
  }
}
impl GeneratedValueSetTransition for GeneratedAtomTransition {}
pub struct GeneratedAtomTransitionProperty(String);
impl GeneratedSkribbleValue for GeneratedAtomTransitionProperty {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetTransitionProperty: GeneratedSkribbleValue {
  /// ```css
  /// .transition-property\:\$most {
  ///   transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  /// }
  /// ```
  #[inline]
  fn most(&self) -> String {
    self.append_value("most")
  }
  /// ```css
  /// .transition-property\:\$none {
  ///   transition-property: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
  /// ```css
  /// .transition-property\:\$all {
  ///   transition-property: all;
  /// }
  /// ```
  #[inline]
  fn all(&self) -> String {
    self.append_value("all")
  }
  /// ```css
  /// .transition-property\:\$colors {
  ///   transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  /// }
  /// ```
  #[inline]
  fn colors(&self) -> String {
    self.append_value("colors")
  }
  /// ```css
  /// .transition-property\:\$opacity {
  ///   transition-property: opacity;
  /// }
  /// ```
  #[inline]
  fn opacity(&self) -> String {
    self.append_value("opacity")
  }
  /// ```css
  /// .transition-property\:\$shadow {
  ///   transition-property: box-shadow;
  /// }
  /// ```
  #[inline]
  fn shadow(&self) -> String {
    self.append_value("shadow")
  }
  /// ```css
  /// .transition-property\:\$transform {
  ///   transition-property: transform;
  /// }
  /// ```
  #[inline]
  fn transform(&self) -> String {
    self.append_value("transform")
  }
}
impl GeneratedValueSetTransitionProperty for GeneratedAtomTransitionProperty {}
pub struct GeneratedAtomDuration(String);
impl GeneratedSkribbleValue for GeneratedAtomDuration {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetDuration: GeneratedSkribbleValue {
  /// ```css
  /// .duration\:\$0 {
  ///   transition-duration: 0ms;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .duration\:\$75 {
  ///   transition-duration: 75ms;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .duration\:\$100 {
  ///   transition-duration: 100ms;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .duration\:\$150 {
  ///   transition-duration: 150ms;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .duration\:\$200 {
  ///   transition-duration: 200ms;
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
  /// ```css
  /// .duration\:\$300 {
  ///   transition-duration: 300ms;
  /// }
  /// ```
  #[inline]
  fn n300(&self) -> String {
    self.append_value("300")
  }
  /// ```css
  /// .duration\:\$500 {
  ///   transition-duration: 500ms;
  /// }
  /// ```
  #[inline]
  fn n500(&self) -> String {
    self.append_value("500")
  }
  /// ```css
  /// .duration\:\$700 {
  ///   transition-duration: 700ms;
  /// }
  /// ```
  #[inline]
  fn n700(&self) -> String {
    self.append_value("700")
  }
  /// ```css
  /// .duration\:\$1000 {
  ///   transition-duration: 1000ms;
  /// }
  /// ```
  #[inline]
  fn n1000(&self) -> String {
    self.append_value("1000")
  }
  /// ```css
  /// .duration\:\$1500 {
  ///   transition-duration: 1500ms;
  /// }
  /// ```
  #[inline]
  fn n1500(&self) -> String {
    self.append_value("1500")
  }
  /// ```css
  /// .duration\:\$2000 {
  ///   transition-duration: 2000ms;
  /// }
  /// ```
  #[inline]
  fn n2000(&self) -> String {
    self.append_value("2000")
  }
}
impl GeneratedValueSetDuration for GeneratedAtomDuration {}
pub struct GeneratedAtomEase(String);
impl GeneratedSkribbleValue for GeneratedAtomEase {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetEase: GeneratedSkribbleValue {
  /// ```css
  /// .ease\:\$linear {
  ///   transition-timing-function: linear;
  /// }
  /// ```
  #[inline]
  fn linear(&self) -> String {
    self.append_value("linear")
  }
  /// ```css
  /// .ease\:\$in {
  ///   transition-timing-function: cubic-bezier(0.4, 0, 1, 1);
  /// }
  /// ```
  #[inline]
  fn r#in(&self) -> String {
    self.append_value("in")
  }
  /// ```css
  /// .ease\:\$out {
  ///   transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn out(&self) -> String {
    self.append_value("out")
  }
  /// ```css
  /// .ease\:\$inOut {
  ///   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn in_out(&self) -> String {
    self.append_value("inOut")
  }
}
impl GeneratedValueSetEase for GeneratedAtomEase {}
pub struct GeneratedAtomDelay(String);
impl GeneratedSkribbleValue for GeneratedAtomDelay {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetDelay: GeneratedSkribbleValue {
  /// ```css
  /// .delay\:\$0 {
  ///   transition-delay: 0ms;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .delay\:\$75 {
  ///   transition-delay: 75ms;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .delay\:\$100 {
  ///   transition-delay: 100ms;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .delay\:\$150 {
  ///   transition-delay: 150ms;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .delay\:\$200 {
  ///   transition-delay: 200ms;
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
  /// ```css
  /// .delay\:\$300 {
  ///   transition-delay: 300ms;
  /// }
  /// ```
  #[inline]
  fn n300(&self) -> String {
    self.append_value("300")
  }
  /// ```css
  /// .delay\:\$500 {
  ///   transition-delay: 500ms;
  /// }
  /// ```
  #[inline]
  fn n500(&self) -> String {
    self.append_value("500")
  }
  /// ```css
  /// .delay\:\$700 {
  ///   transition-delay: 700ms;
  /// }
  /// ```
  #[inline]
  fn n700(&self) -> String {
    self.append_value("700")
  }
  /// ```css
  /// .delay\:\$1000 {
  ///   transition-delay: 1000ms;
  /// }
  /// ```
  #[inline]
  fn n1000(&self) -> String {
    self.append_value("1000")
  }
  /// ```css
  /// .delay\:\$1500 {
  ///   transition-delay: 1500ms;
  /// }
  /// ```
  #[inline]
  fn n1500(&self) -> String {
    self.append_value("1500")
  }
  /// ```css
  /// .delay\:\$2000 {
  ///   transition-delay: 2000ms;
  /// }
  /// ```
  #[inline]
  fn n2000(&self) -> String {
    self.append_value("2000")
  }
}
impl GeneratedValueSetDelay for GeneratedAtomDelay {}
pub struct GeneratedAtomAnimate(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimate {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl GeneratedKeyframeSet for GeneratedAtomAnimate {}
pub struct GeneratedAtomFadeIn(String);
impl GeneratedSkribbleValue for GeneratedAtomFadeIn {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetFadeIn: GeneratedSkribbleValue {
  /// ```css
  /// .fade-in\:\$0 {
  ///   --sk-enter-opacity: 0%;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .fade-in\:\$5 {
  ///   --sk-enter-opacity: 5%;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .fade-in\:\$10 {
  ///   --sk-enter-opacity: 10%;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .fade-in\:\$20 {
  ///   --sk-enter-opacity: 20%;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .fade-in\:\$30 {
  ///   --sk-enter-opacity: 30%;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_value("30")
  }
  /// ```css
  /// .fade-in\:\$40 {
  ///   --sk-enter-opacity: 40%;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .fade-in\:\$50 {
  ///   --sk-enter-opacity: 50%;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .fade-in\:\$60 {
  ///   --sk-enter-opacity: 60%;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .fade-in\:\$70 {
  ///   --sk-enter-opacity: 70%;
  /// }
  /// ```
  #[inline]
  fn n70(&self) -> String {
    self.append_value("70")
  }
  /// ```css
  /// .fade-in\:\$75 {
  ///   --sk-enter-opacity: 75%;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .fade-in\:\$80 {
  ///   --sk-enter-opacity: 80%;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .fade-in\:\$90 {
  ///   --sk-enter-opacity: 90%;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .fade-in\:\$95 {
  ///   --sk-enter-opacity: 95%;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_value("95")
  }
  /// ```css
  /// .fade-in\:\$100 {
  ///   --sk-enter-opacity: 100%;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
}
impl GeneratedValueSetFadeIn for GeneratedAtomFadeIn {}
pub struct GeneratedAtomFadeOut(String);
impl GeneratedSkribbleValue for GeneratedAtomFadeOut {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetFadeOut: GeneratedSkribbleValue {
  /// ```css
  /// .fade-out\:\$0 {
  ///   --sk-exit-opacity: 0%;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .fade-out\:\$5 {
  ///   --sk-exit-opacity: 5%;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .fade-out\:\$10 {
  ///   --sk-exit-opacity: 10%;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .fade-out\:\$20 {
  ///   --sk-exit-opacity: 20%;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .fade-out\:\$30 {
  ///   --sk-exit-opacity: 30%;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_value("30")
  }
  /// ```css
  /// .fade-out\:\$40 {
  ///   --sk-exit-opacity: 40%;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .fade-out\:\$50 {
  ///   --sk-exit-opacity: 50%;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .fade-out\:\$60 {
  ///   --sk-exit-opacity: 60%;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .fade-out\:\$70 {
  ///   --sk-exit-opacity: 70%;
  /// }
  /// ```
  #[inline]
  fn n70(&self) -> String {
    self.append_value("70")
  }
  /// ```css
  /// .fade-out\:\$75 {
  ///   --sk-exit-opacity: 75%;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .fade-out\:\$80 {
  ///   --sk-exit-opacity: 80%;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .fade-out\:\$90 {
  ///   --sk-exit-opacity: 90%;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .fade-out\:\$95 {
  ///   --sk-exit-opacity: 95%;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_value("95")
  }
  /// ```css
  /// .fade-out\:\$100 {
  ///   --sk-exit-opacity: 100%;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
}
impl GeneratedValueSetFadeOut for GeneratedAtomFadeOut {}
pub struct GeneratedAtomSpinIn(String);
impl GeneratedSkribbleValue for GeneratedAtomSpinIn {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSpinIn: GeneratedSkribbleValue {
  /// ```css
  /// .spin-in\:\$0 {
  ///   --sk-enter-rotate: 0deg;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .spin-in\:\$1 {
  ///   --sk-enter-rotate: 1deg;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .spin-in\:\$2 {
  ///   --sk-enter-rotate: 2deg;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .spin-in\:\$3 {
  ///   --sk-enter-rotate: 3deg;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .spin-in\:\$6 {
  ///   --sk-enter-rotate: 6deg;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .spin-in\:\$12 {
  ///   --sk-enter-rotate: 12deg;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .spin-in\:\$30 {
  ///   --sk-enter-rotate: 30deg;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_value("30")
  }
  /// ```css
  /// .spin-in\:\$45 {
  ///   --sk-enter-rotate: 45deg;
  /// }
  /// ```
  #[inline]
  fn n45(&self) -> String {
    self.append_value("45")
  }
  /// ```css
  /// .spin-in\:\$90 {
  ///   --sk-enter-rotate: 90deg;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .spin-in\:\$180 {
  ///   --sk-enter-rotate: 180deg;
  /// }
  /// ```
  #[inline]
  fn n180(&self) -> String {
    self.append_value("180")
  }
}
impl GeneratedValueSetSpinIn for GeneratedAtomSpinIn {}
pub struct GeneratedAtomSpinOut(String);
impl GeneratedSkribbleValue for GeneratedAtomSpinOut {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSpinOut: GeneratedSkribbleValue {
  /// ```css
  /// .spin-out\:\$0 {
  ///   --sk-exit-rotate: 0deg;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .spin-out\:\$1 {
  ///   --sk-exit-rotate: 1deg;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .spin-out\:\$2 {
  ///   --sk-exit-rotate: 2deg;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .spin-out\:\$3 {
  ///   --sk-exit-rotate: 3deg;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .spin-out\:\$6 {
  ///   --sk-exit-rotate: 6deg;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .spin-out\:\$12 {
  ///   --sk-exit-rotate: 12deg;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .spin-out\:\$30 {
  ///   --sk-exit-rotate: 30deg;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_value("30")
  }
  /// ```css
  /// .spin-out\:\$45 {
  ///   --sk-exit-rotate: 45deg;
  /// }
  /// ```
  #[inline]
  fn n45(&self) -> String {
    self.append_value("45")
  }
  /// ```css
  /// .spin-out\:\$90 {
  ///   --sk-exit-rotate: 90deg;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .spin-out\:\$180 {
  ///   --sk-exit-rotate: 180deg;
  /// }
  /// ```
  #[inline]
  fn n180(&self) -> String {
    self.append_value("180")
  }
}
impl GeneratedValueSetSpinOut for GeneratedAtomSpinOut {}
pub struct GeneratedAtomSlideInLeft(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideInLeft {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideInLeft: GeneratedSkribbleValue {
  /// ```css
  /// .slide-in-left\:\$full {
  ///   --sk-enter-tx: -100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .slide-in-left\:\$0 {
  ///   --sk-enter-tx: -0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .slide-in-left\:\$px {
  ///   --sk-enter-tx: -1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .slide-in-left\:\$0\.5 {
  ///   --sk-enter-tx: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .slide-in-left\:\$1 {
  ///   --sk-enter-tx: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .slide-in-left\:\$1\.5 {
  ///   --sk-enter-tx: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .slide-in-left\:\$2 {
  ///   --sk-enter-tx: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .slide-in-left\:\$2\.5 {
  ///   --sk-enter-tx: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .slide-in-left\:\$3 {
  ///   --sk-enter-tx: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .slide-in-left\:\$3\.5 {
  ///   --sk-enter-tx: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .slide-in-left\:\$4 {
  ///   --sk-enter-tx: -1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .slide-in-left\:\$5 {
  ///   --sk-enter-tx: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .slide-in-left\:\$6 {
  ///   --sk-enter-tx: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .slide-in-left\:\$7 {
  ///   --sk-enter-tx: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .slide-in-left\:\$8 {
  ///   --sk-enter-tx: -2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .slide-in-left\:\$9 {
  ///   --sk-enter-tx: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .slide-in-left\:\$10 {
  ///   --sk-enter-tx: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .slide-in-left\:\$11 {
  ///   --sk-enter-tx: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .slide-in-left\:\$12 {
  ///   --sk-enter-tx: -3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .slide-in-left\:\$14 {
  ///   --sk-enter-tx: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .slide-in-left\:\$16 {
  ///   --sk-enter-tx: -4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .slide-in-left\:\$20 {
  ///   --sk-enter-tx: -5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .slide-in-left\:\$24 {
  ///   --sk-enter-tx: -6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .slide-in-left\:\$28 {
  ///   --sk-enter-tx: -7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .slide-in-left\:\$32 {
  ///   --sk-enter-tx: -8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .slide-in-left\:\$36 {
  ///   --sk-enter-tx: -9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .slide-in-left\:\$40 {
  ///   --sk-enter-tx: -10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .slide-in-left\:\$44 {
  ///   --sk-enter-tx: -11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .slide-in-left\:\$48 {
  ///   --sk-enter-tx: -12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .slide-in-left\:\$52 {
  ///   --sk-enter-tx: -13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .slide-in-left\:\$56 {
  ///   --sk-enter-tx: -14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .slide-in-left\:\$60 {
  ///   --sk-enter-tx: -15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .slide-in-left\:\$64 {
  ///   --sk-enter-tx: -16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .slide-in-left\:\$72 {
  ///   --sk-enter-tx: -18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .slide-in-left\:\$80 {
  ///   --sk-enter-tx: -20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .slide-in-left\:\$96 {
  ///   --sk-enter-tx: -24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .slide-in-left\:\$third {
  ///   --sk-enter-tx: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .slide-in-left\:\$twoThirds {
  ///   --sk-enter-tx: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("twoThirds")
  }
  /// ```css
  /// .slide-in-left\:\$quarter {
  ///   --sk-enter-tx: -25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .slide-in-left\:\$half {
  ///   --sk-enter-tx: -50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .slide-in-left\:\$threeQuarters {
  ///   --sk-enter-tx: -75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideInLeft for GeneratedAtomSlideInLeft {}
pub struct GeneratedAtomSlideInRight(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideInRight {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideInRight: GeneratedSkribbleValue {
  /// ```css
  /// .slide-in-right\:\$full {
  ///   --sk-enter-tx: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .slide-in-right\:\$0 {
  ///   --sk-enter-tx: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .slide-in-right\:\$px {
  ///   --sk-enter-tx: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .slide-in-right\:\$0\.5 {
  ///   --sk-enter-tx: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .slide-in-right\:\$1 {
  ///   --sk-enter-tx: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .slide-in-right\:\$1\.5 {
  ///   --sk-enter-tx: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .slide-in-right\:\$2 {
  ///   --sk-enter-tx: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .slide-in-right\:\$2\.5 {
  ///   --sk-enter-tx: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .slide-in-right\:\$3 {
  ///   --sk-enter-tx: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .slide-in-right\:\$3\.5 {
  ///   --sk-enter-tx: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .slide-in-right\:\$4 {
  ///   --sk-enter-tx: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .slide-in-right\:\$5 {
  ///   --sk-enter-tx: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .slide-in-right\:\$6 {
  ///   --sk-enter-tx: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .slide-in-right\:\$7 {
  ///   --sk-enter-tx: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .slide-in-right\:\$8 {
  ///   --sk-enter-tx: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .slide-in-right\:\$9 {
  ///   --sk-enter-tx: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .slide-in-right\:\$10 {
  ///   --sk-enter-tx: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .slide-in-right\:\$11 {
  ///   --sk-enter-tx: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .slide-in-right\:\$12 {
  ///   --sk-enter-tx: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .slide-in-right\:\$14 {
  ///   --sk-enter-tx: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .slide-in-right\:\$16 {
  ///   --sk-enter-tx: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .slide-in-right\:\$20 {
  ///   --sk-enter-tx: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .slide-in-right\:\$24 {
  ///   --sk-enter-tx: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .slide-in-right\:\$28 {
  ///   --sk-enter-tx: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .slide-in-right\:\$32 {
  ///   --sk-enter-tx: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .slide-in-right\:\$36 {
  ///   --sk-enter-tx: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .slide-in-right\:\$40 {
  ///   --sk-enter-tx: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .slide-in-right\:\$44 {
  ///   --sk-enter-tx: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .slide-in-right\:\$48 {
  ///   --sk-enter-tx: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .slide-in-right\:\$52 {
  ///   --sk-enter-tx: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .slide-in-right\:\$56 {
  ///   --sk-enter-tx: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .slide-in-right\:\$60 {
  ///   --sk-enter-tx: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .slide-in-right\:\$64 {
  ///   --sk-enter-tx: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .slide-in-right\:\$72 {
  ///   --sk-enter-tx: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .slide-in-right\:\$80 {
  ///   --sk-enter-tx: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .slide-in-right\:\$96 {
  ///   --sk-enter-tx: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .slide-in-right\:\$third {
  ///   --sk-enter-tx: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .slide-in-right\:\$twoThirds {
  ///   --sk-enter-tx: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("twoThirds")
  }
  /// ```css
  /// .slide-in-right\:\$quarter {
  ///   --sk-enter-tx: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .slide-in-right\:\$half {
  ///   --sk-enter-tx: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .slide-in-right\:\$threeQuarters {
  ///   --sk-enter-tx: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideInRight for GeneratedAtomSlideInRight {}
pub struct GeneratedAtomSlideOutLeft(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideOutLeft {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideOutLeft: GeneratedSkribbleValue {
  /// ```css
  /// .slide-out-left\:\$full {
  ///   --sk-exit-tx: -100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .slide-out-left\:\$0 {
  ///   --sk-exit-tx: -0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .slide-out-left\:\$px {
  ///   --sk-exit-tx: -1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .slide-out-left\:\$0\.5 {
  ///   --sk-exit-tx: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .slide-out-left\:\$1 {
  ///   --sk-exit-tx: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .slide-out-left\:\$1\.5 {
  ///   --sk-exit-tx: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .slide-out-left\:\$2 {
  ///   --sk-exit-tx: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .slide-out-left\:\$2\.5 {
  ///   --sk-exit-tx: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .slide-out-left\:\$3 {
  ///   --sk-exit-tx: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .slide-out-left\:\$3\.5 {
  ///   --sk-exit-tx: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .slide-out-left\:\$4 {
  ///   --sk-exit-tx: -1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .slide-out-left\:\$5 {
  ///   --sk-exit-tx: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .slide-out-left\:\$6 {
  ///   --sk-exit-tx: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .slide-out-left\:\$7 {
  ///   --sk-exit-tx: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .slide-out-left\:\$8 {
  ///   --sk-exit-tx: -2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .slide-out-left\:\$9 {
  ///   --sk-exit-tx: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .slide-out-left\:\$10 {
  ///   --sk-exit-tx: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .slide-out-left\:\$11 {
  ///   --sk-exit-tx: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .slide-out-left\:\$12 {
  ///   --sk-exit-tx: -3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .slide-out-left\:\$14 {
  ///   --sk-exit-tx: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .slide-out-left\:\$16 {
  ///   --sk-exit-tx: -4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .slide-out-left\:\$20 {
  ///   --sk-exit-tx: -5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .slide-out-left\:\$24 {
  ///   --sk-exit-tx: -6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .slide-out-left\:\$28 {
  ///   --sk-exit-tx: -7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .slide-out-left\:\$32 {
  ///   --sk-exit-tx: -8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .slide-out-left\:\$36 {
  ///   --sk-exit-tx: -9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .slide-out-left\:\$40 {
  ///   --sk-exit-tx: -10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .slide-out-left\:\$44 {
  ///   --sk-exit-tx: -11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .slide-out-left\:\$48 {
  ///   --sk-exit-tx: -12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .slide-out-left\:\$52 {
  ///   --sk-exit-tx: -13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .slide-out-left\:\$56 {
  ///   --sk-exit-tx: -14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .slide-out-left\:\$60 {
  ///   --sk-exit-tx: -15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .slide-out-left\:\$64 {
  ///   --sk-exit-tx: -16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .slide-out-left\:\$72 {
  ///   --sk-exit-tx: -18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .slide-out-left\:\$80 {
  ///   --sk-exit-tx: -20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .slide-out-left\:\$96 {
  ///   --sk-exit-tx: -24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .slide-out-left\:\$third {
  ///   --sk-exit-tx: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .slide-out-left\:\$twoThirds {
  ///   --sk-exit-tx: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("twoThirds")
  }
  /// ```css
  /// .slide-out-left\:\$quarter {
  ///   --sk-exit-tx: -25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .slide-out-left\:\$half {
  ///   --sk-exit-tx: -50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .slide-out-left\:\$threeQuarters {
  ///   --sk-exit-tx: -75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideOutLeft for GeneratedAtomSlideOutLeft {}
pub struct GeneratedAtomSlideOutRight(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideOutRight {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideOutRight: GeneratedSkribbleValue {
  /// ```css
  /// .slide-out-right\:\$full {
  ///   --sk-exit-tx: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .slide-out-right\:\$0 {
  ///   --sk-exit-tx: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .slide-out-right\:\$px {
  ///   --sk-exit-tx: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .slide-out-right\:\$0\.5 {
  ///   --sk-exit-tx: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .slide-out-right\:\$1 {
  ///   --sk-exit-tx: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .slide-out-right\:\$1\.5 {
  ///   --sk-exit-tx: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .slide-out-right\:\$2 {
  ///   --sk-exit-tx: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .slide-out-right\:\$2\.5 {
  ///   --sk-exit-tx: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .slide-out-right\:\$3 {
  ///   --sk-exit-tx: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .slide-out-right\:\$3\.5 {
  ///   --sk-exit-tx: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .slide-out-right\:\$4 {
  ///   --sk-exit-tx: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .slide-out-right\:\$5 {
  ///   --sk-exit-tx: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .slide-out-right\:\$6 {
  ///   --sk-exit-tx: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .slide-out-right\:\$7 {
  ///   --sk-exit-tx: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .slide-out-right\:\$8 {
  ///   --sk-exit-tx: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .slide-out-right\:\$9 {
  ///   --sk-exit-tx: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .slide-out-right\:\$10 {
  ///   --sk-exit-tx: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .slide-out-right\:\$11 {
  ///   --sk-exit-tx: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .slide-out-right\:\$12 {
  ///   --sk-exit-tx: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .slide-out-right\:\$14 {
  ///   --sk-exit-tx: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .slide-out-right\:\$16 {
  ///   --sk-exit-tx: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .slide-out-right\:\$20 {
  ///   --sk-exit-tx: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .slide-out-right\:\$24 {
  ///   --sk-exit-tx: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .slide-out-right\:\$28 {
  ///   --sk-exit-tx: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .slide-out-right\:\$32 {
  ///   --sk-exit-tx: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .slide-out-right\:\$36 {
  ///   --sk-exit-tx: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .slide-out-right\:\$40 {
  ///   --sk-exit-tx: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .slide-out-right\:\$44 {
  ///   --sk-exit-tx: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .slide-out-right\:\$48 {
  ///   --sk-exit-tx: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .slide-out-right\:\$52 {
  ///   --sk-exit-tx: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .slide-out-right\:\$56 {
  ///   --sk-exit-tx: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .slide-out-right\:\$60 {
  ///   --sk-exit-tx: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .slide-out-right\:\$64 {
  ///   --sk-exit-tx: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .slide-out-right\:\$72 {
  ///   --sk-exit-tx: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .slide-out-right\:\$80 {
  ///   --sk-exit-tx: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .slide-out-right\:\$96 {
  ///   --sk-exit-tx: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .slide-out-right\:\$third {
  ///   --sk-exit-tx: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .slide-out-right\:\$twoThirds {
  ///   --sk-exit-tx: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("twoThirds")
  }
  /// ```css
  /// .slide-out-right\:\$quarter {
  ///   --sk-exit-tx: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .slide-out-right\:\$half {
  ///   --sk-exit-tx: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .slide-out-right\:\$threeQuarters {
  ///   --sk-exit-tx: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideOutRight for GeneratedAtomSlideOutRight {}
pub struct GeneratedAtomSlideInTop(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideInTop {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideInTop: GeneratedSkribbleValue {
  /// ```css
  /// .slide-in-top\:\$full {
  ///   --sk-enter-ty: -100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .slide-in-top\:\$0 {
  ///   --sk-enter-ty: -0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .slide-in-top\:\$px {
  ///   --sk-enter-ty: -1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .slide-in-top\:\$0\.5 {
  ///   --sk-enter-ty: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .slide-in-top\:\$1 {
  ///   --sk-enter-ty: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .slide-in-top\:\$1\.5 {
  ///   --sk-enter-ty: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .slide-in-top\:\$2 {
  ///   --sk-enter-ty: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .slide-in-top\:\$2\.5 {
  ///   --sk-enter-ty: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .slide-in-top\:\$3 {
  ///   --sk-enter-ty: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .slide-in-top\:\$3\.5 {
  ///   --sk-enter-ty: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .slide-in-top\:\$4 {
  ///   --sk-enter-ty: -1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .slide-in-top\:\$5 {
  ///   --sk-enter-ty: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .slide-in-top\:\$6 {
  ///   --sk-enter-ty: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .slide-in-top\:\$7 {
  ///   --sk-enter-ty: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .slide-in-top\:\$8 {
  ///   --sk-enter-ty: -2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .slide-in-top\:\$9 {
  ///   --sk-enter-ty: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .slide-in-top\:\$10 {
  ///   --sk-enter-ty: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .slide-in-top\:\$11 {
  ///   --sk-enter-ty: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .slide-in-top\:\$12 {
  ///   --sk-enter-ty: -3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .slide-in-top\:\$14 {
  ///   --sk-enter-ty: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .slide-in-top\:\$16 {
  ///   --sk-enter-ty: -4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .slide-in-top\:\$20 {
  ///   --sk-enter-ty: -5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .slide-in-top\:\$24 {
  ///   --sk-enter-ty: -6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .slide-in-top\:\$28 {
  ///   --sk-enter-ty: -7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .slide-in-top\:\$32 {
  ///   --sk-enter-ty: -8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .slide-in-top\:\$36 {
  ///   --sk-enter-ty: -9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .slide-in-top\:\$40 {
  ///   --sk-enter-ty: -10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .slide-in-top\:\$44 {
  ///   --sk-enter-ty: -11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .slide-in-top\:\$48 {
  ///   --sk-enter-ty: -12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .slide-in-top\:\$52 {
  ///   --sk-enter-ty: -13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .slide-in-top\:\$56 {
  ///   --sk-enter-ty: -14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .slide-in-top\:\$60 {
  ///   --sk-enter-ty: -15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .slide-in-top\:\$64 {
  ///   --sk-enter-ty: -16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .slide-in-top\:\$72 {
  ///   --sk-enter-ty: -18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .slide-in-top\:\$80 {
  ///   --sk-enter-ty: -20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .slide-in-top\:\$96 {
  ///   --sk-enter-ty: -24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .slide-in-top\:\$third {
  ///   --sk-enter-ty: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .slide-in-top\:\$twoThirds {
  ///   --sk-enter-ty: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("twoThirds")
  }
  /// ```css
  /// .slide-in-top\:\$quarter {
  ///   --sk-enter-ty: -25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .slide-in-top\:\$half {
  ///   --sk-enter-ty: -50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .slide-in-top\:\$threeQuarters {
  ///   --sk-enter-ty: -75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideInTop for GeneratedAtomSlideInTop {}
pub struct GeneratedAtomSlideInBottom(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideInBottom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideInBottom: GeneratedSkribbleValue {
  /// ```css
  /// .slide-in-bottom\:\$full {
  ///   --sk-enter-ty: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .slide-in-bottom\:\$0 {
  ///   --sk-enter-ty: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .slide-in-bottom\:\$px {
  ///   --sk-enter-ty: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .slide-in-bottom\:\$0\.5 {
  ///   --sk-enter-ty: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .slide-in-bottom\:\$1 {
  ///   --sk-enter-ty: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .slide-in-bottom\:\$1\.5 {
  ///   --sk-enter-ty: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .slide-in-bottom\:\$2 {
  ///   --sk-enter-ty: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .slide-in-bottom\:\$2\.5 {
  ///   --sk-enter-ty: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .slide-in-bottom\:\$3 {
  ///   --sk-enter-ty: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .slide-in-bottom\:\$3\.5 {
  ///   --sk-enter-ty: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .slide-in-bottom\:\$4 {
  ///   --sk-enter-ty: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .slide-in-bottom\:\$5 {
  ///   --sk-enter-ty: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .slide-in-bottom\:\$6 {
  ///   --sk-enter-ty: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .slide-in-bottom\:\$7 {
  ///   --sk-enter-ty: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .slide-in-bottom\:\$8 {
  ///   --sk-enter-ty: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .slide-in-bottom\:\$9 {
  ///   --sk-enter-ty: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .slide-in-bottom\:\$10 {
  ///   --sk-enter-ty: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .slide-in-bottom\:\$11 {
  ///   --sk-enter-ty: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .slide-in-bottom\:\$12 {
  ///   --sk-enter-ty: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .slide-in-bottom\:\$14 {
  ///   --sk-enter-ty: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .slide-in-bottom\:\$16 {
  ///   --sk-enter-ty: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .slide-in-bottom\:\$20 {
  ///   --sk-enter-ty: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .slide-in-bottom\:\$24 {
  ///   --sk-enter-ty: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .slide-in-bottom\:\$28 {
  ///   --sk-enter-ty: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .slide-in-bottom\:\$32 {
  ///   --sk-enter-ty: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .slide-in-bottom\:\$36 {
  ///   --sk-enter-ty: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .slide-in-bottom\:\$40 {
  ///   --sk-enter-ty: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .slide-in-bottom\:\$44 {
  ///   --sk-enter-ty: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .slide-in-bottom\:\$48 {
  ///   --sk-enter-ty: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .slide-in-bottom\:\$52 {
  ///   --sk-enter-ty: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .slide-in-bottom\:\$56 {
  ///   --sk-enter-ty: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .slide-in-bottom\:\$60 {
  ///   --sk-enter-ty: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .slide-in-bottom\:\$64 {
  ///   --sk-enter-ty: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .slide-in-bottom\:\$72 {
  ///   --sk-enter-ty: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .slide-in-bottom\:\$80 {
  ///   --sk-enter-ty: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .slide-in-bottom\:\$96 {
  ///   --sk-enter-ty: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .slide-in-bottom\:\$third {
  ///   --sk-enter-ty: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .slide-in-bottom\:\$twoThirds {
  ///   --sk-enter-ty: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("twoThirds")
  }
  /// ```css
  /// .slide-in-bottom\:\$quarter {
  ///   --sk-enter-ty: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .slide-in-bottom\:\$half {
  ///   --sk-enter-ty: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .slide-in-bottom\:\$threeQuarters {
  ///   --sk-enter-ty: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideInBottom for GeneratedAtomSlideInBottom {}
pub struct GeneratedAtomSlideOutTop(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideOutTop {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideOutTop: GeneratedSkribbleValue {
  /// ```css
  /// .slide-out-top\:\$full {
  ///   --sk-exit-ty: -100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .slide-out-top\:\$0 {
  ///   --sk-exit-ty: -0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .slide-out-top\:\$px {
  ///   --sk-exit-ty: -1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .slide-out-top\:\$0\.5 {
  ///   --sk-exit-ty: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .slide-out-top\:\$1 {
  ///   --sk-exit-ty: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .slide-out-top\:\$1\.5 {
  ///   --sk-exit-ty: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .slide-out-top\:\$2 {
  ///   --sk-exit-ty: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .slide-out-top\:\$2\.5 {
  ///   --sk-exit-ty: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .slide-out-top\:\$3 {
  ///   --sk-exit-ty: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .slide-out-top\:\$3\.5 {
  ///   --sk-exit-ty: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .slide-out-top\:\$4 {
  ///   --sk-exit-ty: -1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .slide-out-top\:\$5 {
  ///   --sk-exit-ty: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .slide-out-top\:\$6 {
  ///   --sk-exit-ty: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .slide-out-top\:\$7 {
  ///   --sk-exit-ty: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .slide-out-top\:\$8 {
  ///   --sk-exit-ty: -2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .slide-out-top\:\$9 {
  ///   --sk-exit-ty: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .slide-out-top\:\$10 {
  ///   --sk-exit-ty: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .slide-out-top\:\$11 {
  ///   --sk-exit-ty: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .slide-out-top\:\$12 {
  ///   --sk-exit-ty: -3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .slide-out-top\:\$14 {
  ///   --sk-exit-ty: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .slide-out-top\:\$16 {
  ///   --sk-exit-ty: -4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .slide-out-top\:\$20 {
  ///   --sk-exit-ty: -5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .slide-out-top\:\$24 {
  ///   --sk-exit-ty: -6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .slide-out-top\:\$28 {
  ///   --sk-exit-ty: -7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .slide-out-top\:\$32 {
  ///   --sk-exit-ty: -8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .slide-out-top\:\$36 {
  ///   --sk-exit-ty: -9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .slide-out-top\:\$40 {
  ///   --sk-exit-ty: -10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .slide-out-top\:\$44 {
  ///   --sk-exit-ty: -11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .slide-out-top\:\$48 {
  ///   --sk-exit-ty: -12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .slide-out-top\:\$52 {
  ///   --sk-exit-ty: -13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .slide-out-top\:\$56 {
  ///   --sk-exit-ty: -14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .slide-out-top\:\$60 {
  ///   --sk-exit-ty: -15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .slide-out-top\:\$64 {
  ///   --sk-exit-ty: -16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .slide-out-top\:\$72 {
  ///   --sk-exit-ty: -18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .slide-out-top\:\$80 {
  ///   --sk-exit-ty: -20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .slide-out-top\:\$96 {
  ///   --sk-exit-ty: -24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .slide-out-top\:\$third {
  ///   --sk-exit-ty: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .slide-out-top\:\$twoThirds {
  ///   --sk-exit-ty: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("twoThirds")
  }
  /// ```css
  /// .slide-out-top\:\$quarter {
  ///   --sk-exit-ty: -25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .slide-out-top\:\$half {
  ///   --sk-exit-ty: -50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .slide-out-top\:\$threeQuarters {
  ///   --sk-exit-ty: -75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideOutTop for GeneratedAtomSlideOutTop {}
pub struct GeneratedAtomSlideOutBottom(String);
impl GeneratedSkribbleValue for GeneratedAtomSlideOutBottom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSlideOutBottom: GeneratedSkribbleValue {
  /// ```css
  /// .slide-out-bottom\:\$full {
  ///   --sk-exit-ty: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .slide-out-bottom\:\$0 {
  ///   --sk-exit-ty: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .slide-out-bottom\:\$px {
  ///   --sk-exit-ty: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .slide-out-bottom\:\$0\.5 {
  ///   --sk-exit-ty: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .slide-out-bottom\:\$1 {
  ///   --sk-exit-ty: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .slide-out-bottom\:\$1\.5 {
  ///   --sk-exit-ty: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .slide-out-bottom\:\$2 {
  ///   --sk-exit-ty: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .slide-out-bottom\:\$2\.5 {
  ///   --sk-exit-ty: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .slide-out-bottom\:\$3 {
  ///   --sk-exit-ty: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .slide-out-bottom\:\$3\.5 {
  ///   --sk-exit-ty: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .slide-out-bottom\:\$4 {
  ///   --sk-exit-ty: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .slide-out-bottom\:\$5 {
  ///   --sk-exit-ty: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .slide-out-bottom\:\$6 {
  ///   --sk-exit-ty: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .slide-out-bottom\:\$7 {
  ///   --sk-exit-ty: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .slide-out-bottom\:\$8 {
  ///   --sk-exit-ty: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .slide-out-bottom\:\$9 {
  ///   --sk-exit-ty: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .slide-out-bottom\:\$10 {
  ///   --sk-exit-ty: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .slide-out-bottom\:\$11 {
  ///   --sk-exit-ty: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .slide-out-bottom\:\$12 {
  ///   --sk-exit-ty: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .slide-out-bottom\:\$14 {
  ///   --sk-exit-ty: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .slide-out-bottom\:\$16 {
  ///   --sk-exit-ty: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .slide-out-bottom\:\$20 {
  ///   --sk-exit-ty: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .slide-out-bottom\:\$24 {
  ///   --sk-exit-ty: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .slide-out-bottom\:\$28 {
  ///   --sk-exit-ty: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .slide-out-bottom\:\$32 {
  ///   --sk-exit-ty: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .slide-out-bottom\:\$36 {
  ///   --sk-exit-ty: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .slide-out-bottom\:\$40 {
  ///   --sk-exit-ty: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .slide-out-bottom\:\$44 {
  ///   --sk-exit-ty: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .slide-out-bottom\:\$48 {
  ///   --sk-exit-ty: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .slide-out-bottom\:\$52 {
  ///   --sk-exit-ty: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .slide-out-bottom\:\$56 {
  ///   --sk-exit-ty: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .slide-out-bottom\:\$60 {
  ///   --sk-exit-ty: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .slide-out-bottom\:\$64 {
  ///   --sk-exit-ty: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .slide-out-bottom\:\$72 {
  ///   --sk-exit-ty: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .slide-out-bottom\:\$80 {
  ///   --sk-exit-ty: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .slide-out-bottom\:\$96 {
  ///   --sk-exit-ty: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .slide-out-bottom\:\$third {
  ///   --sk-exit-ty: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .slide-out-bottom\:\$twoThirds {
  ///   --sk-exit-ty: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("twoThirds")
  }
  /// ```css
  /// .slide-out-bottom\:\$quarter {
  ///   --sk-exit-ty: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .slide-out-bottom\:\$half {
  ///   --sk-exit-ty: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .slide-out-bottom\:\$threeQuarters {
  ///   --sk-exit-ty: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("threeQuarters")
  }
}
impl GeneratedValueSetSlideOutBottom for GeneratedAtomSlideOutBottom {}
pub struct GeneratedAtomZoomIn(String);
impl GeneratedSkribbleValue for GeneratedAtomZoomIn {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetZoomIn: GeneratedSkribbleValue {
  /// ```css
  /// .zoom-in\:\$0 {
  ///   --sk-enter-sx: 0;
  ///   --sk-enter-sy: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .zoom-in\:\$50 {
  ///   --sk-enter-sx: .5;
  ///   --sk-enter-sy: .5;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .zoom-in\:\$75 {
  ///   --sk-enter-sx: .75;
  ///   --sk-enter-sy: .75;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .zoom-in\:\$90 {
  ///   --sk-enter-sx: .9;
  ///   --sk-enter-sy: .9;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .zoom-in\:\$95 {
  ///   --sk-enter-sx: .95;
  ///   --sk-enter-sy: .95;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_value("95")
  }
  /// ```css
  /// .zoom-in\:\$100 {
  ///   --sk-enter-sx: 1;
  ///   --sk-enter-sy: 1;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .zoom-in\:\$105 {
  ///   --sk-enter-sx: 1.05;
  ///   --sk-enter-sy: 1.05;
  /// }
  /// ```
  #[inline]
  fn n105(&self) -> String {
    self.append_value("105")
  }
  /// ```css
  /// .zoom-in\:\$110 {
  ///   --sk-enter-sx: 1.1;
  ///   --sk-enter-sy: 1.1;
  /// }
  /// ```
  #[inline]
  fn n110(&self) -> String {
    self.append_value("110")
  }
  /// ```css
  /// .zoom-in\:\$125 {
  ///   --sk-enter-sx: 1.25;
  ///   --sk-enter-sy: 1.25;
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_value("125")
  }
  /// ```css
  /// .zoom-in\:\$150 {
  ///   --sk-enter-sx: 1.5;
  ///   --sk-enter-sy: 1.5;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
}
impl GeneratedValueSetZoomIn for GeneratedAtomZoomIn {}
pub struct GeneratedAtomZoomOut(String);
impl GeneratedSkribbleValue for GeneratedAtomZoomOut {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetZoomOut: GeneratedSkribbleValue {
  /// ```css
  /// .zoom-out\:\$0 {
  ///   --sk-exit-sx: 0;
  ///   --sk-exit-sy: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .zoom-out\:\$50 {
  ///   --sk-exit-sx: .5;
  ///   --sk-exit-sy: .5;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .zoom-out\:\$75 {
  ///   --sk-exit-sx: .75;
  ///   --sk-exit-sy: .75;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .zoom-out\:\$90 {
  ///   --sk-exit-sx: .9;
  ///   --sk-exit-sy: .9;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .zoom-out\:\$95 {
  ///   --sk-exit-sx: .95;
  ///   --sk-exit-sy: .95;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_value("95")
  }
  /// ```css
  /// .zoom-out\:\$100 {
  ///   --sk-exit-sx: 1;
  ///   --sk-exit-sy: 1;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .zoom-out\:\$105 {
  ///   --sk-exit-sx: 1.05;
  ///   --sk-exit-sy: 1.05;
  /// }
  /// ```
  #[inline]
  fn n105(&self) -> String {
    self.append_value("105")
  }
  /// ```css
  /// .zoom-out\:\$110 {
  ///   --sk-exit-sx: 1.1;
  ///   --sk-exit-sy: 1.1;
  /// }
  /// ```
  #[inline]
  fn n110(&self) -> String {
    self.append_value("110")
  }
  /// ```css
  /// .zoom-out\:\$125 {
  ///   --sk-exit-sx: 1.25;
  ///   --sk-exit-sy: 1.25;
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_value("125")
  }
  /// ```css
  /// .zoom-out\:\$150 {
  ///   --sk-exit-sx: 1.5;
  ///   --sk-exit-sy: 1.5;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
}
impl GeneratedValueSetZoomOut for GeneratedAtomZoomOut {}
pub struct GeneratedAtomAnimateDuration(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateDuration {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateDuration: GeneratedSkribbleValue {
  /// ```css
  /// .animate-duration\:\$0 {
  ///   animation-duration: 0ms;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .animate-duration\:\$75 {
  ///   animation-duration: 75ms;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .animate-duration\:\$100 {
  ///   animation-duration: 100ms;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .animate-duration\:\$150 {
  ///   animation-duration: 150ms;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .animate-duration\:\$200 {
  ///   animation-duration: 200ms;
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
  /// ```css
  /// .animate-duration\:\$300 {
  ///   animation-duration: 300ms;
  /// }
  /// ```
  #[inline]
  fn n300(&self) -> String {
    self.append_value("300")
  }
  /// ```css
  /// .animate-duration\:\$500 {
  ///   animation-duration: 500ms;
  /// }
  /// ```
  #[inline]
  fn n500(&self) -> String {
    self.append_value("500")
  }
  /// ```css
  /// .animate-duration\:\$700 {
  ///   animation-duration: 700ms;
  /// }
  /// ```
  #[inline]
  fn n700(&self) -> String {
    self.append_value("700")
  }
  /// ```css
  /// .animate-duration\:\$1000 {
  ///   animation-duration: 1000ms;
  /// }
  /// ```
  #[inline]
  fn n1000(&self) -> String {
    self.append_value("1000")
  }
  /// ```css
  /// .animate-duration\:\$1500 {
  ///   animation-duration: 1500ms;
  /// }
  /// ```
  #[inline]
  fn n1500(&self) -> String {
    self.append_value("1500")
  }
  /// ```css
  /// .animate-duration\:\$2000 {
  ///   animation-duration: 2000ms;
  /// }
  /// ```
  #[inline]
  fn n2000(&self) -> String {
    self.append_value("2000")
  }
}
impl GeneratedValueSetAnimateDuration for GeneratedAtomAnimateDuration {}
pub struct GeneratedAtomAnimateEasing(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateEasing {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateEasing: GeneratedSkribbleValue {
  /// ```css
  /// .animate-easing\:\$linear {
  ///   animation-timing-function: linear;
  /// }
  /// ```
  #[inline]
  fn linear(&self) -> String {
    self.append_value("linear")
  }
  /// ```css
  /// .animate-easing\:\$in {
  ///   animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
  /// }
  /// ```
  #[inline]
  fn r#in(&self) -> String {
    self.append_value("in")
  }
  /// ```css
  /// .animate-easing\:\$out {
  ///   animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn out(&self) -> String {
    self.append_value("out")
  }
  /// ```css
  /// .animate-easing\:\$inOut {
  ///   animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn in_out(&self) -> String {
    self.append_value("inOut")
  }
}
impl GeneratedValueSetAnimateEasing for GeneratedAtomAnimateEasing {}
pub struct GeneratedAtomAnimateDelay(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateDelay {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateDelay: GeneratedSkribbleValue {
  /// ```css
  /// .animate-delay\:\$0 {
  ///   animation-delay: 0ms;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .animate-delay\:\$75 {
  ///   animation-delay: 75ms;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .animate-delay\:\$100 {
  ///   animation-delay: 100ms;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .animate-delay\:\$150 {
  ///   animation-delay: 150ms;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .animate-delay\:\$200 {
  ///   animation-delay: 200ms;
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
  /// ```css
  /// .animate-delay\:\$300 {
  ///   animation-delay: 300ms;
  /// }
  /// ```
  #[inline]
  fn n300(&self) -> String {
    self.append_value("300")
  }
  /// ```css
  /// .animate-delay\:\$500 {
  ///   animation-delay: 500ms;
  /// }
  /// ```
  #[inline]
  fn n500(&self) -> String {
    self.append_value("500")
  }
  /// ```css
  /// .animate-delay\:\$700 {
  ///   animation-delay: 700ms;
  /// }
  /// ```
  #[inline]
  fn n700(&self) -> String {
    self.append_value("700")
  }
  /// ```css
  /// .animate-delay\:\$1000 {
  ///   animation-delay: 1000ms;
  /// }
  /// ```
  #[inline]
  fn n1000(&self) -> String {
    self.append_value("1000")
  }
  /// ```css
  /// .animate-delay\:\$1500 {
  ///   animation-delay: 1500ms;
  /// }
  /// ```
  #[inline]
  fn n1500(&self) -> String {
    self.append_value("1500")
  }
  /// ```css
  /// .animate-delay\:\$2000 {
  ///   animation-delay: 2000ms;
  /// }
  /// ```
  #[inline]
  fn n2000(&self) -> String {
    self.append_value("2000")
  }
}
impl GeneratedValueSetAnimateDelay for GeneratedAtomAnimateDelay {}
pub struct GeneratedAtomAnimateRepeat(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateRepeat {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateRepeat: GeneratedSkribbleValue {
  /// ```css
  /// .animate-repeat\:\$0 {
  ///   animation-iteration-count: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .animate-repeat\:\$0\.5 {
  ///   animation-iteration-count: 0.5;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .animate-repeat\:\$1 {
  ///   animation-iteration-count: 1;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .animate-repeat\:\$2 {
  ///   animation-iteration-count: 2;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .animate-repeat\:\$3 {
  ///   animation-iteration-count: 3;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .animate-repeat\:\$infinite {
  ///   animation-iteration-count: infinite;
  /// }
  /// ```
  #[inline]
  fn infinite(&self) -> String {
    self.append_value("infinite")
  }
  /// ```css
  /// .animate-repeat\:\$in {
  ///   animation-iteration-count: cubic-bezier(0.4, 0, 1, 1);
  /// }
  /// ```
  #[inline]
  fn r#in(&self) -> String {
    self.append_value("in")
  }
  /// ```css
  /// .animate-repeat\:\$out {
  ///   animation-iteration-count: cubic-bezier(0, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn out(&self) -> String {
    self.append_value("out")
  }
  /// ```css
  /// .animate-repeat\:\$inOut {
  ///   animation-iteration-count: cubic-bezier(0.4, 0, 0.2, 1);
  /// }
  /// ```
  #[inline]
  fn in_out(&self) -> String {
    self.append_value("inOut")
  }
}
impl GeneratedValueSetAnimateRepeat for GeneratedAtomAnimateRepeat {}
pub struct GeneratedAtomAnimateDirection(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateDirection {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateDirection: GeneratedSkribbleValue {
  /// ```css
  /// .animate-direction\:\$normal {
  ///   animation-direction: normal;
  /// }
  /// ```
  #[inline]
  fn normal(&self) -> String {
    self.append_value("normal")
  }
  /// ```css
  /// .animate-direction\:\$reverse {
  ///   animation-direction: reverse;
  /// }
  /// ```
  #[inline]
  fn reverse(&self) -> String {
    self.append_value("reverse")
  }
  /// ```css
  /// .animate-direction\:\$alt {
  ///   animation-direction: alternate;
  /// }
  /// ```
  #[inline]
  fn alt(&self) -> String {
    self.append_value("alt")
  }
  /// ```css
  /// .animate-direction\:\$altReverse {
  ///   animation-direction: alternate-reverse;
  /// }
  /// ```
  #[inline]
  fn alt_reverse(&self) -> String {
    self.append_value("altReverse")
  }
}
impl GeneratedValueSetAnimateDirection for GeneratedAtomAnimateDirection {}
pub struct GeneratedAtomAnimateFillMode(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateFillMode {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateFillMode: GeneratedSkribbleValue {
  /// ```css
  /// .animate-fill-mode\:\$none {
  ///   animation-fill-mode: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
  /// ```css
  /// .animate-fill-mode\:\$forwards {
  ///   animation-fill-mode: forwards;
  /// }
  /// ```
  #[inline]
  fn forwards(&self) -> String {
    self.append_value("forwards")
  }
  /// ```css
  /// .animate-fill-mode\:\$backwards {
  ///   animation-fill-mode: backwards;
  /// }
  /// ```
  #[inline]
  fn backwards(&self) -> String {
    self.append_value("backwards")
  }
  /// ```css
  /// .animate-fill-mode\:\$both {
  ///   animation-fill-mode: both;
  /// }
  /// ```
  #[inline]
  fn both(&self) -> String {
    self.append_value("both")
  }
}
impl GeneratedValueSetAnimateFillMode for GeneratedAtomAnimateFillMode {}
pub struct GeneratedAtomAnimateState(String);
impl GeneratedSkribbleValue for GeneratedAtomAnimateState {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAnimateState: GeneratedSkribbleValue {
  /// ```css
  /// .animate-state\:\$running {
  ///   animation-play-state: running;
  /// }
  /// ```
  #[inline]
  fn running(&self) -> String {
    self.append_value("running")
  }
  /// ```css
  /// .animate-state\:\$paused {
  ///   animation-play-state: paused;
  /// }
  /// ```
  #[inline]
  fn paused(&self) -> String {
    self.append_value("paused")
  }
}
impl GeneratedValueSetAnimateState for GeneratedAtomAnimateState {}
pub struct GeneratedAtomZoom(String);
impl GeneratedSkribbleValue for GeneratedAtomZoom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetZoom: GeneratedSkribbleValue {
  /// ```css
  /// .zoom\:\$0 {
  ///   --sk-invalid-css-variable: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .zoom\:\$50 {
  ///   --sk-invalid-css-variable: .5;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .zoom\:\$75 {
  ///   --sk-invalid-css-variable: .75;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .zoom\:\$90 {
  ///   --sk-invalid-css-variable: .9;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .zoom\:\$95 {
  ///   --sk-invalid-css-variable: .95;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_value("95")
  }
  /// ```css
  /// .zoom\:\$100 {
  ///   --sk-invalid-css-variable: 1;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .zoom\:\$105 {
  ///   --sk-invalid-css-variable: 1.05;
  /// }
  /// ```
  #[inline]
  fn n105(&self) -> String {
    self.append_value("105")
  }
  /// ```css
  /// .zoom\:\$110 {
  ///   --sk-invalid-css-variable: 1.1;
  /// }
  /// ```
  #[inline]
  fn n110(&self) -> String {
    self.append_value("110")
  }
  /// ```css
  /// .zoom\:\$125 {
  ///   --sk-invalid-css-variable: 1.25;
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_value("125")
  }
  /// ```css
  /// .zoom\:\$150 {
  ///   --sk-invalid-css-variable: 1.5;
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
}
impl GeneratedValueSetZoom for GeneratedAtomZoom {}
pub struct GeneratedAtomFont(String);
impl GeneratedSkribbleValue for GeneratedAtomFont {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetFont: GeneratedSkribbleValue {
  /// ```css
  /// .font\:\$sans {
  ///   font-family: ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
  /// }
  /// ```
  #[inline]
  fn sans(&self) -> String {
    self.append_value("sans")
  }
  /// ```css
  /// .font\:\$serif {
  ///   font-family: ui-serif,Georgia,Cambria,"Times New Roman",Times,serif;
  /// }
  /// ```
  #[inline]
  fn serif(&self) -> String {
    self.append_value("serif")
  }
  /// ```css
  /// .font\:\$mono {
  ///   font-family: ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;
  /// }
  /// ```
  #[inline]
  fn mono(&self) -> String {
    self.append_value("mono")
  }
}
impl GeneratedValueSetFont for GeneratedAtomFont {}
pub struct GeneratedAtomP(String);
impl GeneratedSkribbleValue for GeneratedAtomP {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetP: GeneratedSkribbleValue {
  /// ```css
  /// .p\:\$0 {
  ///   padding: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .p\:\$1 {
  ///   padding: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .p\:\$2 {
  ///   padding: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .p\:\$3 {
  ///   padding: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .p\:\$4 {
  ///   padding: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .p\:\$5 {
  ///   padding: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .p\:\$6 {
  ///   padding: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .p\:\$7 {
  ///   padding: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .p\:\$8 {
  ///   padding: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .p\:\$9 {
  ///   padding: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .p\:\$10 {
  ///   padding: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .p\:\$11 {
  ///   padding: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .p\:\$12 {
  ///   padding: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .p\:\$14 {
  ///   padding: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .p\:\$16 {
  ///   padding: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .p\:\$20 {
  ///   padding: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .p\:\$24 {
  ///   padding: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .p\:\$28 {
  ///   padding: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .p\:\$32 {
  ///   padding: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .p\:\$36 {
  ///   padding: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .p\:\$40 {
  ///   padding: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .p\:\$44 {
  ///   padding: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .p\:\$48 {
  ///   padding: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .p\:\$52 {
  ///   padding: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .p\:\$56 {
  ///   padding: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .p\:\$60 {
  ///   padding: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .p\:\$64 {
  ///   padding: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .p\:\$72 {
  ///   padding: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .p\:\$80 {
  ///   padding: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .p\:\$96 {
  ///   padding: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .p\:\$px {
  ///   padding: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .p\:\$0\.5 {
  ///   padding: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .p\:\$1\.5 {
  ///   padding: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .p\:\$2\.5 {
  ///   padding: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .p\:\$3\.5 {
  ///   padding: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .p\:\$-1 {
  ///   padding: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .p\:\$-2 {
  ///   padding: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .p\:\$-3 {
  ///   padding: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .p\:\$-4 {
  ///   padding: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .p\:\$-5 {
  ///   padding: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .p\:\$-6 {
  ///   padding: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .p\:\$-7 {
  ///   padding: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .p\:\$-8 {
  ///   padding: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .p\:\$-9 {
  ///   padding: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .p\:\$-10 {
  ///   padding: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .p\:\$-11 {
  ///   padding: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .p\:\$-12 {
  ///   padding: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .p\:\$-14 {
  ///   padding: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .p\:\$-16 {
  ///   padding: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .p\:\$-20 {
  ///   padding: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .p\:\$-24 {
  ///   padding: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .p\:\$-28 {
  ///   padding: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .p\:\$-32 {
  ///   padding: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .p\:\$-36 {
  ///   padding: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .p\:\$-40 {
  ///   padding: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .p\:\$-44 {
  ///   padding: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .p\:\$-48 {
  ///   padding: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .p\:\$-52 {
  ///   padding: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .p\:\$-56 {
  ///   padding: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .p\:\$-60 {
  ///   padding: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .p\:\$-64 {
  ///   padding: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .p\:\$-72 {
  ///   padding: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .p\:\$-80 {
  ///   padding: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .p\:\$-96 {
  ///   padding: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .p\:\$-px {
  ///   padding: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .p\:\$-0\.5 {
  ///   padding: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .p\:\$-1\.5 {
  ///   padding: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .p\:\$-2\.5 {
  ///   padding: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .p\:\$-3\.5 {
  ///   padding: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetP for GeneratedAtomP {}
pub struct GeneratedAtomPy(String);
impl GeneratedSkribbleValue for GeneratedAtomPy {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPy: GeneratedSkribbleValue {
  /// ```css
  /// .py\:\$0 {
  ///   padding-top: 0px;
  ///   padding-bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .py\:\$1 {
  ///   padding-top: 0.25rem;
  ///   padding-bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .py\:\$2 {
  ///   padding-top: 0.5rem;
  ///   padding-bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .py\:\$3 {
  ///   padding-top: 0.75rem;
  ///   padding-bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .py\:\$4 {
  ///   padding-top: 1rem;
  ///   padding-bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .py\:\$5 {
  ///   padding-top: 1.25rem;
  ///   padding-bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .py\:\$6 {
  ///   padding-top: 1.5rem;
  ///   padding-bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .py\:\$7 {
  ///   padding-top: 1.75rem;
  ///   padding-bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .py\:\$8 {
  ///   padding-top: 2rem;
  ///   padding-bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .py\:\$9 {
  ///   padding-top: 2.25rem;
  ///   padding-bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .py\:\$10 {
  ///   padding-top: 2.5rem;
  ///   padding-bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .py\:\$11 {
  ///   padding-top: 2.75rem;
  ///   padding-bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .py\:\$12 {
  ///   padding-top: 3rem;
  ///   padding-bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .py\:\$14 {
  ///   padding-top: 3.5rem;
  ///   padding-bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .py\:\$16 {
  ///   padding-top: 4rem;
  ///   padding-bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .py\:\$20 {
  ///   padding-top: 5rem;
  ///   padding-bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .py\:\$24 {
  ///   padding-top: 6rem;
  ///   padding-bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .py\:\$28 {
  ///   padding-top: 7rem;
  ///   padding-bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .py\:\$32 {
  ///   padding-top: 8rem;
  ///   padding-bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .py\:\$36 {
  ///   padding-top: 9rem;
  ///   padding-bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .py\:\$40 {
  ///   padding-top: 10rem;
  ///   padding-bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .py\:\$44 {
  ///   padding-top: 11rem;
  ///   padding-bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .py\:\$48 {
  ///   padding-top: 12rem;
  ///   padding-bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .py\:\$52 {
  ///   padding-top: 13rem;
  ///   padding-bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .py\:\$56 {
  ///   padding-top: 14rem;
  ///   padding-bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .py\:\$60 {
  ///   padding-top: 15rem;
  ///   padding-bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .py\:\$64 {
  ///   padding-top: 16rem;
  ///   padding-bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .py\:\$72 {
  ///   padding-top: 18rem;
  ///   padding-bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .py\:\$80 {
  ///   padding-top: 20rem;
  ///   padding-bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .py\:\$96 {
  ///   padding-top: 24rem;
  ///   padding-bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .py\:\$px {
  ///   padding-top: 1px;
  ///   padding-bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .py\:\$0\.5 {
  ///   padding-top: 0.125rem;
  ///   padding-bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .py\:\$1\.5 {
  ///   padding-top: 0.375rem;
  ///   padding-bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .py\:\$2\.5 {
  ///   padding-top: 0.625rem;
  ///   padding-bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .py\:\$3\.5 {
  ///   padding-top: 0.875rem;
  ///   padding-bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .py\:\$-1 {
  ///   padding-top: -0.25rem;
  ///   padding-bottom: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .py\:\$-2 {
  ///   padding-top: -0.5rem;
  ///   padding-bottom: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .py\:\$-3 {
  ///   padding-top: -0.75rem;
  ///   padding-bottom: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .py\:\$-4 {
  ///   padding-top: -1rem;
  ///   padding-bottom: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .py\:\$-5 {
  ///   padding-top: -1.25rem;
  ///   padding-bottom: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .py\:\$-6 {
  ///   padding-top: -1.5rem;
  ///   padding-bottom: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .py\:\$-7 {
  ///   padding-top: -1.75rem;
  ///   padding-bottom: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .py\:\$-8 {
  ///   padding-top: -2rem;
  ///   padding-bottom: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .py\:\$-9 {
  ///   padding-top: -2.25rem;
  ///   padding-bottom: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .py\:\$-10 {
  ///   padding-top: -2.5rem;
  ///   padding-bottom: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .py\:\$-11 {
  ///   padding-top: -2.75rem;
  ///   padding-bottom: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .py\:\$-12 {
  ///   padding-top: -3rem;
  ///   padding-bottom: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .py\:\$-14 {
  ///   padding-top: -3.5rem;
  ///   padding-bottom: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .py\:\$-16 {
  ///   padding-top: -4rem;
  ///   padding-bottom: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .py\:\$-20 {
  ///   padding-top: -5rem;
  ///   padding-bottom: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .py\:\$-24 {
  ///   padding-top: -6rem;
  ///   padding-bottom: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .py\:\$-28 {
  ///   padding-top: -7rem;
  ///   padding-bottom: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .py\:\$-32 {
  ///   padding-top: -8rem;
  ///   padding-bottom: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .py\:\$-36 {
  ///   padding-top: -9rem;
  ///   padding-bottom: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .py\:\$-40 {
  ///   padding-top: -10rem;
  ///   padding-bottom: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .py\:\$-44 {
  ///   padding-top: -11rem;
  ///   padding-bottom: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .py\:\$-48 {
  ///   padding-top: -12rem;
  ///   padding-bottom: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .py\:\$-52 {
  ///   padding-top: -13rem;
  ///   padding-bottom: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .py\:\$-56 {
  ///   padding-top: -14rem;
  ///   padding-bottom: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .py\:\$-60 {
  ///   padding-top: -15rem;
  ///   padding-bottom: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .py\:\$-64 {
  ///   padding-top: -16rem;
  ///   padding-bottom: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .py\:\$-72 {
  ///   padding-top: -18rem;
  ///   padding-bottom: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .py\:\$-80 {
  ///   padding-top: -20rem;
  ///   padding-bottom: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .py\:\$-96 {
  ///   padding-top: -24rem;
  ///   padding-bottom: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .py\:\$-px {
  ///   padding-top: -1px;
  ///   padding-bottom: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .py\:\$-0\.5 {
  ///   padding-top: -0.125rem;
  ///   padding-bottom: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .py\:\$-1\.5 {
  ///   padding-top: -0.375rem;
  ///   padding-bottom: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .py\:\$-2\.5 {
  ///   padding-top: -0.625rem;
  ///   padding-bottom: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .py\:\$-3\.5 {
  ///   padding-top: -0.875rem;
  ///   padding-bottom: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPy for GeneratedAtomPy {}
pub struct GeneratedAtomPx(String);
impl GeneratedSkribbleValue for GeneratedAtomPx {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPx: GeneratedSkribbleValue {
  /// ```css
  /// .px\:\$0 {
  ///   padding-right: 0px;
  ///   padding-left: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .px\:\$1 {
  ///   padding-right: 0.25rem;
  ///   padding-left: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .px\:\$2 {
  ///   padding-right: 0.5rem;
  ///   padding-left: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .px\:\$3 {
  ///   padding-right: 0.75rem;
  ///   padding-left: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .px\:\$4 {
  ///   padding-right: 1rem;
  ///   padding-left: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .px\:\$5 {
  ///   padding-right: 1.25rem;
  ///   padding-left: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .px\:\$6 {
  ///   padding-right: 1.5rem;
  ///   padding-left: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .px\:\$7 {
  ///   padding-right: 1.75rem;
  ///   padding-left: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .px\:\$8 {
  ///   padding-right: 2rem;
  ///   padding-left: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .px\:\$9 {
  ///   padding-right: 2.25rem;
  ///   padding-left: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .px\:\$10 {
  ///   padding-right: 2.5rem;
  ///   padding-left: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .px\:\$11 {
  ///   padding-right: 2.75rem;
  ///   padding-left: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .px\:\$12 {
  ///   padding-right: 3rem;
  ///   padding-left: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .px\:\$14 {
  ///   padding-right: 3.5rem;
  ///   padding-left: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .px\:\$16 {
  ///   padding-right: 4rem;
  ///   padding-left: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .px\:\$20 {
  ///   padding-right: 5rem;
  ///   padding-left: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .px\:\$24 {
  ///   padding-right: 6rem;
  ///   padding-left: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .px\:\$28 {
  ///   padding-right: 7rem;
  ///   padding-left: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .px\:\$32 {
  ///   padding-right: 8rem;
  ///   padding-left: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .px\:\$36 {
  ///   padding-right: 9rem;
  ///   padding-left: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .px\:\$40 {
  ///   padding-right: 10rem;
  ///   padding-left: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .px\:\$44 {
  ///   padding-right: 11rem;
  ///   padding-left: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .px\:\$48 {
  ///   padding-right: 12rem;
  ///   padding-left: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .px\:\$52 {
  ///   padding-right: 13rem;
  ///   padding-left: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .px\:\$56 {
  ///   padding-right: 14rem;
  ///   padding-left: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .px\:\$60 {
  ///   padding-right: 15rem;
  ///   padding-left: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .px\:\$64 {
  ///   padding-right: 16rem;
  ///   padding-left: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .px\:\$72 {
  ///   padding-right: 18rem;
  ///   padding-left: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .px\:\$80 {
  ///   padding-right: 20rem;
  ///   padding-left: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .px\:\$96 {
  ///   padding-right: 24rem;
  ///   padding-left: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .px\:\$px {
  ///   padding-right: 1px;
  ///   padding-left: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .px\:\$0\.5 {
  ///   padding-right: 0.125rem;
  ///   padding-left: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .px\:\$1\.5 {
  ///   padding-right: 0.375rem;
  ///   padding-left: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .px\:\$2\.5 {
  ///   padding-right: 0.625rem;
  ///   padding-left: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .px\:\$3\.5 {
  ///   padding-right: 0.875rem;
  ///   padding-left: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .px\:\$-1 {
  ///   padding-right: -0.25rem;
  ///   padding-left: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .px\:\$-2 {
  ///   padding-right: -0.5rem;
  ///   padding-left: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .px\:\$-3 {
  ///   padding-right: -0.75rem;
  ///   padding-left: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .px\:\$-4 {
  ///   padding-right: -1rem;
  ///   padding-left: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .px\:\$-5 {
  ///   padding-right: -1.25rem;
  ///   padding-left: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .px\:\$-6 {
  ///   padding-right: -1.5rem;
  ///   padding-left: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .px\:\$-7 {
  ///   padding-right: -1.75rem;
  ///   padding-left: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .px\:\$-8 {
  ///   padding-right: -2rem;
  ///   padding-left: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .px\:\$-9 {
  ///   padding-right: -2.25rem;
  ///   padding-left: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .px\:\$-10 {
  ///   padding-right: -2.5rem;
  ///   padding-left: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .px\:\$-11 {
  ///   padding-right: -2.75rem;
  ///   padding-left: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .px\:\$-12 {
  ///   padding-right: -3rem;
  ///   padding-left: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .px\:\$-14 {
  ///   padding-right: -3.5rem;
  ///   padding-left: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .px\:\$-16 {
  ///   padding-right: -4rem;
  ///   padding-left: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .px\:\$-20 {
  ///   padding-right: -5rem;
  ///   padding-left: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .px\:\$-24 {
  ///   padding-right: -6rem;
  ///   padding-left: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .px\:\$-28 {
  ///   padding-right: -7rem;
  ///   padding-left: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .px\:\$-32 {
  ///   padding-right: -8rem;
  ///   padding-left: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .px\:\$-36 {
  ///   padding-right: -9rem;
  ///   padding-left: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .px\:\$-40 {
  ///   padding-right: -10rem;
  ///   padding-left: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .px\:\$-44 {
  ///   padding-right: -11rem;
  ///   padding-left: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .px\:\$-48 {
  ///   padding-right: -12rem;
  ///   padding-left: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .px\:\$-52 {
  ///   padding-right: -13rem;
  ///   padding-left: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .px\:\$-56 {
  ///   padding-right: -14rem;
  ///   padding-left: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .px\:\$-60 {
  ///   padding-right: -15rem;
  ///   padding-left: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .px\:\$-64 {
  ///   padding-right: -16rem;
  ///   padding-left: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .px\:\$-72 {
  ///   padding-right: -18rem;
  ///   padding-left: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .px\:\$-80 {
  ///   padding-right: -20rem;
  ///   padding-left: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .px\:\$-96 {
  ///   padding-right: -24rem;
  ///   padding-left: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .px\:\$-px {
  ///   padding-right: -1px;
  ///   padding-left: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .px\:\$-0\.5 {
  ///   padding-right: -0.125rem;
  ///   padding-left: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .px\:\$-1\.5 {
  ///   padding-right: -0.375rem;
  ///   padding-left: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .px\:\$-2\.5 {
  ///   padding-right: -0.625rem;
  ///   padding-left: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .px\:\$-3\.5 {
  ///   padding-right: -0.875rem;
  ///   padding-left: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPx for GeneratedAtomPx {}
pub struct GeneratedAtomPBlock(String);
impl GeneratedSkribbleValue for GeneratedAtomPBlock {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPBlock: GeneratedSkribbleValue {
  /// ```css
  /// .p-block\:\$0 {
  ///   padding-block: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .p-block\:\$1 {
  ///   padding-block: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .p-block\:\$2 {
  ///   padding-block: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .p-block\:\$3 {
  ///   padding-block: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .p-block\:\$4 {
  ///   padding-block: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .p-block\:\$5 {
  ///   padding-block: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .p-block\:\$6 {
  ///   padding-block: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .p-block\:\$7 {
  ///   padding-block: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .p-block\:\$8 {
  ///   padding-block: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .p-block\:\$9 {
  ///   padding-block: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .p-block\:\$10 {
  ///   padding-block: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .p-block\:\$11 {
  ///   padding-block: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .p-block\:\$12 {
  ///   padding-block: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .p-block\:\$14 {
  ///   padding-block: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .p-block\:\$16 {
  ///   padding-block: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .p-block\:\$20 {
  ///   padding-block: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .p-block\:\$24 {
  ///   padding-block: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .p-block\:\$28 {
  ///   padding-block: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .p-block\:\$32 {
  ///   padding-block: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .p-block\:\$36 {
  ///   padding-block: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .p-block\:\$40 {
  ///   padding-block: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .p-block\:\$44 {
  ///   padding-block: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .p-block\:\$48 {
  ///   padding-block: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .p-block\:\$52 {
  ///   padding-block: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .p-block\:\$56 {
  ///   padding-block: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .p-block\:\$60 {
  ///   padding-block: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .p-block\:\$64 {
  ///   padding-block: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .p-block\:\$72 {
  ///   padding-block: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .p-block\:\$80 {
  ///   padding-block: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .p-block\:\$96 {
  ///   padding-block: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .p-block\:\$px {
  ///   padding-block: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .p-block\:\$0\.5 {
  ///   padding-block: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .p-block\:\$1\.5 {
  ///   padding-block: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .p-block\:\$2\.5 {
  ///   padding-block: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .p-block\:\$3\.5 {
  ///   padding-block: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .p-block\:\$-1 {
  ///   padding-block: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .p-block\:\$-2 {
  ///   padding-block: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .p-block\:\$-3 {
  ///   padding-block: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .p-block\:\$-4 {
  ///   padding-block: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .p-block\:\$-5 {
  ///   padding-block: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .p-block\:\$-6 {
  ///   padding-block: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .p-block\:\$-7 {
  ///   padding-block: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .p-block\:\$-8 {
  ///   padding-block: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .p-block\:\$-9 {
  ///   padding-block: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .p-block\:\$-10 {
  ///   padding-block: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .p-block\:\$-11 {
  ///   padding-block: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .p-block\:\$-12 {
  ///   padding-block: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .p-block\:\$-14 {
  ///   padding-block: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .p-block\:\$-16 {
  ///   padding-block: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .p-block\:\$-20 {
  ///   padding-block: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .p-block\:\$-24 {
  ///   padding-block: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .p-block\:\$-28 {
  ///   padding-block: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .p-block\:\$-32 {
  ///   padding-block: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .p-block\:\$-36 {
  ///   padding-block: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .p-block\:\$-40 {
  ///   padding-block: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .p-block\:\$-44 {
  ///   padding-block: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .p-block\:\$-48 {
  ///   padding-block: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .p-block\:\$-52 {
  ///   padding-block: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .p-block\:\$-56 {
  ///   padding-block: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .p-block\:\$-60 {
  ///   padding-block: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .p-block\:\$-64 {
  ///   padding-block: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .p-block\:\$-72 {
  ///   padding-block: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .p-block\:\$-80 {
  ///   padding-block: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .p-block\:\$-96 {
  ///   padding-block: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .p-block\:\$-px {
  ///   padding-block: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .p-block\:\$-0\.5 {
  ///   padding-block: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .p-block\:\$-1\.5 {
  ///   padding-block: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .p-block\:\$-2\.5 {
  ///   padding-block: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .p-block\:\$-3\.5 {
  ///   padding-block: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPBlock for GeneratedAtomPBlock {}
pub struct GeneratedAtomPbs(String);
impl GeneratedSkribbleValue for GeneratedAtomPbs {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPbs: GeneratedSkribbleValue {
  /// ```css
  /// .pbs\:\$0 {
  ///   padding-block-start: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .pbs\:\$1 {
  ///   padding-block-start: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .pbs\:\$2 {
  ///   padding-block-start: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .pbs\:\$3 {
  ///   padding-block-start: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .pbs\:\$4 {
  ///   padding-block-start: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .pbs\:\$5 {
  ///   padding-block-start: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .pbs\:\$6 {
  ///   padding-block-start: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .pbs\:\$7 {
  ///   padding-block-start: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .pbs\:\$8 {
  ///   padding-block-start: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .pbs\:\$9 {
  ///   padding-block-start: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .pbs\:\$10 {
  ///   padding-block-start: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .pbs\:\$11 {
  ///   padding-block-start: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .pbs\:\$12 {
  ///   padding-block-start: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .pbs\:\$14 {
  ///   padding-block-start: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .pbs\:\$16 {
  ///   padding-block-start: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .pbs\:\$20 {
  ///   padding-block-start: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .pbs\:\$24 {
  ///   padding-block-start: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .pbs\:\$28 {
  ///   padding-block-start: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .pbs\:\$32 {
  ///   padding-block-start: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .pbs\:\$36 {
  ///   padding-block-start: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .pbs\:\$40 {
  ///   padding-block-start: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .pbs\:\$44 {
  ///   padding-block-start: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .pbs\:\$48 {
  ///   padding-block-start: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .pbs\:\$52 {
  ///   padding-block-start: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .pbs\:\$56 {
  ///   padding-block-start: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .pbs\:\$60 {
  ///   padding-block-start: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .pbs\:\$64 {
  ///   padding-block-start: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .pbs\:\$72 {
  ///   padding-block-start: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .pbs\:\$80 {
  ///   padding-block-start: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .pbs\:\$96 {
  ///   padding-block-start: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .pbs\:\$px {
  ///   padding-block-start: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .pbs\:\$0\.5 {
  ///   padding-block-start: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .pbs\:\$1\.5 {
  ///   padding-block-start: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .pbs\:\$2\.5 {
  ///   padding-block-start: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .pbs\:\$3\.5 {
  ///   padding-block-start: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .pbs\:\$-1 {
  ///   padding-block-start: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .pbs\:\$-2 {
  ///   padding-block-start: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .pbs\:\$-3 {
  ///   padding-block-start: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .pbs\:\$-4 {
  ///   padding-block-start: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .pbs\:\$-5 {
  ///   padding-block-start: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .pbs\:\$-6 {
  ///   padding-block-start: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .pbs\:\$-7 {
  ///   padding-block-start: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .pbs\:\$-8 {
  ///   padding-block-start: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .pbs\:\$-9 {
  ///   padding-block-start: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .pbs\:\$-10 {
  ///   padding-block-start: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .pbs\:\$-11 {
  ///   padding-block-start: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .pbs\:\$-12 {
  ///   padding-block-start: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .pbs\:\$-14 {
  ///   padding-block-start: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .pbs\:\$-16 {
  ///   padding-block-start: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .pbs\:\$-20 {
  ///   padding-block-start: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .pbs\:\$-24 {
  ///   padding-block-start: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .pbs\:\$-28 {
  ///   padding-block-start: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .pbs\:\$-32 {
  ///   padding-block-start: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .pbs\:\$-36 {
  ///   padding-block-start: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .pbs\:\$-40 {
  ///   padding-block-start: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .pbs\:\$-44 {
  ///   padding-block-start: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .pbs\:\$-48 {
  ///   padding-block-start: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .pbs\:\$-52 {
  ///   padding-block-start: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .pbs\:\$-56 {
  ///   padding-block-start: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .pbs\:\$-60 {
  ///   padding-block-start: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .pbs\:\$-64 {
  ///   padding-block-start: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .pbs\:\$-72 {
  ///   padding-block-start: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .pbs\:\$-80 {
  ///   padding-block-start: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .pbs\:\$-96 {
  ///   padding-block-start: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .pbs\:\$-px {
  ///   padding-block-start: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .pbs\:\$-0\.5 {
  ///   padding-block-start: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .pbs\:\$-1\.5 {
  ///   padding-block-start: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .pbs\:\$-2\.5 {
  ///   padding-block-start: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .pbs\:\$-3\.5 {
  ///   padding-block-start: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPbs for GeneratedAtomPbs {}
pub struct GeneratedAtomPbe(String);
impl GeneratedSkribbleValue for GeneratedAtomPbe {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPbe: GeneratedSkribbleValue {
  /// ```css
  /// .pbe\:\$0 {
  ///   padding-block-end: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .pbe\:\$1 {
  ///   padding-block-end: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .pbe\:\$2 {
  ///   padding-block-end: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .pbe\:\$3 {
  ///   padding-block-end: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .pbe\:\$4 {
  ///   padding-block-end: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .pbe\:\$5 {
  ///   padding-block-end: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .pbe\:\$6 {
  ///   padding-block-end: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .pbe\:\$7 {
  ///   padding-block-end: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .pbe\:\$8 {
  ///   padding-block-end: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .pbe\:\$9 {
  ///   padding-block-end: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .pbe\:\$10 {
  ///   padding-block-end: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .pbe\:\$11 {
  ///   padding-block-end: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .pbe\:\$12 {
  ///   padding-block-end: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .pbe\:\$14 {
  ///   padding-block-end: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .pbe\:\$16 {
  ///   padding-block-end: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .pbe\:\$20 {
  ///   padding-block-end: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .pbe\:\$24 {
  ///   padding-block-end: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .pbe\:\$28 {
  ///   padding-block-end: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .pbe\:\$32 {
  ///   padding-block-end: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .pbe\:\$36 {
  ///   padding-block-end: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .pbe\:\$40 {
  ///   padding-block-end: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .pbe\:\$44 {
  ///   padding-block-end: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .pbe\:\$48 {
  ///   padding-block-end: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .pbe\:\$52 {
  ///   padding-block-end: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .pbe\:\$56 {
  ///   padding-block-end: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .pbe\:\$60 {
  ///   padding-block-end: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .pbe\:\$64 {
  ///   padding-block-end: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .pbe\:\$72 {
  ///   padding-block-end: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .pbe\:\$80 {
  ///   padding-block-end: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .pbe\:\$96 {
  ///   padding-block-end: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .pbe\:\$px {
  ///   padding-block-end: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .pbe\:\$0\.5 {
  ///   padding-block-end: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .pbe\:\$1\.5 {
  ///   padding-block-end: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .pbe\:\$2\.5 {
  ///   padding-block-end: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .pbe\:\$3\.5 {
  ///   padding-block-end: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .pbe\:\$-1 {
  ///   padding-block-end: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .pbe\:\$-2 {
  ///   padding-block-end: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .pbe\:\$-3 {
  ///   padding-block-end: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .pbe\:\$-4 {
  ///   padding-block-end: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .pbe\:\$-5 {
  ///   padding-block-end: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .pbe\:\$-6 {
  ///   padding-block-end: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .pbe\:\$-7 {
  ///   padding-block-end: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .pbe\:\$-8 {
  ///   padding-block-end: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .pbe\:\$-9 {
  ///   padding-block-end: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .pbe\:\$-10 {
  ///   padding-block-end: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .pbe\:\$-11 {
  ///   padding-block-end: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .pbe\:\$-12 {
  ///   padding-block-end: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .pbe\:\$-14 {
  ///   padding-block-end: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .pbe\:\$-16 {
  ///   padding-block-end: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .pbe\:\$-20 {
  ///   padding-block-end: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .pbe\:\$-24 {
  ///   padding-block-end: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .pbe\:\$-28 {
  ///   padding-block-end: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .pbe\:\$-32 {
  ///   padding-block-end: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .pbe\:\$-36 {
  ///   padding-block-end: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .pbe\:\$-40 {
  ///   padding-block-end: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .pbe\:\$-44 {
  ///   padding-block-end: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .pbe\:\$-48 {
  ///   padding-block-end: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .pbe\:\$-52 {
  ///   padding-block-end: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .pbe\:\$-56 {
  ///   padding-block-end: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .pbe\:\$-60 {
  ///   padding-block-end: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .pbe\:\$-64 {
  ///   padding-block-end: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .pbe\:\$-72 {
  ///   padding-block-end: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .pbe\:\$-80 {
  ///   padding-block-end: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .pbe\:\$-96 {
  ///   padding-block-end: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .pbe\:\$-px {
  ///   padding-block-end: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .pbe\:\$-0\.5 {
  ///   padding-block-end: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .pbe\:\$-1\.5 {
  ///   padding-block-end: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .pbe\:\$-2\.5 {
  ///   padding-block-end: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .pbe\:\$-3\.5 {
  ///   padding-block-end: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPbe for GeneratedAtomPbe {}
pub struct GeneratedAtomPInline(String);
impl GeneratedSkribbleValue for GeneratedAtomPInline {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPInline: GeneratedSkribbleValue {
  /// ```css
  /// .p-inline\:\$0 {
  ///   padding-inline: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .p-inline\:\$1 {
  ///   padding-inline: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .p-inline\:\$2 {
  ///   padding-inline: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .p-inline\:\$3 {
  ///   padding-inline: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .p-inline\:\$4 {
  ///   padding-inline: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .p-inline\:\$5 {
  ///   padding-inline: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .p-inline\:\$6 {
  ///   padding-inline: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .p-inline\:\$7 {
  ///   padding-inline: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .p-inline\:\$8 {
  ///   padding-inline: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .p-inline\:\$9 {
  ///   padding-inline: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .p-inline\:\$10 {
  ///   padding-inline: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .p-inline\:\$11 {
  ///   padding-inline: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .p-inline\:\$12 {
  ///   padding-inline: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .p-inline\:\$14 {
  ///   padding-inline: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .p-inline\:\$16 {
  ///   padding-inline: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .p-inline\:\$20 {
  ///   padding-inline: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .p-inline\:\$24 {
  ///   padding-inline: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .p-inline\:\$28 {
  ///   padding-inline: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .p-inline\:\$32 {
  ///   padding-inline: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .p-inline\:\$36 {
  ///   padding-inline: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .p-inline\:\$40 {
  ///   padding-inline: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .p-inline\:\$44 {
  ///   padding-inline: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .p-inline\:\$48 {
  ///   padding-inline: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .p-inline\:\$52 {
  ///   padding-inline: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .p-inline\:\$56 {
  ///   padding-inline: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .p-inline\:\$60 {
  ///   padding-inline: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .p-inline\:\$64 {
  ///   padding-inline: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .p-inline\:\$72 {
  ///   padding-inline: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .p-inline\:\$80 {
  ///   padding-inline: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .p-inline\:\$96 {
  ///   padding-inline: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .p-inline\:\$px {
  ///   padding-inline: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .p-inline\:\$0\.5 {
  ///   padding-inline: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .p-inline\:\$1\.5 {
  ///   padding-inline: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .p-inline\:\$2\.5 {
  ///   padding-inline: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .p-inline\:\$3\.5 {
  ///   padding-inline: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .p-inline\:\$-1 {
  ///   padding-inline: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .p-inline\:\$-2 {
  ///   padding-inline: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .p-inline\:\$-3 {
  ///   padding-inline: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .p-inline\:\$-4 {
  ///   padding-inline: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .p-inline\:\$-5 {
  ///   padding-inline: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .p-inline\:\$-6 {
  ///   padding-inline: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .p-inline\:\$-7 {
  ///   padding-inline: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .p-inline\:\$-8 {
  ///   padding-inline: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .p-inline\:\$-9 {
  ///   padding-inline: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .p-inline\:\$-10 {
  ///   padding-inline: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .p-inline\:\$-11 {
  ///   padding-inline: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .p-inline\:\$-12 {
  ///   padding-inline: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .p-inline\:\$-14 {
  ///   padding-inline: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .p-inline\:\$-16 {
  ///   padding-inline: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .p-inline\:\$-20 {
  ///   padding-inline: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .p-inline\:\$-24 {
  ///   padding-inline: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .p-inline\:\$-28 {
  ///   padding-inline: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .p-inline\:\$-32 {
  ///   padding-inline: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .p-inline\:\$-36 {
  ///   padding-inline: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .p-inline\:\$-40 {
  ///   padding-inline: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .p-inline\:\$-44 {
  ///   padding-inline: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .p-inline\:\$-48 {
  ///   padding-inline: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .p-inline\:\$-52 {
  ///   padding-inline: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .p-inline\:\$-56 {
  ///   padding-inline: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .p-inline\:\$-60 {
  ///   padding-inline: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .p-inline\:\$-64 {
  ///   padding-inline: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .p-inline\:\$-72 {
  ///   padding-inline: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .p-inline\:\$-80 {
  ///   padding-inline: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .p-inline\:\$-96 {
  ///   padding-inline: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .p-inline\:\$-px {
  ///   padding-inline: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .p-inline\:\$-0\.5 {
  ///   padding-inline: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .p-inline\:\$-1\.5 {
  ///   padding-inline: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .p-inline\:\$-2\.5 {
  ///   padding-inline: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .p-inline\:\$-3\.5 {
  ///   padding-inline: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPInline for GeneratedAtomPInline {}
pub struct GeneratedAtomPs(String);
impl GeneratedSkribbleValue for GeneratedAtomPs {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPs: GeneratedSkribbleValue {
  /// ```css
  /// .ps\:\$0 {
  ///   padding-inline-start: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .ps\:\$1 {
  ///   padding-inline-start: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .ps\:\$2 {
  ///   padding-inline-start: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .ps\:\$3 {
  ///   padding-inline-start: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .ps\:\$4 {
  ///   padding-inline-start: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .ps\:\$5 {
  ///   padding-inline-start: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .ps\:\$6 {
  ///   padding-inline-start: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .ps\:\$7 {
  ///   padding-inline-start: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .ps\:\$8 {
  ///   padding-inline-start: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .ps\:\$9 {
  ///   padding-inline-start: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .ps\:\$10 {
  ///   padding-inline-start: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .ps\:\$11 {
  ///   padding-inline-start: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .ps\:\$12 {
  ///   padding-inline-start: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .ps\:\$14 {
  ///   padding-inline-start: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .ps\:\$16 {
  ///   padding-inline-start: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .ps\:\$20 {
  ///   padding-inline-start: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .ps\:\$24 {
  ///   padding-inline-start: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .ps\:\$28 {
  ///   padding-inline-start: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .ps\:\$32 {
  ///   padding-inline-start: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .ps\:\$36 {
  ///   padding-inline-start: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .ps\:\$40 {
  ///   padding-inline-start: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .ps\:\$44 {
  ///   padding-inline-start: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .ps\:\$48 {
  ///   padding-inline-start: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .ps\:\$52 {
  ///   padding-inline-start: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .ps\:\$56 {
  ///   padding-inline-start: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .ps\:\$60 {
  ///   padding-inline-start: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .ps\:\$64 {
  ///   padding-inline-start: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .ps\:\$72 {
  ///   padding-inline-start: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .ps\:\$80 {
  ///   padding-inline-start: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .ps\:\$96 {
  ///   padding-inline-start: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .ps\:\$px {
  ///   padding-inline-start: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .ps\:\$0\.5 {
  ///   padding-inline-start: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .ps\:\$1\.5 {
  ///   padding-inline-start: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .ps\:\$2\.5 {
  ///   padding-inline-start: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .ps\:\$3\.5 {
  ///   padding-inline-start: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .ps\:\$-1 {
  ///   padding-inline-start: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .ps\:\$-2 {
  ///   padding-inline-start: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .ps\:\$-3 {
  ///   padding-inline-start: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .ps\:\$-4 {
  ///   padding-inline-start: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .ps\:\$-5 {
  ///   padding-inline-start: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .ps\:\$-6 {
  ///   padding-inline-start: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .ps\:\$-7 {
  ///   padding-inline-start: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .ps\:\$-8 {
  ///   padding-inline-start: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .ps\:\$-9 {
  ///   padding-inline-start: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .ps\:\$-10 {
  ///   padding-inline-start: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .ps\:\$-11 {
  ///   padding-inline-start: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .ps\:\$-12 {
  ///   padding-inline-start: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .ps\:\$-14 {
  ///   padding-inline-start: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .ps\:\$-16 {
  ///   padding-inline-start: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .ps\:\$-20 {
  ///   padding-inline-start: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .ps\:\$-24 {
  ///   padding-inline-start: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .ps\:\$-28 {
  ///   padding-inline-start: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .ps\:\$-32 {
  ///   padding-inline-start: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .ps\:\$-36 {
  ///   padding-inline-start: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .ps\:\$-40 {
  ///   padding-inline-start: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .ps\:\$-44 {
  ///   padding-inline-start: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .ps\:\$-48 {
  ///   padding-inline-start: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .ps\:\$-52 {
  ///   padding-inline-start: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .ps\:\$-56 {
  ///   padding-inline-start: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .ps\:\$-60 {
  ///   padding-inline-start: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .ps\:\$-64 {
  ///   padding-inline-start: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .ps\:\$-72 {
  ///   padding-inline-start: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .ps\:\$-80 {
  ///   padding-inline-start: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .ps\:\$-96 {
  ///   padding-inline-start: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .ps\:\$-px {
  ///   padding-inline-start: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .ps\:\$-0\.5 {
  ///   padding-inline-start: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .ps\:\$-1\.5 {
  ///   padding-inline-start: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .ps\:\$-2\.5 {
  ///   padding-inline-start: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .ps\:\$-3\.5 {
  ///   padding-inline-start: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPs for GeneratedAtomPs {}
pub struct GeneratedAtomPe(String);
impl GeneratedSkribbleValue for GeneratedAtomPe {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPe: GeneratedSkribbleValue {
  /// ```css
  /// .pe\:\$0 {
  ///   padding-inline-end: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .pe\:\$1 {
  ///   padding-inline-end: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .pe\:\$2 {
  ///   padding-inline-end: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .pe\:\$3 {
  ///   padding-inline-end: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .pe\:\$4 {
  ///   padding-inline-end: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .pe\:\$5 {
  ///   padding-inline-end: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .pe\:\$6 {
  ///   padding-inline-end: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .pe\:\$7 {
  ///   padding-inline-end: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .pe\:\$8 {
  ///   padding-inline-end: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .pe\:\$9 {
  ///   padding-inline-end: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .pe\:\$10 {
  ///   padding-inline-end: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .pe\:\$11 {
  ///   padding-inline-end: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .pe\:\$12 {
  ///   padding-inline-end: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .pe\:\$14 {
  ///   padding-inline-end: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .pe\:\$16 {
  ///   padding-inline-end: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .pe\:\$20 {
  ///   padding-inline-end: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .pe\:\$24 {
  ///   padding-inline-end: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .pe\:\$28 {
  ///   padding-inline-end: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .pe\:\$32 {
  ///   padding-inline-end: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .pe\:\$36 {
  ///   padding-inline-end: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .pe\:\$40 {
  ///   padding-inline-end: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .pe\:\$44 {
  ///   padding-inline-end: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .pe\:\$48 {
  ///   padding-inline-end: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .pe\:\$52 {
  ///   padding-inline-end: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .pe\:\$56 {
  ///   padding-inline-end: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .pe\:\$60 {
  ///   padding-inline-end: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .pe\:\$64 {
  ///   padding-inline-end: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .pe\:\$72 {
  ///   padding-inline-end: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .pe\:\$80 {
  ///   padding-inline-end: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .pe\:\$96 {
  ///   padding-inline-end: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .pe\:\$px {
  ///   padding-inline-end: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .pe\:\$0\.5 {
  ///   padding-inline-end: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .pe\:\$1\.5 {
  ///   padding-inline-end: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .pe\:\$2\.5 {
  ///   padding-inline-end: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .pe\:\$3\.5 {
  ///   padding-inline-end: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .pe\:\$-1 {
  ///   padding-inline-end: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .pe\:\$-2 {
  ///   padding-inline-end: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .pe\:\$-3 {
  ///   padding-inline-end: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .pe\:\$-4 {
  ///   padding-inline-end: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .pe\:\$-5 {
  ///   padding-inline-end: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .pe\:\$-6 {
  ///   padding-inline-end: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .pe\:\$-7 {
  ///   padding-inline-end: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .pe\:\$-8 {
  ///   padding-inline-end: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .pe\:\$-9 {
  ///   padding-inline-end: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .pe\:\$-10 {
  ///   padding-inline-end: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .pe\:\$-11 {
  ///   padding-inline-end: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .pe\:\$-12 {
  ///   padding-inline-end: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .pe\:\$-14 {
  ///   padding-inline-end: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .pe\:\$-16 {
  ///   padding-inline-end: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .pe\:\$-20 {
  ///   padding-inline-end: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .pe\:\$-24 {
  ///   padding-inline-end: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .pe\:\$-28 {
  ///   padding-inline-end: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .pe\:\$-32 {
  ///   padding-inline-end: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .pe\:\$-36 {
  ///   padding-inline-end: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .pe\:\$-40 {
  ///   padding-inline-end: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .pe\:\$-44 {
  ///   padding-inline-end: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .pe\:\$-48 {
  ///   padding-inline-end: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .pe\:\$-52 {
  ///   padding-inline-end: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .pe\:\$-56 {
  ///   padding-inline-end: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .pe\:\$-60 {
  ///   padding-inline-end: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .pe\:\$-64 {
  ///   padding-inline-end: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .pe\:\$-72 {
  ///   padding-inline-end: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .pe\:\$-80 {
  ///   padding-inline-end: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .pe\:\$-96 {
  ///   padding-inline-end: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .pe\:\$-px {
  ///   padding-inline-end: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .pe\:\$-0\.5 {
  ///   padding-inline-end: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .pe\:\$-1\.5 {
  ///   padding-inline-end: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .pe\:\$-2\.5 {
  ///   padding-inline-end: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .pe\:\$-3\.5 {
  ///   padding-inline-end: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPe for GeneratedAtomPe {}
pub struct GeneratedAtomPt(String);
impl GeneratedSkribbleValue for GeneratedAtomPt {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPt: GeneratedSkribbleValue {
  /// ```css
  /// .pt\:\$0 {
  ///   padding-top: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .pt\:\$1 {
  ///   padding-top: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .pt\:\$2 {
  ///   padding-top: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .pt\:\$3 {
  ///   padding-top: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .pt\:\$4 {
  ///   padding-top: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .pt\:\$5 {
  ///   padding-top: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .pt\:\$6 {
  ///   padding-top: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .pt\:\$7 {
  ///   padding-top: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .pt\:\$8 {
  ///   padding-top: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .pt\:\$9 {
  ///   padding-top: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .pt\:\$10 {
  ///   padding-top: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .pt\:\$11 {
  ///   padding-top: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .pt\:\$12 {
  ///   padding-top: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .pt\:\$14 {
  ///   padding-top: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .pt\:\$16 {
  ///   padding-top: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .pt\:\$20 {
  ///   padding-top: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .pt\:\$24 {
  ///   padding-top: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .pt\:\$28 {
  ///   padding-top: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .pt\:\$32 {
  ///   padding-top: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .pt\:\$36 {
  ///   padding-top: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .pt\:\$40 {
  ///   padding-top: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .pt\:\$44 {
  ///   padding-top: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .pt\:\$48 {
  ///   padding-top: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .pt\:\$52 {
  ///   padding-top: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .pt\:\$56 {
  ///   padding-top: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .pt\:\$60 {
  ///   padding-top: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .pt\:\$64 {
  ///   padding-top: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .pt\:\$72 {
  ///   padding-top: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .pt\:\$80 {
  ///   padding-top: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .pt\:\$96 {
  ///   padding-top: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .pt\:\$px {
  ///   padding-top: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .pt\:\$0\.5 {
  ///   padding-top: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .pt\:\$1\.5 {
  ///   padding-top: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .pt\:\$2\.5 {
  ///   padding-top: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .pt\:\$3\.5 {
  ///   padding-top: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .pt\:\$-1 {
  ///   padding-top: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .pt\:\$-2 {
  ///   padding-top: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .pt\:\$-3 {
  ///   padding-top: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .pt\:\$-4 {
  ///   padding-top: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .pt\:\$-5 {
  ///   padding-top: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .pt\:\$-6 {
  ///   padding-top: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .pt\:\$-7 {
  ///   padding-top: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .pt\:\$-8 {
  ///   padding-top: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .pt\:\$-9 {
  ///   padding-top: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .pt\:\$-10 {
  ///   padding-top: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .pt\:\$-11 {
  ///   padding-top: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .pt\:\$-12 {
  ///   padding-top: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .pt\:\$-14 {
  ///   padding-top: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .pt\:\$-16 {
  ///   padding-top: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .pt\:\$-20 {
  ///   padding-top: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .pt\:\$-24 {
  ///   padding-top: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .pt\:\$-28 {
  ///   padding-top: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .pt\:\$-32 {
  ///   padding-top: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .pt\:\$-36 {
  ///   padding-top: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .pt\:\$-40 {
  ///   padding-top: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .pt\:\$-44 {
  ///   padding-top: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .pt\:\$-48 {
  ///   padding-top: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .pt\:\$-52 {
  ///   padding-top: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .pt\:\$-56 {
  ///   padding-top: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .pt\:\$-60 {
  ///   padding-top: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .pt\:\$-64 {
  ///   padding-top: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .pt\:\$-72 {
  ///   padding-top: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .pt\:\$-80 {
  ///   padding-top: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .pt\:\$-96 {
  ///   padding-top: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .pt\:\$-px {
  ///   padding-top: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .pt\:\$-0\.5 {
  ///   padding-top: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .pt\:\$-1\.5 {
  ///   padding-top: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .pt\:\$-2\.5 {
  ///   padding-top: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .pt\:\$-3\.5 {
  ///   padding-top: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPt for GeneratedAtomPt {}
pub struct GeneratedAtomPr(String);
impl GeneratedSkribbleValue for GeneratedAtomPr {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPr: GeneratedSkribbleValue {
  /// ```css
  /// .pr\:\$0 {
  ///   padding-right: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .pr\:\$1 {
  ///   padding-right: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .pr\:\$2 {
  ///   padding-right: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .pr\:\$3 {
  ///   padding-right: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .pr\:\$4 {
  ///   padding-right: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .pr\:\$5 {
  ///   padding-right: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .pr\:\$6 {
  ///   padding-right: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .pr\:\$7 {
  ///   padding-right: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .pr\:\$8 {
  ///   padding-right: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .pr\:\$9 {
  ///   padding-right: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .pr\:\$10 {
  ///   padding-right: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .pr\:\$11 {
  ///   padding-right: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .pr\:\$12 {
  ///   padding-right: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .pr\:\$14 {
  ///   padding-right: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .pr\:\$16 {
  ///   padding-right: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .pr\:\$20 {
  ///   padding-right: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .pr\:\$24 {
  ///   padding-right: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .pr\:\$28 {
  ///   padding-right: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .pr\:\$32 {
  ///   padding-right: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .pr\:\$36 {
  ///   padding-right: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .pr\:\$40 {
  ///   padding-right: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .pr\:\$44 {
  ///   padding-right: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .pr\:\$48 {
  ///   padding-right: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .pr\:\$52 {
  ///   padding-right: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .pr\:\$56 {
  ///   padding-right: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .pr\:\$60 {
  ///   padding-right: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .pr\:\$64 {
  ///   padding-right: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .pr\:\$72 {
  ///   padding-right: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .pr\:\$80 {
  ///   padding-right: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .pr\:\$96 {
  ///   padding-right: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .pr\:\$px {
  ///   padding-right: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .pr\:\$0\.5 {
  ///   padding-right: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .pr\:\$1\.5 {
  ///   padding-right: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .pr\:\$2\.5 {
  ///   padding-right: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .pr\:\$3\.5 {
  ///   padding-right: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .pr\:\$-1 {
  ///   padding-right: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .pr\:\$-2 {
  ///   padding-right: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .pr\:\$-3 {
  ///   padding-right: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .pr\:\$-4 {
  ///   padding-right: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .pr\:\$-5 {
  ///   padding-right: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .pr\:\$-6 {
  ///   padding-right: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .pr\:\$-7 {
  ///   padding-right: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .pr\:\$-8 {
  ///   padding-right: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .pr\:\$-9 {
  ///   padding-right: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .pr\:\$-10 {
  ///   padding-right: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .pr\:\$-11 {
  ///   padding-right: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .pr\:\$-12 {
  ///   padding-right: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .pr\:\$-14 {
  ///   padding-right: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .pr\:\$-16 {
  ///   padding-right: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .pr\:\$-20 {
  ///   padding-right: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .pr\:\$-24 {
  ///   padding-right: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .pr\:\$-28 {
  ///   padding-right: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .pr\:\$-32 {
  ///   padding-right: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .pr\:\$-36 {
  ///   padding-right: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .pr\:\$-40 {
  ///   padding-right: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .pr\:\$-44 {
  ///   padding-right: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .pr\:\$-48 {
  ///   padding-right: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .pr\:\$-52 {
  ///   padding-right: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .pr\:\$-56 {
  ///   padding-right: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .pr\:\$-60 {
  ///   padding-right: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .pr\:\$-64 {
  ///   padding-right: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .pr\:\$-72 {
  ///   padding-right: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .pr\:\$-80 {
  ///   padding-right: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .pr\:\$-96 {
  ///   padding-right: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .pr\:\$-px {
  ///   padding-right: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .pr\:\$-0\.5 {
  ///   padding-right: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .pr\:\$-1\.5 {
  ///   padding-right: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .pr\:\$-2\.5 {
  ///   padding-right: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .pr\:\$-3\.5 {
  ///   padding-right: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPr for GeneratedAtomPr {}
pub struct GeneratedAtomPb(String);
impl GeneratedSkribbleValue for GeneratedAtomPb {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPb: GeneratedSkribbleValue {
  /// ```css
  /// .pb\:\$0 {
  ///   padding-bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .pb\:\$1 {
  ///   padding-bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .pb\:\$2 {
  ///   padding-bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .pb\:\$3 {
  ///   padding-bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .pb\:\$4 {
  ///   padding-bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .pb\:\$5 {
  ///   padding-bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .pb\:\$6 {
  ///   padding-bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .pb\:\$7 {
  ///   padding-bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .pb\:\$8 {
  ///   padding-bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .pb\:\$9 {
  ///   padding-bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .pb\:\$10 {
  ///   padding-bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .pb\:\$11 {
  ///   padding-bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .pb\:\$12 {
  ///   padding-bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .pb\:\$14 {
  ///   padding-bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .pb\:\$16 {
  ///   padding-bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .pb\:\$20 {
  ///   padding-bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .pb\:\$24 {
  ///   padding-bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .pb\:\$28 {
  ///   padding-bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .pb\:\$32 {
  ///   padding-bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .pb\:\$36 {
  ///   padding-bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .pb\:\$40 {
  ///   padding-bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .pb\:\$44 {
  ///   padding-bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .pb\:\$48 {
  ///   padding-bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .pb\:\$52 {
  ///   padding-bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .pb\:\$56 {
  ///   padding-bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .pb\:\$60 {
  ///   padding-bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .pb\:\$64 {
  ///   padding-bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .pb\:\$72 {
  ///   padding-bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .pb\:\$80 {
  ///   padding-bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .pb\:\$96 {
  ///   padding-bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .pb\:\$px {
  ///   padding-bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .pb\:\$0\.5 {
  ///   padding-bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .pb\:\$1\.5 {
  ///   padding-bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .pb\:\$2\.5 {
  ///   padding-bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .pb\:\$3\.5 {
  ///   padding-bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .pb\:\$-1 {
  ///   padding-bottom: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .pb\:\$-2 {
  ///   padding-bottom: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .pb\:\$-3 {
  ///   padding-bottom: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .pb\:\$-4 {
  ///   padding-bottom: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .pb\:\$-5 {
  ///   padding-bottom: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .pb\:\$-6 {
  ///   padding-bottom: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .pb\:\$-7 {
  ///   padding-bottom: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .pb\:\$-8 {
  ///   padding-bottom: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .pb\:\$-9 {
  ///   padding-bottom: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .pb\:\$-10 {
  ///   padding-bottom: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .pb\:\$-11 {
  ///   padding-bottom: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .pb\:\$-12 {
  ///   padding-bottom: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .pb\:\$-14 {
  ///   padding-bottom: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .pb\:\$-16 {
  ///   padding-bottom: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .pb\:\$-20 {
  ///   padding-bottom: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .pb\:\$-24 {
  ///   padding-bottom: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .pb\:\$-28 {
  ///   padding-bottom: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .pb\:\$-32 {
  ///   padding-bottom: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .pb\:\$-36 {
  ///   padding-bottom: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .pb\:\$-40 {
  ///   padding-bottom: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .pb\:\$-44 {
  ///   padding-bottom: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .pb\:\$-48 {
  ///   padding-bottom: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .pb\:\$-52 {
  ///   padding-bottom: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .pb\:\$-56 {
  ///   padding-bottom: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .pb\:\$-60 {
  ///   padding-bottom: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .pb\:\$-64 {
  ///   padding-bottom: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .pb\:\$-72 {
  ///   padding-bottom: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .pb\:\$-80 {
  ///   padding-bottom: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .pb\:\$-96 {
  ///   padding-bottom: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .pb\:\$-px {
  ///   padding-bottom: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .pb\:\$-0\.5 {
  ///   padding-bottom: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .pb\:\$-1\.5 {
  ///   padding-bottom: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .pb\:\$-2\.5 {
  ///   padding-bottom: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .pb\:\$-3\.5 {
  ///   padding-bottom: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPb for GeneratedAtomPb {}
pub struct GeneratedAtomPl(String);
impl GeneratedSkribbleValue for GeneratedAtomPl {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPl: GeneratedSkribbleValue {
  /// ```css
  /// .pl\:\$0 {
  ///   padding-left: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .pl\:\$1 {
  ///   padding-left: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .pl\:\$2 {
  ///   padding-left: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .pl\:\$3 {
  ///   padding-left: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .pl\:\$4 {
  ///   padding-left: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .pl\:\$5 {
  ///   padding-left: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .pl\:\$6 {
  ///   padding-left: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .pl\:\$7 {
  ///   padding-left: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .pl\:\$8 {
  ///   padding-left: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .pl\:\$9 {
  ///   padding-left: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .pl\:\$10 {
  ///   padding-left: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .pl\:\$11 {
  ///   padding-left: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .pl\:\$12 {
  ///   padding-left: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .pl\:\$14 {
  ///   padding-left: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .pl\:\$16 {
  ///   padding-left: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .pl\:\$20 {
  ///   padding-left: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .pl\:\$24 {
  ///   padding-left: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .pl\:\$28 {
  ///   padding-left: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .pl\:\$32 {
  ///   padding-left: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .pl\:\$36 {
  ///   padding-left: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .pl\:\$40 {
  ///   padding-left: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .pl\:\$44 {
  ///   padding-left: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .pl\:\$48 {
  ///   padding-left: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .pl\:\$52 {
  ///   padding-left: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .pl\:\$56 {
  ///   padding-left: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .pl\:\$60 {
  ///   padding-left: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .pl\:\$64 {
  ///   padding-left: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .pl\:\$72 {
  ///   padding-left: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .pl\:\$80 {
  ///   padding-left: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .pl\:\$96 {
  ///   padding-left: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .pl\:\$px {
  ///   padding-left: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .pl\:\$0\.5 {
  ///   padding-left: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .pl\:\$1\.5 {
  ///   padding-left: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .pl\:\$2\.5 {
  ///   padding-left: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .pl\:\$3\.5 {
  ///   padding-left: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .pl\:\$-1 {
  ///   padding-left: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .pl\:\$-2 {
  ///   padding-left: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .pl\:\$-3 {
  ///   padding-left: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .pl\:\$-4 {
  ///   padding-left: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .pl\:\$-5 {
  ///   padding-left: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .pl\:\$-6 {
  ///   padding-left: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .pl\:\$-7 {
  ///   padding-left: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .pl\:\$-8 {
  ///   padding-left: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .pl\:\$-9 {
  ///   padding-left: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .pl\:\$-10 {
  ///   padding-left: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .pl\:\$-11 {
  ///   padding-left: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .pl\:\$-12 {
  ///   padding-left: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .pl\:\$-14 {
  ///   padding-left: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .pl\:\$-16 {
  ///   padding-left: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .pl\:\$-20 {
  ///   padding-left: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .pl\:\$-24 {
  ///   padding-left: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .pl\:\$-28 {
  ///   padding-left: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .pl\:\$-32 {
  ///   padding-left: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .pl\:\$-36 {
  ///   padding-left: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .pl\:\$-40 {
  ///   padding-left: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .pl\:\$-44 {
  ///   padding-left: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .pl\:\$-48 {
  ///   padding-left: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .pl\:\$-52 {
  ///   padding-left: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .pl\:\$-56 {
  ///   padding-left: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .pl\:\$-60 {
  ///   padding-left: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .pl\:\$-64 {
  ///   padding-left: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .pl\:\$-72 {
  ///   padding-left: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .pl\:\$-80 {
  ///   padding-left: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .pl\:\$-96 {
  ///   padding-left: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .pl\:\$-px {
  ///   padding-left: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .pl\:\$-0\.5 {
  ///   padding-left: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .pl\:\$-1\.5 {
  ///   padding-left: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .pl\:\$-2\.5 {
  ///   padding-left: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .pl\:\$-3\.5 {
  ///   padding-left: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetPl for GeneratedAtomPl {}
pub struct GeneratedAtomM(String);
impl GeneratedSkribbleValue for GeneratedAtomM {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetM: GeneratedSkribbleValue {
  /// ```css
  /// .m\:\$0 {
  ///   margin: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .m\:\$1 {
  ///   margin: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .m\:\$2 {
  ///   margin: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .m\:\$3 {
  ///   margin: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .m\:\$4 {
  ///   margin: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .m\:\$5 {
  ///   margin: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .m\:\$6 {
  ///   margin: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .m\:\$7 {
  ///   margin: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .m\:\$8 {
  ///   margin: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .m\:\$9 {
  ///   margin: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .m\:\$10 {
  ///   margin: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .m\:\$11 {
  ///   margin: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .m\:\$12 {
  ///   margin: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .m\:\$14 {
  ///   margin: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .m\:\$16 {
  ///   margin: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .m\:\$20 {
  ///   margin: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .m\:\$24 {
  ///   margin: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .m\:\$28 {
  ///   margin: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .m\:\$32 {
  ///   margin: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .m\:\$36 {
  ///   margin: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .m\:\$40 {
  ///   margin: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .m\:\$44 {
  ///   margin: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .m\:\$48 {
  ///   margin: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .m\:\$52 {
  ///   margin: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .m\:\$56 {
  ///   margin: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .m\:\$60 {
  ///   margin: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .m\:\$64 {
  ///   margin: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .m\:\$72 {
  ///   margin: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .m\:\$80 {
  ///   margin: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .m\:\$96 {
  ///   margin: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .m\:\$px {
  ///   margin: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .m\:\$0\.5 {
  ///   margin: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .m\:\$1\.5 {
  ///   margin: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .m\:\$2\.5 {
  ///   margin: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .m\:\$3\.5 {
  ///   margin: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .m\:\$-1 {
  ///   margin: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .m\:\$-2 {
  ///   margin: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .m\:\$-3 {
  ///   margin: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .m\:\$-4 {
  ///   margin: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .m\:\$-5 {
  ///   margin: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .m\:\$-6 {
  ///   margin: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .m\:\$-7 {
  ///   margin: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .m\:\$-8 {
  ///   margin: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .m\:\$-9 {
  ///   margin: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .m\:\$-10 {
  ///   margin: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .m\:\$-11 {
  ///   margin: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .m\:\$-12 {
  ///   margin: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .m\:\$-14 {
  ///   margin: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .m\:\$-16 {
  ///   margin: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .m\:\$-20 {
  ///   margin: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .m\:\$-24 {
  ///   margin: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .m\:\$-28 {
  ///   margin: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .m\:\$-32 {
  ///   margin: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .m\:\$-36 {
  ///   margin: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .m\:\$-40 {
  ///   margin: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .m\:\$-44 {
  ///   margin: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .m\:\$-48 {
  ///   margin: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .m\:\$-52 {
  ///   margin: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .m\:\$-56 {
  ///   margin: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .m\:\$-60 {
  ///   margin: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .m\:\$-64 {
  ///   margin: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .m\:\$-72 {
  ///   margin: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .m\:\$-80 {
  ///   margin: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .m\:\$-96 {
  ///   margin: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .m\:\$-px {
  ///   margin: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .m\:\$-0\.5 {
  ///   margin: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .m\:\$-1\.5 {
  ///   margin: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .m\:\$-2\.5 {
  ///   margin: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .m\:\$-3\.5 {
  ///   margin: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetM for GeneratedAtomM {}
pub struct GeneratedAtomMy(String);
impl GeneratedSkribbleValue for GeneratedAtomMy {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMy: GeneratedSkribbleValue {
  /// ```css
  /// .my\:\$0 {
  ///   margin-top: 0px;
  ///   margin-bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .my\:\$1 {
  ///   margin-top: 0.25rem;
  ///   margin-bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .my\:\$2 {
  ///   margin-top: 0.5rem;
  ///   margin-bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .my\:\$3 {
  ///   margin-top: 0.75rem;
  ///   margin-bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .my\:\$4 {
  ///   margin-top: 1rem;
  ///   margin-bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .my\:\$5 {
  ///   margin-top: 1.25rem;
  ///   margin-bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .my\:\$6 {
  ///   margin-top: 1.5rem;
  ///   margin-bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .my\:\$7 {
  ///   margin-top: 1.75rem;
  ///   margin-bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .my\:\$8 {
  ///   margin-top: 2rem;
  ///   margin-bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .my\:\$9 {
  ///   margin-top: 2.25rem;
  ///   margin-bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .my\:\$10 {
  ///   margin-top: 2.5rem;
  ///   margin-bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .my\:\$11 {
  ///   margin-top: 2.75rem;
  ///   margin-bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .my\:\$12 {
  ///   margin-top: 3rem;
  ///   margin-bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .my\:\$14 {
  ///   margin-top: 3.5rem;
  ///   margin-bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .my\:\$16 {
  ///   margin-top: 4rem;
  ///   margin-bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .my\:\$20 {
  ///   margin-top: 5rem;
  ///   margin-bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .my\:\$24 {
  ///   margin-top: 6rem;
  ///   margin-bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .my\:\$28 {
  ///   margin-top: 7rem;
  ///   margin-bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .my\:\$32 {
  ///   margin-top: 8rem;
  ///   margin-bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .my\:\$36 {
  ///   margin-top: 9rem;
  ///   margin-bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .my\:\$40 {
  ///   margin-top: 10rem;
  ///   margin-bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .my\:\$44 {
  ///   margin-top: 11rem;
  ///   margin-bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .my\:\$48 {
  ///   margin-top: 12rem;
  ///   margin-bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .my\:\$52 {
  ///   margin-top: 13rem;
  ///   margin-bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .my\:\$56 {
  ///   margin-top: 14rem;
  ///   margin-bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .my\:\$60 {
  ///   margin-top: 15rem;
  ///   margin-bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .my\:\$64 {
  ///   margin-top: 16rem;
  ///   margin-bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .my\:\$72 {
  ///   margin-top: 18rem;
  ///   margin-bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .my\:\$80 {
  ///   margin-top: 20rem;
  ///   margin-bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .my\:\$96 {
  ///   margin-top: 24rem;
  ///   margin-bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .my\:\$px {
  ///   margin-top: 1px;
  ///   margin-bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .my\:\$0\.5 {
  ///   margin-top: 0.125rem;
  ///   margin-bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .my\:\$1\.5 {
  ///   margin-top: 0.375rem;
  ///   margin-bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .my\:\$2\.5 {
  ///   margin-top: 0.625rem;
  ///   margin-bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .my\:\$3\.5 {
  ///   margin-top: 0.875rem;
  ///   margin-bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .my\:\$-1 {
  ///   margin-top: -0.25rem;
  ///   margin-bottom: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .my\:\$-2 {
  ///   margin-top: -0.5rem;
  ///   margin-bottom: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .my\:\$-3 {
  ///   margin-top: -0.75rem;
  ///   margin-bottom: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .my\:\$-4 {
  ///   margin-top: -1rem;
  ///   margin-bottom: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .my\:\$-5 {
  ///   margin-top: -1.25rem;
  ///   margin-bottom: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .my\:\$-6 {
  ///   margin-top: -1.5rem;
  ///   margin-bottom: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .my\:\$-7 {
  ///   margin-top: -1.75rem;
  ///   margin-bottom: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .my\:\$-8 {
  ///   margin-top: -2rem;
  ///   margin-bottom: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .my\:\$-9 {
  ///   margin-top: -2.25rem;
  ///   margin-bottom: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .my\:\$-10 {
  ///   margin-top: -2.5rem;
  ///   margin-bottom: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .my\:\$-11 {
  ///   margin-top: -2.75rem;
  ///   margin-bottom: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .my\:\$-12 {
  ///   margin-top: -3rem;
  ///   margin-bottom: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .my\:\$-14 {
  ///   margin-top: -3.5rem;
  ///   margin-bottom: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .my\:\$-16 {
  ///   margin-top: -4rem;
  ///   margin-bottom: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .my\:\$-20 {
  ///   margin-top: -5rem;
  ///   margin-bottom: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .my\:\$-24 {
  ///   margin-top: -6rem;
  ///   margin-bottom: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .my\:\$-28 {
  ///   margin-top: -7rem;
  ///   margin-bottom: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .my\:\$-32 {
  ///   margin-top: -8rem;
  ///   margin-bottom: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .my\:\$-36 {
  ///   margin-top: -9rem;
  ///   margin-bottom: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .my\:\$-40 {
  ///   margin-top: -10rem;
  ///   margin-bottom: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .my\:\$-44 {
  ///   margin-top: -11rem;
  ///   margin-bottom: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .my\:\$-48 {
  ///   margin-top: -12rem;
  ///   margin-bottom: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .my\:\$-52 {
  ///   margin-top: -13rem;
  ///   margin-bottom: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .my\:\$-56 {
  ///   margin-top: -14rem;
  ///   margin-bottom: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .my\:\$-60 {
  ///   margin-top: -15rem;
  ///   margin-bottom: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .my\:\$-64 {
  ///   margin-top: -16rem;
  ///   margin-bottom: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .my\:\$-72 {
  ///   margin-top: -18rem;
  ///   margin-bottom: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .my\:\$-80 {
  ///   margin-top: -20rem;
  ///   margin-bottom: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .my\:\$-96 {
  ///   margin-top: -24rem;
  ///   margin-bottom: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .my\:\$-px {
  ///   margin-top: -1px;
  ///   margin-bottom: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .my\:\$-0\.5 {
  ///   margin-top: -0.125rem;
  ///   margin-bottom: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .my\:\$-1\.5 {
  ///   margin-top: -0.375rem;
  ///   margin-bottom: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .my\:\$-2\.5 {
  ///   margin-top: -0.625rem;
  ///   margin-bottom: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .my\:\$-3\.5 {
  ///   margin-top: -0.875rem;
  ///   margin-bottom: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMy for GeneratedAtomMy {}
pub struct GeneratedAtomMx(String);
impl GeneratedSkribbleValue for GeneratedAtomMx {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMx: GeneratedSkribbleValue {
  /// ```css
  /// .mx\:\$0 {
  ///   margin-right: 0px;
  ///   margin-left: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .mx\:\$1 {
  ///   margin-right: 0.25rem;
  ///   margin-left: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .mx\:\$2 {
  ///   margin-right: 0.5rem;
  ///   margin-left: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .mx\:\$3 {
  ///   margin-right: 0.75rem;
  ///   margin-left: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .mx\:\$4 {
  ///   margin-right: 1rem;
  ///   margin-left: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .mx\:\$5 {
  ///   margin-right: 1.25rem;
  ///   margin-left: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .mx\:\$6 {
  ///   margin-right: 1.5rem;
  ///   margin-left: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .mx\:\$7 {
  ///   margin-right: 1.75rem;
  ///   margin-left: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .mx\:\$8 {
  ///   margin-right: 2rem;
  ///   margin-left: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .mx\:\$9 {
  ///   margin-right: 2.25rem;
  ///   margin-left: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .mx\:\$10 {
  ///   margin-right: 2.5rem;
  ///   margin-left: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .mx\:\$11 {
  ///   margin-right: 2.75rem;
  ///   margin-left: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .mx\:\$12 {
  ///   margin-right: 3rem;
  ///   margin-left: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .mx\:\$14 {
  ///   margin-right: 3.5rem;
  ///   margin-left: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .mx\:\$16 {
  ///   margin-right: 4rem;
  ///   margin-left: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .mx\:\$20 {
  ///   margin-right: 5rem;
  ///   margin-left: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .mx\:\$24 {
  ///   margin-right: 6rem;
  ///   margin-left: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .mx\:\$28 {
  ///   margin-right: 7rem;
  ///   margin-left: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .mx\:\$32 {
  ///   margin-right: 8rem;
  ///   margin-left: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .mx\:\$36 {
  ///   margin-right: 9rem;
  ///   margin-left: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .mx\:\$40 {
  ///   margin-right: 10rem;
  ///   margin-left: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .mx\:\$44 {
  ///   margin-right: 11rem;
  ///   margin-left: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .mx\:\$48 {
  ///   margin-right: 12rem;
  ///   margin-left: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .mx\:\$52 {
  ///   margin-right: 13rem;
  ///   margin-left: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .mx\:\$56 {
  ///   margin-right: 14rem;
  ///   margin-left: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .mx\:\$60 {
  ///   margin-right: 15rem;
  ///   margin-left: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .mx\:\$64 {
  ///   margin-right: 16rem;
  ///   margin-left: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .mx\:\$72 {
  ///   margin-right: 18rem;
  ///   margin-left: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .mx\:\$80 {
  ///   margin-right: 20rem;
  ///   margin-left: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .mx\:\$96 {
  ///   margin-right: 24rem;
  ///   margin-left: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .mx\:\$px {
  ///   margin-right: 1px;
  ///   margin-left: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .mx\:\$0\.5 {
  ///   margin-right: 0.125rem;
  ///   margin-left: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .mx\:\$1\.5 {
  ///   margin-right: 0.375rem;
  ///   margin-left: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .mx\:\$2\.5 {
  ///   margin-right: 0.625rem;
  ///   margin-left: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .mx\:\$3\.5 {
  ///   margin-right: 0.875rem;
  ///   margin-left: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .mx\:\$-1 {
  ///   margin-right: -0.25rem;
  ///   margin-left: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .mx\:\$-2 {
  ///   margin-right: -0.5rem;
  ///   margin-left: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .mx\:\$-3 {
  ///   margin-right: -0.75rem;
  ///   margin-left: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .mx\:\$-4 {
  ///   margin-right: -1rem;
  ///   margin-left: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .mx\:\$-5 {
  ///   margin-right: -1.25rem;
  ///   margin-left: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .mx\:\$-6 {
  ///   margin-right: -1.5rem;
  ///   margin-left: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .mx\:\$-7 {
  ///   margin-right: -1.75rem;
  ///   margin-left: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .mx\:\$-8 {
  ///   margin-right: -2rem;
  ///   margin-left: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .mx\:\$-9 {
  ///   margin-right: -2.25rem;
  ///   margin-left: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .mx\:\$-10 {
  ///   margin-right: -2.5rem;
  ///   margin-left: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .mx\:\$-11 {
  ///   margin-right: -2.75rem;
  ///   margin-left: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .mx\:\$-12 {
  ///   margin-right: -3rem;
  ///   margin-left: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .mx\:\$-14 {
  ///   margin-right: -3.5rem;
  ///   margin-left: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .mx\:\$-16 {
  ///   margin-right: -4rem;
  ///   margin-left: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .mx\:\$-20 {
  ///   margin-right: -5rem;
  ///   margin-left: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .mx\:\$-24 {
  ///   margin-right: -6rem;
  ///   margin-left: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .mx\:\$-28 {
  ///   margin-right: -7rem;
  ///   margin-left: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .mx\:\$-32 {
  ///   margin-right: -8rem;
  ///   margin-left: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .mx\:\$-36 {
  ///   margin-right: -9rem;
  ///   margin-left: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .mx\:\$-40 {
  ///   margin-right: -10rem;
  ///   margin-left: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .mx\:\$-44 {
  ///   margin-right: -11rem;
  ///   margin-left: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .mx\:\$-48 {
  ///   margin-right: -12rem;
  ///   margin-left: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .mx\:\$-52 {
  ///   margin-right: -13rem;
  ///   margin-left: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .mx\:\$-56 {
  ///   margin-right: -14rem;
  ///   margin-left: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .mx\:\$-60 {
  ///   margin-right: -15rem;
  ///   margin-left: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .mx\:\$-64 {
  ///   margin-right: -16rem;
  ///   margin-left: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .mx\:\$-72 {
  ///   margin-right: -18rem;
  ///   margin-left: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .mx\:\$-80 {
  ///   margin-right: -20rem;
  ///   margin-left: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .mx\:\$-96 {
  ///   margin-right: -24rem;
  ///   margin-left: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .mx\:\$-px {
  ///   margin-right: -1px;
  ///   margin-left: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .mx\:\$-0\.5 {
  ///   margin-right: -0.125rem;
  ///   margin-left: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .mx\:\$-1\.5 {
  ///   margin-right: -0.375rem;
  ///   margin-left: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .mx\:\$-2\.5 {
  ///   margin-right: -0.625rem;
  ///   margin-left: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .mx\:\$-3\.5 {
  ///   margin-right: -0.875rem;
  ///   margin-left: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMx for GeneratedAtomMx {}
pub struct GeneratedAtomMBlock(String);
impl GeneratedSkribbleValue for GeneratedAtomMBlock {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMBlock: GeneratedSkribbleValue {
  /// ```css
  /// .m-block\:\$0 {
  ///   margin-block: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .m-block\:\$1 {
  ///   margin-block: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .m-block\:\$2 {
  ///   margin-block: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .m-block\:\$3 {
  ///   margin-block: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .m-block\:\$4 {
  ///   margin-block: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .m-block\:\$5 {
  ///   margin-block: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .m-block\:\$6 {
  ///   margin-block: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .m-block\:\$7 {
  ///   margin-block: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .m-block\:\$8 {
  ///   margin-block: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .m-block\:\$9 {
  ///   margin-block: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .m-block\:\$10 {
  ///   margin-block: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .m-block\:\$11 {
  ///   margin-block: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .m-block\:\$12 {
  ///   margin-block: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .m-block\:\$14 {
  ///   margin-block: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .m-block\:\$16 {
  ///   margin-block: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .m-block\:\$20 {
  ///   margin-block: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .m-block\:\$24 {
  ///   margin-block: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .m-block\:\$28 {
  ///   margin-block: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .m-block\:\$32 {
  ///   margin-block: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .m-block\:\$36 {
  ///   margin-block: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .m-block\:\$40 {
  ///   margin-block: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .m-block\:\$44 {
  ///   margin-block: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .m-block\:\$48 {
  ///   margin-block: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .m-block\:\$52 {
  ///   margin-block: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .m-block\:\$56 {
  ///   margin-block: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .m-block\:\$60 {
  ///   margin-block: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .m-block\:\$64 {
  ///   margin-block: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .m-block\:\$72 {
  ///   margin-block: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .m-block\:\$80 {
  ///   margin-block: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .m-block\:\$96 {
  ///   margin-block: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .m-block\:\$px {
  ///   margin-block: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .m-block\:\$0\.5 {
  ///   margin-block: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .m-block\:\$1\.5 {
  ///   margin-block: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .m-block\:\$2\.5 {
  ///   margin-block: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .m-block\:\$3\.5 {
  ///   margin-block: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .m-block\:\$-1 {
  ///   margin-block: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .m-block\:\$-2 {
  ///   margin-block: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .m-block\:\$-3 {
  ///   margin-block: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .m-block\:\$-4 {
  ///   margin-block: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .m-block\:\$-5 {
  ///   margin-block: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .m-block\:\$-6 {
  ///   margin-block: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .m-block\:\$-7 {
  ///   margin-block: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .m-block\:\$-8 {
  ///   margin-block: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .m-block\:\$-9 {
  ///   margin-block: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .m-block\:\$-10 {
  ///   margin-block: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .m-block\:\$-11 {
  ///   margin-block: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .m-block\:\$-12 {
  ///   margin-block: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .m-block\:\$-14 {
  ///   margin-block: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .m-block\:\$-16 {
  ///   margin-block: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .m-block\:\$-20 {
  ///   margin-block: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .m-block\:\$-24 {
  ///   margin-block: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .m-block\:\$-28 {
  ///   margin-block: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .m-block\:\$-32 {
  ///   margin-block: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .m-block\:\$-36 {
  ///   margin-block: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .m-block\:\$-40 {
  ///   margin-block: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .m-block\:\$-44 {
  ///   margin-block: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .m-block\:\$-48 {
  ///   margin-block: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .m-block\:\$-52 {
  ///   margin-block: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .m-block\:\$-56 {
  ///   margin-block: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .m-block\:\$-60 {
  ///   margin-block: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .m-block\:\$-64 {
  ///   margin-block: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .m-block\:\$-72 {
  ///   margin-block: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .m-block\:\$-80 {
  ///   margin-block: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .m-block\:\$-96 {
  ///   margin-block: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .m-block\:\$-px {
  ///   margin-block: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .m-block\:\$-0\.5 {
  ///   margin-block: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .m-block\:\$-1\.5 {
  ///   margin-block: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .m-block\:\$-2\.5 {
  ///   margin-block: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .m-block\:\$-3\.5 {
  ///   margin-block: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMBlock for GeneratedAtomMBlock {}
pub struct GeneratedAtomMbs(String);
impl GeneratedSkribbleValue for GeneratedAtomMbs {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMbs: GeneratedSkribbleValue {
  /// ```css
  /// .mbs\:\$0 {
  ///   margin-block-start: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .mbs\:\$1 {
  ///   margin-block-start: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .mbs\:\$2 {
  ///   margin-block-start: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .mbs\:\$3 {
  ///   margin-block-start: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .mbs\:\$4 {
  ///   margin-block-start: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .mbs\:\$5 {
  ///   margin-block-start: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .mbs\:\$6 {
  ///   margin-block-start: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .mbs\:\$7 {
  ///   margin-block-start: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .mbs\:\$8 {
  ///   margin-block-start: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .mbs\:\$9 {
  ///   margin-block-start: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .mbs\:\$10 {
  ///   margin-block-start: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .mbs\:\$11 {
  ///   margin-block-start: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .mbs\:\$12 {
  ///   margin-block-start: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .mbs\:\$14 {
  ///   margin-block-start: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .mbs\:\$16 {
  ///   margin-block-start: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .mbs\:\$20 {
  ///   margin-block-start: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .mbs\:\$24 {
  ///   margin-block-start: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .mbs\:\$28 {
  ///   margin-block-start: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .mbs\:\$32 {
  ///   margin-block-start: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .mbs\:\$36 {
  ///   margin-block-start: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .mbs\:\$40 {
  ///   margin-block-start: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .mbs\:\$44 {
  ///   margin-block-start: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .mbs\:\$48 {
  ///   margin-block-start: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .mbs\:\$52 {
  ///   margin-block-start: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .mbs\:\$56 {
  ///   margin-block-start: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .mbs\:\$60 {
  ///   margin-block-start: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .mbs\:\$64 {
  ///   margin-block-start: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .mbs\:\$72 {
  ///   margin-block-start: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .mbs\:\$80 {
  ///   margin-block-start: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .mbs\:\$96 {
  ///   margin-block-start: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .mbs\:\$px {
  ///   margin-block-start: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .mbs\:\$0\.5 {
  ///   margin-block-start: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .mbs\:\$1\.5 {
  ///   margin-block-start: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .mbs\:\$2\.5 {
  ///   margin-block-start: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .mbs\:\$3\.5 {
  ///   margin-block-start: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .mbs\:\$-1 {
  ///   margin-block-start: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .mbs\:\$-2 {
  ///   margin-block-start: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .mbs\:\$-3 {
  ///   margin-block-start: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .mbs\:\$-4 {
  ///   margin-block-start: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .mbs\:\$-5 {
  ///   margin-block-start: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .mbs\:\$-6 {
  ///   margin-block-start: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .mbs\:\$-7 {
  ///   margin-block-start: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .mbs\:\$-8 {
  ///   margin-block-start: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .mbs\:\$-9 {
  ///   margin-block-start: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .mbs\:\$-10 {
  ///   margin-block-start: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .mbs\:\$-11 {
  ///   margin-block-start: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .mbs\:\$-12 {
  ///   margin-block-start: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .mbs\:\$-14 {
  ///   margin-block-start: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .mbs\:\$-16 {
  ///   margin-block-start: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .mbs\:\$-20 {
  ///   margin-block-start: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .mbs\:\$-24 {
  ///   margin-block-start: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .mbs\:\$-28 {
  ///   margin-block-start: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .mbs\:\$-32 {
  ///   margin-block-start: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .mbs\:\$-36 {
  ///   margin-block-start: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .mbs\:\$-40 {
  ///   margin-block-start: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .mbs\:\$-44 {
  ///   margin-block-start: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .mbs\:\$-48 {
  ///   margin-block-start: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .mbs\:\$-52 {
  ///   margin-block-start: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .mbs\:\$-56 {
  ///   margin-block-start: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .mbs\:\$-60 {
  ///   margin-block-start: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .mbs\:\$-64 {
  ///   margin-block-start: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .mbs\:\$-72 {
  ///   margin-block-start: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .mbs\:\$-80 {
  ///   margin-block-start: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .mbs\:\$-96 {
  ///   margin-block-start: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .mbs\:\$-px {
  ///   margin-block-start: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .mbs\:\$-0\.5 {
  ///   margin-block-start: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .mbs\:\$-1\.5 {
  ///   margin-block-start: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .mbs\:\$-2\.5 {
  ///   margin-block-start: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .mbs\:\$-3\.5 {
  ///   margin-block-start: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMbs for GeneratedAtomMbs {}
pub struct GeneratedAtomMbe(String);
impl GeneratedSkribbleValue for GeneratedAtomMbe {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMbe: GeneratedSkribbleValue {
  /// ```css
  /// .mbe\:\$0 {
  ///   margin-block-end: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .mbe\:\$1 {
  ///   margin-block-end: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .mbe\:\$2 {
  ///   margin-block-end: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .mbe\:\$3 {
  ///   margin-block-end: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .mbe\:\$4 {
  ///   margin-block-end: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .mbe\:\$5 {
  ///   margin-block-end: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .mbe\:\$6 {
  ///   margin-block-end: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .mbe\:\$7 {
  ///   margin-block-end: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .mbe\:\$8 {
  ///   margin-block-end: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .mbe\:\$9 {
  ///   margin-block-end: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .mbe\:\$10 {
  ///   margin-block-end: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .mbe\:\$11 {
  ///   margin-block-end: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .mbe\:\$12 {
  ///   margin-block-end: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .mbe\:\$14 {
  ///   margin-block-end: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .mbe\:\$16 {
  ///   margin-block-end: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .mbe\:\$20 {
  ///   margin-block-end: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .mbe\:\$24 {
  ///   margin-block-end: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .mbe\:\$28 {
  ///   margin-block-end: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .mbe\:\$32 {
  ///   margin-block-end: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .mbe\:\$36 {
  ///   margin-block-end: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .mbe\:\$40 {
  ///   margin-block-end: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .mbe\:\$44 {
  ///   margin-block-end: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .mbe\:\$48 {
  ///   margin-block-end: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .mbe\:\$52 {
  ///   margin-block-end: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .mbe\:\$56 {
  ///   margin-block-end: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .mbe\:\$60 {
  ///   margin-block-end: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .mbe\:\$64 {
  ///   margin-block-end: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .mbe\:\$72 {
  ///   margin-block-end: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .mbe\:\$80 {
  ///   margin-block-end: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .mbe\:\$96 {
  ///   margin-block-end: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .mbe\:\$px {
  ///   margin-block-end: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .mbe\:\$0\.5 {
  ///   margin-block-end: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .mbe\:\$1\.5 {
  ///   margin-block-end: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .mbe\:\$2\.5 {
  ///   margin-block-end: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .mbe\:\$3\.5 {
  ///   margin-block-end: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .mbe\:\$-1 {
  ///   margin-block-end: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .mbe\:\$-2 {
  ///   margin-block-end: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .mbe\:\$-3 {
  ///   margin-block-end: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .mbe\:\$-4 {
  ///   margin-block-end: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .mbe\:\$-5 {
  ///   margin-block-end: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .mbe\:\$-6 {
  ///   margin-block-end: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .mbe\:\$-7 {
  ///   margin-block-end: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .mbe\:\$-8 {
  ///   margin-block-end: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .mbe\:\$-9 {
  ///   margin-block-end: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .mbe\:\$-10 {
  ///   margin-block-end: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .mbe\:\$-11 {
  ///   margin-block-end: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .mbe\:\$-12 {
  ///   margin-block-end: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .mbe\:\$-14 {
  ///   margin-block-end: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .mbe\:\$-16 {
  ///   margin-block-end: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .mbe\:\$-20 {
  ///   margin-block-end: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .mbe\:\$-24 {
  ///   margin-block-end: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .mbe\:\$-28 {
  ///   margin-block-end: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .mbe\:\$-32 {
  ///   margin-block-end: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .mbe\:\$-36 {
  ///   margin-block-end: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .mbe\:\$-40 {
  ///   margin-block-end: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .mbe\:\$-44 {
  ///   margin-block-end: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .mbe\:\$-48 {
  ///   margin-block-end: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .mbe\:\$-52 {
  ///   margin-block-end: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .mbe\:\$-56 {
  ///   margin-block-end: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .mbe\:\$-60 {
  ///   margin-block-end: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .mbe\:\$-64 {
  ///   margin-block-end: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .mbe\:\$-72 {
  ///   margin-block-end: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .mbe\:\$-80 {
  ///   margin-block-end: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .mbe\:\$-96 {
  ///   margin-block-end: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .mbe\:\$-px {
  ///   margin-block-end: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .mbe\:\$-0\.5 {
  ///   margin-block-end: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .mbe\:\$-1\.5 {
  ///   margin-block-end: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .mbe\:\$-2\.5 {
  ///   margin-block-end: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .mbe\:\$-3\.5 {
  ///   margin-block-end: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMbe for GeneratedAtomMbe {}
pub struct GeneratedAtomMInline(String);
impl GeneratedSkribbleValue for GeneratedAtomMInline {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMInline: GeneratedSkribbleValue {
  /// ```css
  /// .m-inline\:\$0 {
  ///   margin-inline: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .m-inline\:\$1 {
  ///   margin-inline: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .m-inline\:\$2 {
  ///   margin-inline: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .m-inline\:\$3 {
  ///   margin-inline: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .m-inline\:\$4 {
  ///   margin-inline: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .m-inline\:\$5 {
  ///   margin-inline: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .m-inline\:\$6 {
  ///   margin-inline: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .m-inline\:\$7 {
  ///   margin-inline: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .m-inline\:\$8 {
  ///   margin-inline: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .m-inline\:\$9 {
  ///   margin-inline: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .m-inline\:\$10 {
  ///   margin-inline: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .m-inline\:\$11 {
  ///   margin-inline: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .m-inline\:\$12 {
  ///   margin-inline: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .m-inline\:\$14 {
  ///   margin-inline: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .m-inline\:\$16 {
  ///   margin-inline: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .m-inline\:\$20 {
  ///   margin-inline: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .m-inline\:\$24 {
  ///   margin-inline: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .m-inline\:\$28 {
  ///   margin-inline: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .m-inline\:\$32 {
  ///   margin-inline: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .m-inline\:\$36 {
  ///   margin-inline: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .m-inline\:\$40 {
  ///   margin-inline: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .m-inline\:\$44 {
  ///   margin-inline: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .m-inline\:\$48 {
  ///   margin-inline: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .m-inline\:\$52 {
  ///   margin-inline: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .m-inline\:\$56 {
  ///   margin-inline: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .m-inline\:\$60 {
  ///   margin-inline: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .m-inline\:\$64 {
  ///   margin-inline: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .m-inline\:\$72 {
  ///   margin-inline: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .m-inline\:\$80 {
  ///   margin-inline: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .m-inline\:\$96 {
  ///   margin-inline: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .m-inline\:\$px {
  ///   margin-inline: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .m-inline\:\$0\.5 {
  ///   margin-inline: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .m-inline\:\$1\.5 {
  ///   margin-inline: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .m-inline\:\$2\.5 {
  ///   margin-inline: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .m-inline\:\$3\.5 {
  ///   margin-inline: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .m-inline\:\$-1 {
  ///   margin-inline: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .m-inline\:\$-2 {
  ///   margin-inline: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .m-inline\:\$-3 {
  ///   margin-inline: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .m-inline\:\$-4 {
  ///   margin-inline: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .m-inline\:\$-5 {
  ///   margin-inline: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .m-inline\:\$-6 {
  ///   margin-inline: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .m-inline\:\$-7 {
  ///   margin-inline: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .m-inline\:\$-8 {
  ///   margin-inline: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .m-inline\:\$-9 {
  ///   margin-inline: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .m-inline\:\$-10 {
  ///   margin-inline: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .m-inline\:\$-11 {
  ///   margin-inline: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .m-inline\:\$-12 {
  ///   margin-inline: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .m-inline\:\$-14 {
  ///   margin-inline: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .m-inline\:\$-16 {
  ///   margin-inline: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .m-inline\:\$-20 {
  ///   margin-inline: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .m-inline\:\$-24 {
  ///   margin-inline: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .m-inline\:\$-28 {
  ///   margin-inline: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .m-inline\:\$-32 {
  ///   margin-inline: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .m-inline\:\$-36 {
  ///   margin-inline: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .m-inline\:\$-40 {
  ///   margin-inline: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .m-inline\:\$-44 {
  ///   margin-inline: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .m-inline\:\$-48 {
  ///   margin-inline: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .m-inline\:\$-52 {
  ///   margin-inline: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .m-inline\:\$-56 {
  ///   margin-inline: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .m-inline\:\$-60 {
  ///   margin-inline: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .m-inline\:\$-64 {
  ///   margin-inline: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .m-inline\:\$-72 {
  ///   margin-inline: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .m-inline\:\$-80 {
  ///   margin-inline: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .m-inline\:\$-96 {
  ///   margin-inline: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .m-inline\:\$-px {
  ///   margin-inline: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .m-inline\:\$-0\.5 {
  ///   margin-inline: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .m-inline\:\$-1\.5 {
  ///   margin-inline: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .m-inline\:\$-2\.5 {
  ///   margin-inline: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .m-inline\:\$-3\.5 {
  ///   margin-inline: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMInline for GeneratedAtomMInline {}
pub struct GeneratedAtomMs(String);
impl GeneratedSkribbleValue for GeneratedAtomMs {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMs: GeneratedSkribbleValue {
  /// ```css
  /// .ms\:\$0 {
  ///   margin-inline-start: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .ms\:\$1 {
  ///   margin-inline-start: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .ms\:\$2 {
  ///   margin-inline-start: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .ms\:\$3 {
  ///   margin-inline-start: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .ms\:\$4 {
  ///   margin-inline-start: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .ms\:\$5 {
  ///   margin-inline-start: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .ms\:\$6 {
  ///   margin-inline-start: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .ms\:\$7 {
  ///   margin-inline-start: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .ms\:\$8 {
  ///   margin-inline-start: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .ms\:\$9 {
  ///   margin-inline-start: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .ms\:\$10 {
  ///   margin-inline-start: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .ms\:\$11 {
  ///   margin-inline-start: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .ms\:\$12 {
  ///   margin-inline-start: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .ms\:\$14 {
  ///   margin-inline-start: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .ms\:\$16 {
  ///   margin-inline-start: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .ms\:\$20 {
  ///   margin-inline-start: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .ms\:\$24 {
  ///   margin-inline-start: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .ms\:\$28 {
  ///   margin-inline-start: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .ms\:\$32 {
  ///   margin-inline-start: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .ms\:\$36 {
  ///   margin-inline-start: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .ms\:\$40 {
  ///   margin-inline-start: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .ms\:\$44 {
  ///   margin-inline-start: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .ms\:\$48 {
  ///   margin-inline-start: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .ms\:\$52 {
  ///   margin-inline-start: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .ms\:\$56 {
  ///   margin-inline-start: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .ms\:\$60 {
  ///   margin-inline-start: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .ms\:\$64 {
  ///   margin-inline-start: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .ms\:\$72 {
  ///   margin-inline-start: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .ms\:\$80 {
  ///   margin-inline-start: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .ms\:\$96 {
  ///   margin-inline-start: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .ms\:\$px {
  ///   margin-inline-start: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .ms\:\$0\.5 {
  ///   margin-inline-start: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .ms\:\$1\.5 {
  ///   margin-inline-start: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .ms\:\$2\.5 {
  ///   margin-inline-start: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .ms\:\$3\.5 {
  ///   margin-inline-start: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .ms\:\$-1 {
  ///   margin-inline-start: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .ms\:\$-2 {
  ///   margin-inline-start: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .ms\:\$-3 {
  ///   margin-inline-start: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .ms\:\$-4 {
  ///   margin-inline-start: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .ms\:\$-5 {
  ///   margin-inline-start: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .ms\:\$-6 {
  ///   margin-inline-start: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .ms\:\$-7 {
  ///   margin-inline-start: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .ms\:\$-8 {
  ///   margin-inline-start: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .ms\:\$-9 {
  ///   margin-inline-start: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .ms\:\$-10 {
  ///   margin-inline-start: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .ms\:\$-11 {
  ///   margin-inline-start: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .ms\:\$-12 {
  ///   margin-inline-start: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .ms\:\$-14 {
  ///   margin-inline-start: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .ms\:\$-16 {
  ///   margin-inline-start: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .ms\:\$-20 {
  ///   margin-inline-start: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .ms\:\$-24 {
  ///   margin-inline-start: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .ms\:\$-28 {
  ///   margin-inline-start: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .ms\:\$-32 {
  ///   margin-inline-start: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .ms\:\$-36 {
  ///   margin-inline-start: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .ms\:\$-40 {
  ///   margin-inline-start: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .ms\:\$-44 {
  ///   margin-inline-start: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .ms\:\$-48 {
  ///   margin-inline-start: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .ms\:\$-52 {
  ///   margin-inline-start: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .ms\:\$-56 {
  ///   margin-inline-start: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .ms\:\$-60 {
  ///   margin-inline-start: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .ms\:\$-64 {
  ///   margin-inline-start: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .ms\:\$-72 {
  ///   margin-inline-start: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .ms\:\$-80 {
  ///   margin-inline-start: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .ms\:\$-96 {
  ///   margin-inline-start: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .ms\:\$-px {
  ///   margin-inline-start: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .ms\:\$-0\.5 {
  ///   margin-inline-start: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .ms\:\$-1\.5 {
  ///   margin-inline-start: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .ms\:\$-2\.5 {
  ///   margin-inline-start: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .ms\:\$-3\.5 {
  ///   margin-inline-start: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMs for GeneratedAtomMs {}
pub struct GeneratedAtomMe(String);
impl GeneratedSkribbleValue for GeneratedAtomMe {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMe: GeneratedSkribbleValue {
  /// ```css
  /// .me\:\$0 {
  ///   margin-inline-end: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .me\:\$1 {
  ///   margin-inline-end: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .me\:\$2 {
  ///   margin-inline-end: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .me\:\$3 {
  ///   margin-inline-end: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .me\:\$4 {
  ///   margin-inline-end: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .me\:\$5 {
  ///   margin-inline-end: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .me\:\$6 {
  ///   margin-inline-end: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .me\:\$7 {
  ///   margin-inline-end: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .me\:\$8 {
  ///   margin-inline-end: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .me\:\$9 {
  ///   margin-inline-end: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .me\:\$10 {
  ///   margin-inline-end: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .me\:\$11 {
  ///   margin-inline-end: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .me\:\$12 {
  ///   margin-inline-end: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .me\:\$14 {
  ///   margin-inline-end: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .me\:\$16 {
  ///   margin-inline-end: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .me\:\$20 {
  ///   margin-inline-end: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .me\:\$24 {
  ///   margin-inline-end: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .me\:\$28 {
  ///   margin-inline-end: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .me\:\$32 {
  ///   margin-inline-end: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .me\:\$36 {
  ///   margin-inline-end: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .me\:\$40 {
  ///   margin-inline-end: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .me\:\$44 {
  ///   margin-inline-end: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .me\:\$48 {
  ///   margin-inline-end: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .me\:\$52 {
  ///   margin-inline-end: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .me\:\$56 {
  ///   margin-inline-end: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .me\:\$60 {
  ///   margin-inline-end: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .me\:\$64 {
  ///   margin-inline-end: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .me\:\$72 {
  ///   margin-inline-end: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .me\:\$80 {
  ///   margin-inline-end: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .me\:\$96 {
  ///   margin-inline-end: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .me\:\$px {
  ///   margin-inline-end: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .me\:\$0\.5 {
  ///   margin-inline-end: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .me\:\$1\.5 {
  ///   margin-inline-end: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .me\:\$2\.5 {
  ///   margin-inline-end: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .me\:\$3\.5 {
  ///   margin-inline-end: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .me\:\$-1 {
  ///   margin-inline-end: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .me\:\$-2 {
  ///   margin-inline-end: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .me\:\$-3 {
  ///   margin-inline-end: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .me\:\$-4 {
  ///   margin-inline-end: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .me\:\$-5 {
  ///   margin-inline-end: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .me\:\$-6 {
  ///   margin-inline-end: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .me\:\$-7 {
  ///   margin-inline-end: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .me\:\$-8 {
  ///   margin-inline-end: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .me\:\$-9 {
  ///   margin-inline-end: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .me\:\$-10 {
  ///   margin-inline-end: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .me\:\$-11 {
  ///   margin-inline-end: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .me\:\$-12 {
  ///   margin-inline-end: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .me\:\$-14 {
  ///   margin-inline-end: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .me\:\$-16 {
  ///   margin-inline-end: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .me\:\$-20 {
  ///   margin-inline-end: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .me\:\$-24 {
  ///   margin-inline-end: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .me\:\$-28 {
  ///   margin-inline-end: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .me\:\$-32 {
  ///   margin-inline-end: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .me\:\$-36 {
  ///   margin-inline-end: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .me\:\$-40 {
  ///   margin-inline-end: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .me\:\$-44 {
  ///   margin-inline-end: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .me\:\$-48 {
  ///   margin-inline-end: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .me\:\$-52 {
  ///   margin-inline-end: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .me\:\$-56 {
  ///   margin-inline-end: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .me\:\$-60 {
  ///   margin-inline-end: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .me\:\$-64 {
  ///   margin-inline-end: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .me\:\$-72 {
  ///   margin-inline-end: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .me\:\$-80 {
  ///   margin-inline-end: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .me\:\$-96 {
  ///   margin-inline-end: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .me\:\$-px {
  ///   margin-inline-end: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .me\:\$-0\.5 {
  ///   margin-inline-end: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .me\:\$-1\.5 {
  ///   margin-inline-end: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .me\:\$-2\.5 {
  ///   margin-inline-end: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .me\:\$-3\.5 {
  ///   margin-inline-end: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMe for GeneratedAtomMe {}
pub struct GeneratedAtomMt(String);
impl GeneratedSkribbleValue for GeneratedAtomMt {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMt: GeneratedSkribbleValue {
  /// ```css
  /// .mt\:\$0 {
  ///   margin-top: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .mt\:\$1 {
  ///   margin-top: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .mt\:\$2 {
  ///   margin-top: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .mt\:\$3 {
  ///   margin-top: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .mt\:\$4 {
  ///   margin-top: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .mt\:\$5 {
  ///   margin-top: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .mt\:\$6 {
  ///   margin-top: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .mt\:\$7 {
  ///   margin-top: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .mt\:\$8 {
  ///   margin-top: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .mt\:\$9 {
  ///   margin-top: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .mt\:\$10 {
  ///   margin-top: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .mt\:\$11 {
  ///   margin-top: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .mt\:\$12 {
  ///   margin-top: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .mt\:\$14 {
  ///   margin-top: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .mt\:\$16 {
  ///   margin-top: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .mt\:\$20 {
  ///   margin-top: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .mt\:\$24 {
  ///   margin-top: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .mt\:\$28 {
  ///   margin-top: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .mt\:\$32 {
  ///   margin-top: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .mt\:\$36 {
  ///   margin-top: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .mt\:\$40 {
  ///   margin-top: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .mt\:\$44 {
  ///   margin-top: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .mt\:\$48 {
  ///   margin-top: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .mt\:\$52 {
  ///   margin-top: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .mt\:\$56 {
  ///   margin-top: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .mt\:\$60 {
  ///   margin-top: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .mt\:\$64 {
  ///   margin-top: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .mt\:\$72 {
  ///   margin-top: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .mt\:\$80 {
  ///   margin-top: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .mt\:\$96 {
  ///   margin-top: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .mt\:\$px {
  ///   margin-top: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .mt\:\$0\.5 {
  ///   margin-top: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .mt\:\$1\.5 {
  ///   margin-top: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .mt\:\$2\.5 {
  ///   margin-top: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .mt\:\$3\.5 {
  ///   margin-top: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .mt\:\$-1 {
  ///   margin-top: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .mt\:\$-2 {
  ///   margin-top: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .mt\:\$-3 {
  ///   margin-top: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .mt\:\$-4 {
  ///   margin-top: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .mt\:\$-5 {
  ///   margin-top: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .mt\:\$-6 {
  ///   margin-top: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .mt\:\$-7 {
  ///   margin-top: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .mt\:\$-8 {
  ///   margin-top: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .mt\:\$-9 {
  ///   margin-top: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .mt\:\$-10 {
  ///   margin-top: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .mt\:\$-11 {
  ///   margin-top: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .mt\:\$-12 {
  ///   margin-top: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .mt\:\$-14 {
  ///   margin-top: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .mt\:\$-16 {
  ///   margin-top: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .mt\:\$-20 {
  ///   margin-top: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .mt\:\$-24 {
  ///   margin-top: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .mt\:\$-28 {
  ///   margin-top: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .mt\:\$-32 {
  ///   margin-top: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .mt\:\$-36 {
  ///   margin-top: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .mt\:\$-40 {
  ///   margin-top: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .mt\:\$-44 {
  ///   margin-top: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .mt\:\$-48 {
  ///   margin-top: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .mt\:\$-52 {
  ///   margin-top: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .mt\:\$-56 {
  ///   margin-top: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .mt\:\$-60 {
  ///   margin-top: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .mt\:\$-64 {
  ///   margin-top: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .mt\:\$-72 {
  ///   margin-top: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .mt\:\$-80 {
  ///   margin-top: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .mt\:\$-96 {
  ///   margin-top: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .mt\:\$-px {
  ///   margin-top: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .mt\:\$-0\.5 {
  ///   margin-top: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .mt\:\$-1\.5 {
  ///   margin-top: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .mt\:\$-2\.5 {
  ///   margin-top: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .mt\:\$-3\.5 {
  ///   margin-top: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMt for GeneratedAtomMt {}
pub struct GeneratedAtomMr(String);
impl GeneratedSkribbleValue for GeneratedAtomMr {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMr: GeneratedSkribbleValue {
  /// ```css
  /// .mr\:\$0 {
  ///   margin-right: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .mr\:\$1 {
  ///   margin-right: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .mr\:\$2 {
  ///   margin-right: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .mr\:\$3 {
  ///   margin-right: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .mr\:\$4 {
  ///   margin-right: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .mr\:\$5 {
  ///   margin-right: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .mr\:\$6 {
  ///   margin-right: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .mr\:\$7 {
  ///   margin-right: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .mr\:\$8 {
  ///   margin-right: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .mr\:\$9 {
  ///   margin-right: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .mr\:\$10 {
  ///   margin-right: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .mr\:\$11 {
  ///   margin-right: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .mr\:\$12 {
  ///   margin-right: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .mr\:\$14 {
  ///   margin-right: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .mr\:\$16 {
  ///   margin-right: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .mr\:\$20 {
  ///   margin-right: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .mr\:\$24 {
  ///   margin-right: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .mr\:\$28 {
  ///   margin-right: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .mr\:\$32 {
  ///   margin-right: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .mr\:\$36 {
  ///   margin-right: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .mr\:\$40 {
  ///   margin-right: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .mr\:\$44 {
  ///   margin-right: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .mr\:\$48 {
  ///   margin-right: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .mr\:\$52 {
  ///   margin-right: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .mr\:\$56 {
  ///   margin-right: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .mr\:\$60 {
  ///   margin-right: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .mr\:\$64 {
  ///   margin-right: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .mr\:\$72 {
  ///   margin-right: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .mr\:\$80 {
  ///   margin-right: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .mr\:\$96 {
  ///   margin-right: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .mr\:\$px {
  ///   margin-right: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .mr\:\$0\.5 {
  ///   margin-right: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .mr\:\$1\.5 {
  ///   margin-right: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .mr\:\$2\.5 {
  ///   margin-right: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .mr\:\$3\.5 {
  ///   margin-right: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .mr\:\$-1 {
  ///   margin-right: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .mr\:\$-2 {
  ///   margin-right: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .mr\:\$-3 {
  ///   margin-right: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .mr\:\$-4 {
  ///   margin-right: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .mr\:\$-5 {
  ///   margin-right: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .mr\:\$-6 {
  ///   margin-right: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .mr\:\$-7 {
  ///   margin-right: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .mr\:\$-8 {
  ///   margin-right: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .mr\:\$-9 {
  ///   margin-right: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .mr\:\$-10 {
  ///   margin-right: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .mr\:\$-11 {
  ///   margin-right: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .mr\:\$-12 {
  ///   margin-right: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .mr\:\$-14 {
  ///   margin-right: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .mr\:\$-16 {
  ///   margin-right: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .mr\:\$-20 {
  ///   margin-right: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .mr\:\$-24 {
  ///   margin-right: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .mr\:\$-28 {
  ///   margin-right: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .mr\:\$-32 {
  ///   margin-right: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .mr\:\$-36 {
  ///   margin-right: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .mr\:\$-40 {
  ///   margin-right: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .mr\:\$-44 {
  ///   margin-right: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .mr\:\$-48 {
  ///   margin-right: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .mr\:\$-52 {
  ///   margin-right: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .mr\:\$-56 {
  ///   margin-right: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .mr\:\$-60 {
  ///   margin-right: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .mr\:\$-64 {
  ///   margin-right: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .mr\:\$-72 {
  ///   margin-right: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .mr\:\$-80 {
  ///   margin-right: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .mr\:\$-96 {
  ///   margin-right: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .mr\:\$-px {
  ///   margin-right: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .mr\:\$-0\.5 {
  ///   margin-right: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .mr\:\$-1\.5 {
  ///   margin-right: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .mr\:\$-2\.5 {
  ///   margin-right: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .mr\:\$-3\.5 {
  ///   margin-right: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMr for GeneratedAtomMr {}
pub struct GeneratedAtomMb(String);
impl GeneratedSkribbleValue for GeneratedAtomMb {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMb: GeneratedSkribbleValue {
  /// ```css
  /// .mb\:\$0 {
  ///   margin-bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .mb\:\$1 {
  ///   margin-bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .mb\:\$2 {
  ///   margin-bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .mb\:\$3 {
  ///   margin-bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .mb\:\$4 {
  ///   margin-bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .mb\:\$5 {
  ///   margin-bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .mb\:\$6 {
  ///   margin-bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .mb\:\$7 {
  ///   margin-bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .mb\:\$8 {
  ///   margin-bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .mb\:\$9 {
  ///   margin-bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .mb\:\$10 {
  ///   margin-bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .mb\:\$11 {
  ///   margin-bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .mb\:\$12 {
  ///   margin-bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .mb\:\$14 {
  ///   margin-bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .mb\:\$16 {
  ///   margin-bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .mb\:\$20 {
  ///   margin-bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .mb\:\$24 {
  ///   margin-bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .mb\:\$28 {
  ///   margin-bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .mb\:\$32 {
  ///   margin-bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .mb\:\$36 {
  ///   margin-bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .mb\:\$40 {
  ///   margin-bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .mb\:\$44 {
  ///   margin-bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .mb\:\$48 {
  ///   margin-bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .mb\:\$52 {
  ///   margin-bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .mb\:\$56 {
  ///   margin-bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .mb\:\$60 {
  ///   margin-bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .mb\:\$64 {
  ///   margin-bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .mb\:\$72 {
  ///   margin-bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .mb\:\$80 {
  ///   margin-bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .mb\:\$96 {
  ///   margin-bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .mb\:\$px {
  ///   margin-bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .mb\:\$0\.5 {
  ///   margin-bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .mb\:\$1\.5 {
  ///   margin-bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .mb\:\$2\.5 {
  ///   margin-bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .mb\:\$3\.5 {
  ///   margin-bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .mb\:\$-1 {
  ///   margin-bottom: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .mb\:\$-2 {
  ///   margin-bottom: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .mb\:\$-3 {
  ///   margin-bottom: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .mb\:\$-4 {
  ///   margin-bottom: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .mb\:\$-5 {
  ///   margin-bottom: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .mb\:\$-6 {
  ///   margin-bottom: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .mb\:\$-7 {
  ///   margin-bottom: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .mb\:\$-8 {
  ///   margin-bottom: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .mb\:\$-9 {
  ///   margin-bottom: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .mb\:\$-10 {
  ///   margin-bottom: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .mb\:\$-11 {
  ///   margin-bottom: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .mb\:\$-12 {
  ///   margin-bottom: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .mb\:\$-14 {
  ///   margin-bottom: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .mb\:\$-16 {
  ///   margin-bottom: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .mb\:\$-20 {
  ///   margin-bottom: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .mb\:\$-24 {
  ///   margin-bottom: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .mb\:\$-28 {
  ///   margin-bottom: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .mb\:\$-32 {
  ///   margin-bottom: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .mb\:\$-36 {
  ///   margin-bottom: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .mb\:\$-40 {
  ///   margin-bottom: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .mb\:\$-44 {
  ///   margin-bottom: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .mb\:\$-48 {
  ///   margin-bottom: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .mb\:\$-52 {
  ///   margin-bottom: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .mb\:\$-56 {
  ///   margin-bottom: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .mb\:\$-60 {
  ///   margin-bottom: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .mb\:\$-64 {
  ///   margin-bottom: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .mb\:\$-72 {
  ///   margin-bottom: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .mb\:\$-80 {
  ///   margin-bottom: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .mb\:\$-96 {
  ///   margin-bottom: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .mb\:\$-px {
  ///   margin-bottom: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .mb\:\$-0\.5 {
  ///   margin-bottom: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .mb\:\$-1\.5 {
  ///   margin-bottom: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .mb\:\$-2\.5 {
  ///   margin-bottom: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .mb\:\$-3\.5 {
  ///   margin-bottom: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMb for GeneratedAtomMb {}
pub struct GeneratedAtomMl(String);
impl GeneratedSkribbleValue for GeneratedAtomMl {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetMl: GeneratedSkribbleValue {
  /// ```css
  /// .ml\:\$0 {
  ///   margin-left: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .ml\:\$1 {
  ///   margin-left: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .ml\:\$2 {
  ///   margin-left: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .ml\:\$3 {
  ///   margin-left: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .ml\:\$4 {
  ///   margin-left: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .ml\:\$5 {
  ///   margin-left: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .ml\:\$6 {
  ///   margin-left: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .ml\:\$7 {
  ///   margin-left: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .ml\:\$8 {
  ///   margin-left: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .ml\:\$9 {
  ///   margin-left: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .ml\:\$10 {
  ///   margin-left: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .ml\:\$11 {
  ///   margin-left: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .ml\:\$12 {
  ///   margin-left: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .ml\:\$14 {
  ///   margin-left: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .ml\:\$16 {
  ///   margin-left: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .ml\:\$20 {
  ///   margin-left: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .ml\:\$24 {
  ///   margin-left: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .ml\:\$28 {
  ///   margin-left: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .ml\:\$32 {
  ///   margin-left: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .ml\:\$36 {
  ///   margin-left: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .ml\:\$40 {
  ///   margin-left: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .ml\:\$44 {
  ///   margin-left: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .ml\:\$48 {
  ///   margin-left: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .ml\:\$52 {
  ///   margin-left: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .ml\:\$56 {
  ///   margin-left: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .ml\:\$60 {
  ///   margin-left: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .ml\:\$64 {
  ///   margin-left: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .ml\:\$72 {
  ///   margin-left: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .ml\:\$80 {
  ///   margin-left: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .ml\:\$96 {
  ///   margin-left: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .ml\:\$px {
  ///   margin-left: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .ml\:\$0\.5 {
  ///   margin-left: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .ml\:\$1\.5 {
  ///   margin-left: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .ml\:\$2\.5 {
  ///   margin-left: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .ml\:\$3\.5 {
  ///   margin-left: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .ml\:\$-1 {
  ///   margin-left: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .ml\:\$-2 {
  ///   margin-left: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .ml\:\$-3 {
  ///   margin-left: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .ml\:\$-4 {
  ///   margin-left: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .ml\:\$-5 {
  ///   margin-left: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .ml\:\$-6 {
  ///   margin-left: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .ml\:\$-7 {
  ///   margin-left: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .ml\:\$-8 {
  ///   margin-left: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .ml\:\$-9 {
  ///   margin-left: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .ml\:\$-10 {
  ///   margin-left: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .ml\:\$-11 {
  ///   margin-left: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .ml\:\$-12 {
  ///   margin-left: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .ml\:\$-14 {
  ///   margin-left: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .ml\:\$-16 {
  ///   margin-left: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .ml\:\$-20 {
  ///   margin-left: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .ml\:\$-24 {
  ///   margin-left: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .ml\:\$-28 {
  ///   margin-left: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .ml\:\$-32 {
  ///   margin-left: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .ml\:\$-36 {
  ///   margin-left: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .ml\:\$-40 {
  ///   margin-left: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .ml\:\$-44 {
  ///   margin-left: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .ml\:\$-48 {
  ///   margin-left: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .ml\:\$-52 {
  ///   margin-left: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .ml\:\$-56 {
  ///   margin-left: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .ml\:\$-60 {
  ///   margin-left: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .ml\:\$-64 {
  ///   margin-left: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .ml\:\$-72 {
  ///   margin-left: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .ml\:\$-80 {
  ///   margin-left: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .ml\:\$-96 {
  ///   margin-left: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .ml\:\$-px {
  ///   margin-left: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .ml\:\$-0\.5 {
  ///   margin-left: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .ml\:\$-1\.5 {
  ///   margin-left: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .ml\:\$-2\.5 {
  ///   margin-left: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .ml\:\$-3\.5 {
  ///   margin-left: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetMl for GeneratedAtomMl {}
pub struct GeneratedAtomSpaceX(String);
impl GeneratedSkribbleValue for GeneratedAtomSpaceX {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSpaceX: GeneratedSkribbleValue {
  /// ```css
  /// .space-x\:\$0 {
  ///   margin-right: calc(0px * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(0px * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .space-x\:\$1 {
  ///   margin-right: calc(0.25rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(0.25rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .space-x\:\$2 {
  ///   margin-right: calc(0.5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(0.5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .space-x\:\$3 {
  ///   margin-right: calc(0.75rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(0.75rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .space-x\:\$4 {
  ///   margin-right: calc(1rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(1rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .space-x\:\$5 {
  ///   margin-right: calc(1.25rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(1.25rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .space-x\:\$6 {
  ///   margin-right: calc(1.5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(1.5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .space-x\:\$7 {
  ///   margin-right: calc(1.75rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(1.75rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .space-x\:\$8 {
  ///   margin-right: calc(2rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(2rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .space-x\:\$9 {
  ///   margin-right: calc(2.25rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(2.25rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .space-x\:\$10 {
  ///   margin-right: calc(2.5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(2.5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .space-x\:\$11 {
  ///   margin-right: calc(2.75rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(2.75rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .space-x\:\$12 {
  ///   margin-right: calc(3rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(3rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .space-x\:\$14 {
  ///   margin-right: calc(3.5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(3.5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .space-x\:\$16 {
  ///   margin-right: calc(4rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(4rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .space-x\:\$20 {
  ///   margin-right: calc(5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .space-x\:\$24 {
  ///   margin-right: calc(6rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(6rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .space-x\:\$28 {
  ///   margin-right: calc(7rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(7rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .space-x\:\$32 {
  ///   margin-right: calc(8rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(8rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .space-x\:\$36 {
  ///   margin-right: calc(9rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(9rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .space-x\:\$40 {
  ///   margin-right: calc(10rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(10rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .space-x\:\$44 {
  ///   margin-right: calc(11rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(11rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .space-x\:\$48 {
  ///   margin-right: calc(12rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(12rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .space-x\:\$52 {
  ///   margin-right: calc(13rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(13rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .space-x\:\$56 {
  ///   margin-right: calc(14rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(14rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .space-x\:\$60 {
  ///   margin-right: calc(15rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(15rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .space-x\:\$64 {
  ///   margin-right: calc(16rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(16rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .space-x\:\$72 {
  ///   margin-right: calc(18rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(18rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .space-x\:\$80 {
  ///   margin-right: calc(20rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(20rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .space-x\:\$96 {
  ///   margin-right: calc(24rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(24rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .space-x\:\$px {
  ///   margin-right: calc(1px * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(1px * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .space-x\:\$0\.5 {
  ///   margin-right: calc(0.125rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(0.125rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .space-x\:\$1\.5 {
  ///   margin-right: calc(0.375rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(0.375rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .space-x\:\$2\.5 {
  ///   margin-right: calc(0.625rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(0.625rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .space-x\:\$3\.5 {
  ///   margin-right: calc(0.875rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(0.875rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .space-x\:\$-1 {
  ///   margin-right: calc(-0.25rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-0.25rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .space-x\:\$-2 {
  ///   margin-right: calc(-0.5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-0.5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .space-x\:\$-3 {
  ///   margin-right: calc(-0.75rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-0.75rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .space-x\:\$-4 {
  ///   margin-right: calc(-1rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-1rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .space-x\:\$-5 {
  ///   margin-right: calc(-1.25rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-1.25rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .space-x\:\$-6 {
  ///   margin-right: calc(-1.5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-1.5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .space-x\:\$-7 {
  ///   margin-right: calc(-1.75rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-1.75rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .space-x\:\$-8 {
  ///   margin-right: calc(-2rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-2rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .space-x\:\$-9 {
  ///   margin-right: calc(-2.25rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-2.25rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .space-x\:\$-10 {
  ///   margin-right: calc(-2.5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-2.5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .space-x\:\$-11 {
  ///   margin-right: calc(-2.75rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-2.75rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .space-x\:\$-12 {
  ///   margin-right: calc(-3rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-3rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .space-x\:\$-14 {
  ///   margin-right: calc(-3.5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-3.5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .space-x\:\$-16 {
  ///   margin-right: calc(-4rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-4rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .space-x\:\$-20 {
  ///   margin-right: calc(-5rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-5rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .space-x\:\$-24 {
  ///   margin-right: calc(-6rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-6rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .space-x\:\$-28 {
  ///   margin-right: calc(-7rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-7rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .space-x\:\$-32 {
  ///   margin-right: calc(-8rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-8rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .space-x\:\$-36 {
  ///   margin-right: calc(-9rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-9rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .space-x\:\$-40 {
  ///   margin-right: calc(-10rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-10rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .space-x\:\$-44 {
  ///   margin-right: calc(-11rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-11rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .space-x\:\$-48 {
  ///   margin-right: calc(-12rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-12rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .space-x\:\$-52 {
  ///   margin-right: calc(-13rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-13rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .space-x\:\$-56 {
  ///   margin-right: calc(-14rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-14rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .space-x\:\$-60 {
  ///   margin-right: calc(-15rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-15rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .space-x\:\$-64 {
  ///   margin-right: calc(-16rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-16rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .space-x\:\$-72 {
  ///   margin-right: calc(-18rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-18rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .space-x\:\$-80 {
  ///   margin-right: calc(-20rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-20rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .space-x\:\$-96 {
  ///   margin-right: calc(-24rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-24rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .space-x\:\$-px {
  ///   margin-right: calc(-1px * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-1px * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .space-x\:\$-0\.5 {
  ///   margin-right: calc(-0.125rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-0.125rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .space-x\:\$-1\.5 {
  ///   margin-right: calc(-0.375rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-0.375rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .space-x\:\$-2\.5 {
  ///   margin-right: calc(-0.625rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-0.625rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .space-x\:\$-3\.5 {
  ///   margin-right: calc(-0.875rem * var(--sk-space-x-reverse, 0));
  ///   margin-left: calc(-0.875rem * calc(1 - var(--sk-space-x-reverse, 0)));
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetSpaceX for GeneratedAtomSpaceX {}
pub struct GeneratedAtomSpaceY(String);
impl GeneratedSkribbleValue for GeneratedAtomSpaceY {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSpaceY: GeneratedSkribbleValue {
  /// ```css
  /// .space-y\:\$0 {
  ///   margin-top: calc(0px * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(0px * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .space-y\:\$1 {
  ///   margin-top: calc(0.25rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(0.25rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .space-y\:\$2 {
  ///   margin-top: calc(0.5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(0.5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .space-y\:\$3 {
  ///   margin-top: calc(0.75rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(0.75rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .space-y\:\$4 {
  ///   margin-top: calc(1rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(1rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .space-y\:\$5 {
  ///   margin-top: calc(1.25rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(1.25rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .space-y\:\$6 {
  ///   margin-top: calc(1.5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(1.5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .space-y\:\$7 {
  ///   margin-top: calc(1.75rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(1.75rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .space-y\:\$8 {
  ///   margin-top: calc(2rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(2rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .space-y\:\$9 {
  ///   margin-top: calc(2.25rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(2.25rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .space-y\:\$10 {
  ///   margin-top: calc(2.5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(2.5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .space-y\:\$11 {
  ///   margin-top: calc(2.75rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(2.75rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .space-y\:\$12 {
  ///   margin-top: calc(3rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(3rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .space-y\:\$14 {
  ///   margin-top: calc(3.5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(3.5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .space-y\:\$16 {
  ///   margin-top: calc(4rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(4rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .space-y\:\$20 {
  ///   margin-top: calc(5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .space-y\:\$24 {
  ///   margin-top: calc(6rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(6rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .space-y\:\$28 {
  ///   margin-top: calc(7rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(7rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .space-y\:\$32 {
  ///   margin-top: calc(8rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(8rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .space-y\:\$36 {
  ///   margin-top: calc(9rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(9rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .space-y\:\$40 {
  ///   margin-top: calc(10rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(10rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .space-y\:\$44 {
  ///   margin-top: calc(11rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(11rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .space-y\:\$48 {
  ///   margin-top: calc(12rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(12rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .space-y\:\$52 {
  ///   margin-top: calc(13rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(13rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .space-y\:\$56 {
  ///   margin-top: calc(14rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(14rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .space-y\:\$60 {
  ///   margin-top: calc(15rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(15rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .space-y\:\$64 {
  ///   margin-top: calc(16rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(16rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .space-y\:\$72 {
  ///   margin-top: calc(18rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(18rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .space-y\:\$80 {
  ///   margin-top: calc(20rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(20rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .space-y\:\$96 {
  ///   margin-top: calc(24rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(24rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .space-y\:\$px {
  ///   margin-top: calc(1px * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(1px * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .space-y\:\$0\.5 {
  ///   margin-top: calc(0.125rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(0.125rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .space-y\:\$1\.5 {
  ///   margin-top: calc(0.375rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(0.375rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .space-y\:\$2\.5 {
  ///   margin-top: calc(0.625rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(0.625rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .space-y\:\$3\.5 {
  ///   margin-top: calc(0.875rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(0.875rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .space-y\:\$-1 {
  ///   margin-top: calc(-0.25rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-0.25rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .space-y\:\$-2 {
  ///   margin-top: calc(-0.5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-0.5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .space-y\:\$-3 {
  ///   margin-top: calc(-0.75rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-0.75rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .space-y\:\$-4 {
  ///   margin-top: calc(-1rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-1rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .space-y\:\$-5 {
  ///   margin-top: calc(-1.25rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-1.25rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .space-y\:\$-6 {
  ///   margin-top: calc(-1.5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-1.5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .space-y\:\$-7 {
  ///   margin-top: calc(-1.75rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-1.75rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .space-y\:\$-8 {
  ///   margin-top: calc(-2rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-2rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .space-y\:\$-9 {
  ///   margin-top: calc(-2.25rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-2.25rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .space-y\:\$-10 {
  ///   margin-top: calc(-2.5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-2.5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .space-y\:\$-11 {
  ///   margin-top: calc(-2.75rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-2.75rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .space-y\:\$-12 {
  ///   margin-top: calc(-3rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-3rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .space-y\:\$-14 {
  ///   margin-top: calc(-3.5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-3.5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .space-y\:\$-16 {
  ///   margin-top: calc(-4rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-4rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .space-y\:\$-20 {
  ///   margin-top: calc(-5rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-5rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .space-y\:\$-24 {
  ///   margin-top: calc(-6rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-6rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .space-y\:\$-28 {
  ///   margin-top: calc(-7rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-7rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .space-y\:\$-32 {
  ///   margin-top: calc(-8rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-8rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .space-y\:\$-36 {
  ///   margin-top: calc(-9rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-9rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .space-y\:\$-40 {
  ///   margin-top: calc(-10rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-10rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .space-y\:\$-44 {
  ///   margin-top: calc(-11rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-11rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .space-y\:\$-48 {
  ///   margin-top: calc(-12rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-12rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .space-y\:\$-52 {
  ///   margin-top: calc(-13rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-13rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .space-y\:\$-56 {
  ///   margin-top: calc(-14rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-14rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .space-y\:\$-60 {
  ///   margin-top: calc(-15rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-15rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .space-y\:\$-64 {
  ///   margin-top: calc(-16rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-16rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .space-y\:\$-72 {
  ///   margin-top: calc(-18rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-18rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .space-y\:\$-80 {
  ///   margin-top: calc(-20rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-20rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .space-y\:\$-96 {
  ///   margin-top: calc(-24rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-24rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .space-y\:\$-px {
  ///   margin-top: calc(-1px * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-1px * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .space-y\:\$-0\.5 {
  ///   margin-top: calc(-0.125rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-0.125rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .space-y\:\$-1\.5 {
  ///   margin-top: calc(-0.375rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-0.375rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .space-y\:\$-2\.5 {
  ///   margin-top: calc(-0.625rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-0.625rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .space-y\:\$-3\.5 {
  ///   margin-top: calc(-0.875rem * calc(1 - var(--sk-space-y-reverse, 0)));
  ///   margin-bottom: calc(-0.875rem * var(--sk-space-y-reverse, 0));
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
}
impl GeneratedValueSetSpaceY for GeneratedAtomSpaceY {}
pub struct GeneratedAtomZ(String);
impl GeneratedSkribbleValue for GeneratedAtomZ {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetZ: GeneratedSkribbleValue {
  /// ```css
  /// .z\:\$0 {
  ///   z-index: 0;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .z\:\$1 {
  ///   z-index: 1;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .z\:\$2 {
  ///   z-index: 2;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .z\:\$3 {
  ///   z-index: 3;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .z\:\$4 {
  ///   z-index: 4;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .z\:\$5 {
  ///   z-index: 5;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .z\:\$10 {
  ///   z-index: 10;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .z\:\$20 {
  ///   z-index: 20;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .z\:\$30 {
  ///   z-index: 30;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_value("30")
  }
  /// ```css
  /// .z\:\$40 {
  ///   z-index: 40;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .z\:\$50 {
  ///   z-index: 50;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .z\:\$60 {
  ///   z-index: 60;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .z\:\$auto {
  ///   z-index: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .z\:\$-1 {
  ///   z-index: -1;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .z\:\$-2 {
  ///   z-index: -2;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .z\:\$-3 {
  ///   z-index: -3;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .z\:\$-5 {
  ///   z-index: -5;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .z\:\$-10 {
  ///   z-index: -10;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .z\:\$-20 {
  ///   z-index: -20;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .z\:\$-30 {
  ///   z-index: -30;
  /// }
  /// ```
  #[inline]
  fn m30(&self) -> String {
    self.append_value("-30")
  }
  /// ```css
  /// .z\:\$-40 {
  ///   z-index: -40;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .z\:\$-50 {
  ///   z-index: -50;
  /// }
  /// ```
  #[inline]
  fn m50(&self) -> String {
    self.append_value("-50")
  }
  /// ```css
  /// .z\:\$-60 {
  ///   z-index: -60;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
}
impl GeneratedValueSetZ for GeneratedAtomZ {}
pub struct GeneratedAtomDir(String);
impl GeneratedSkribbleValue for GeneratedAtomDir {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetDir: GeneratedSkribbleValue {
  /// ```css
  /// .dir\:\$ltr {
  ///   direction: ltr;
  /// }
  /// ```
  #[inline]
  fn ltr(&self) -> String {
    self.append_value("ltr")
  }
  /// ```css
  /// .dir\:\$rtl {
  ///   direction: rtl;
  /// }
  /// ```
  #[inline]
  fn rtl(&self) -> String {
    self.append_value("rtl")
  }
}
impl GeneratedValueSetDir for GeneratedAtomDir {}
pub struct GeneratedAtomBg(String);
impl GeneratedSkribbleValue for GeneratedAtomBg {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl GeneratedColorSet for GeneratedAtomBg {}
pub struct GeneratedAtomOpacity(String);
impl GeneratedSkribbleValue for GeneratedAtomOpacity {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetOpacity: GeneratedSkribbleValue {
  /// ```css
  /// .opacity\:\$0 {
  ///   opacity: 0%;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .opacity\:\$5 {
  ///   opacity: 5%;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .opacity\:\$10 {
  ///   opacity: 10%;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .opacity\:\$20 {
  ///   opacity: 20%;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .opacity\:\$30 {
  ///   opacity: 30%;
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_value("30")
  }
  /// ```css
  /// .opacity\:\$40 {
  ///   opacity: 40%;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .opacity\:\$50 {
  ///   opacity: 50%;
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .opacity\:\$60 {
  ///   opacity: 60%;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .opacity\:\$70 {
  ///   opacity: 70%;
  /// }
  /// ```
  #[inline]
  fn n70(&self) -> String {
    self.append_value("70")
  }
  /// ```css
  /// .opacity\:\$75 {
  ///   opacity: 75%;
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .opacity\:\$80 {
  ///   opacity: 80%;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .opacity\:\$90 {
  ///   opacity: 90%;
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .opacity\:\$95 {
  ///   opacity: 95%;
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_value("95")
  }
  /// ```css
  /// .opacity\:\$100 {
  ///   opacity: 100%;
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
}
impl GeneratedValueSetOpacity for GeneratedAtomOpacity {}
pub struct GeneratedAtomAspect(String);
impl GeneratedSkribbleValue for GeneratedAtomAspect {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetAspect: GeneratedSkribbleValue {
  /// ```css
  /// .aspect\:\$auto {
  ///   aspect-ratio: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .aspect\:\$square {
  ///   aspect-ratio: 1;
  /// }
  /// ```
  #[inline]
  fn square(&self) -> String {
    self.append_value("square")
  }
  /// ```css
  /// .aspect\:\$video {
  ///   aspect-ratio: 16 / 9;
  /// }
  /// ```
  #[inline]
  fn video(&self) -> String {
    self.append_value("video")
  }
  /// ```css
  /// .aspect\:\$portrait {
  ///   aspect-ratio: 9 / 16;
  /// }
  /// ```
  #[inline]
  fn portrait(&self) -> String {
    self.append_value("portrait")
  }
  /// ```css
  /// .aspect\:\$box {
  ///   aspect-ratio: 4 / 3;
  /// }
  /// ```
  #[inline]
  fn r#box(&self) -> String {
    self.append_value("box")
  }
}
impl GeneratedValueSetAspect for GeneratedAtomAspect {}
pub struct GeneratedAtomColumns(String);
impl GeneratedSkribbleValue for GeneratedAtomColumns {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetColumns: GeneratedSkribbleValue {
  /// ```css
  /// .columns\:\$1 {
  ///   columns: 1;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .columns\:\$2 {
  ///   columns: 2;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .columns\:\$3 {
  ///   columns: 3;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .columns\:\$4 {
  ///   columns: 4;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .columns\:\$5 {
  ///   columns: 5;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .columns\:\$6 {
  ///   columns: 6;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .columns\:\$7 {
  ///   columns: 7;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .columns\:\$8 {
  ///   columns: 8;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .columns\:\$9 {
  ///   columns: 9;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .columns\:\$10 {
  ///   columns: 10;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .columns\:\$11 {
  ///   columns: 11;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .columns\:\$12 {
  ///   columns: 12;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .columns\:\$3xs {
  ///   columns: 16rem;
  /// }
  /// ```
  #[inline]
  fn n3xs(&self) -> String {
    self.append_value("3xs")
  }
  /// ```css
  /// .columns\:\$2xs {
  ///   columns: 18rem;
  /// }
  /// ```
  #[inline]
  fn n2xs(&self) -> String {
    self.append_value("2xs")
  }
  /// ```css
  /// .columns\:\$xs {
  ///   columns: 20rem;
  /// }
  /// ```
  #[inline]
  fn xs(&self) -> String {
    self.append_value("xs")
  }
  /// ```css
  /// .columns\:\$sm {
  ///   columns: 24rem;
  /// }
  /// ```
  #[inline]
  fn sm(&self) -> String {
    self.append_value("sm")
  }
  /// ```css
  /// .columns\:\$md {
  ///   columns: 28rem;
  /// }
  /// ```
  #[inline]
  fn md(&self) -> String {
    self.append_value("md")
  }
  /// ```css
  /// .columns\:\$lg {
  ///   columns: 32rem;
  /// }
  /// ```
  #[inline]
  fn lg(&self) -> String {
    self.append_value("lg")
  }
  /// ```css
  /// .columns\:\$xl {
  ///   columns: 36rem;
  /// }
  /// ```
  #[inline]
  fn xl(&self) -> String {
    self.append_value("xl")
  }
  /// ```css
  /// .columns\:\$2xl {
  ///   columns: 42rem;
  /// }
  /// ```
  #[inline]
  fn n2xl(&self) -> String {
    self.append_value("2xl")
  }
  /// ```css
  /// .columns\:\$3xl {
  ///   columns: 48rem;
  /// }
  /// ```
  #[inline]
  fn n3xl(&self) -> String {
    self.append_value("3xl")
  }
  /// ```css
  /// .columns\:\$4xl {
  ///   columns: 56rem;
  /// }
  /// ```
  #[inline]
  fn n4xl(&self) -> String {
    self.append_value("4xl")
  }
  /// ```css
  /// .columns\:\$5xl {
  ///   columns: 64rem;
  /// }
  /// ```
  #[inline]
  fn n5xl(&self) -> String {
    self.append_value("5xl")
  }
  /// ```css
  /// .columns\:\$6xl {
  ///   columns: 72rem;
  /// }
  /// ```
  #[inline]
  fn n6xl(&self) -> String {
    self.append_value("6xl")
  }
  /// ```css
  /// .columns\:\$7xl {
  ///   columns: 80rem;
  /// }
  /// ```
  #[inline]
  fn n7xl(&self) -> String {
    self.append_value("7xl")
  }
}
impl GeneratedValueSetColumns for GeneratedAtomColumns {}
pub struct GeneratedAtomBreakAfter(String);
impl GeneratedSkribbleValue for GeneratedAtomBreakAfter {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBreakAfter: GeneratedSkribbleValue {
  /// ```css
  /// .break-after\:\$auto {
  ///   break-after: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .break-after\:\$avoid {
  ///   break-after: avoid;
  /// }
  /// ```
  #[inline]
  fn avoid(&self) -> String {
    self.append_value("avoid")
  }
  /// ```css
  /// .break-after\:\$all {
  ///   break-after: all;
  /// }
  /// ```
  #[inline]
  fn all(&self) -> String {
    self.append_value("all")
  }
  /// ```css
  /// .break-after\:\$avoid-page {
  ///   break-after: avoid-page;
  /// }
  /// ```
  #[inline]
  fn avoid_page(&self) -> String {
    self.append_value("avoid-page")
  }
  /// ```css
  /// .break-after\:\$page {
  ///   break-after: page;
  /// }
  /// ```
  #[inline]
  fn page(&self) -> String {
    self.append_value("page")
  }
  /// ```css
  /// .break-after\:\$left {
  ///   break-after: left;
  /// }
  /// ```
  #[inline]
  fn left(&self) -> String {
    self.append_value("left")
  }
  /// ```css
  /// .break-after\:\$right {
  ///   break-after: right;
  /// }
  /// ```
  #[inline]
  fn right(&self) -> String {
    self.append_value("right")
  }
  /// ```css
  /// .break-after\:\$column {
  ///   break-after: column;
  /// }
  /// ```
  #[inline]
  fn column(&self) -> String {
    self.append_value("column")
  }
}
impl GeneratedValueSetBreakAfter for GeneratedAtomBreakAfter {}
pub struct GeneratedAtomBreakBefore(String);
impl GeneratedSkribbleValue for GeneratedAtomBreakBefore {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBreakBefore: GeneratedSkribbleValue {
  /// ```css
  /// .break-before\:\$auto {
  ///   break-before: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .break-before\:\$avoid {
  ///   break-before: avoid;
  /// }
  /// ```
  #[inline]
  fn avoid(&self) -> String {
    self.append_value("avoid")
  }
  /// ```css
  /// .break-before\:\$all {
  ///   break-before: all;
  /// }
  /// ```
  #[inline]
  fn all(&self) -> String {
    self.append_value("all")
  }
  /// ```css
  /// .break-before\:\$avoid-page {
  ///   break-before: avoid-page;
  /// }
  /// ```
  #[inline]
  fn avoid_page(&self) -> String {
    self.append_value("avoid-page")
  }
  /// ```css
  /// .break-before\:\$page {
  ///   break-before: page;
  /// }
  /// ```
  #[inline]
  fn page(&self) -> String {
    self.append_value("page")
  }
  /// ```css
  /// .break-before\:\$left {
  ///   break-before: left;
  /// }
  /// ```
  #[inline]
  fn left(&self) -> String {
    self.append_value("left")
  }
  /// ```css
  /// .break-before\:\$right {
  ///   break-before: right;
  /// }
  /// ```
  #[inline]
  fn right(&self) -> String {
    self.append_value("right")
  }
  /// ```css
  /// .break-before\:\$column {
  ///   break-before: column;
  /// }
  /// ```
  #[inline]
  fn column(&self) -> String {
    self.append_value("column")
  }
}
impl GeneratedValueSetBreakBefore for GeneratedAtomBreakBefore {}
pub struct GeneratedAtomBreakInside(String);
impl GeneratedSkribbleValue for GeneratedAtomBreakInside {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBreakInside: GeneratedSkribbleValue {
  /// ```css
  /// .break-inside\:\$auto {
  ///   break-inside: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .break-inside\:\$avoid {
  ///   break-inside: avoid;
  /// }
  /// ```
  #[inline]
  fn avoid(&self) -> String {
    self.append_value("avoid")
  }
  /// ```css
  /// .break-inside\:\$avoid-page {
  ///   break-inside: avoid-page;
  /// }
  /// ```
  #[inline]
  fn avoid_page(&self) -> String {
    self.append_value("avoid-page")
  }
  /// ```css
  /// .break-inside\:\$avoid-column {
  ///   break-inside: avoid-column;
  /// }
  /// ```
  #[inline]
  fn avoid_column(&self) -> String {
    self.append_value("avoid-column")
  }
}
impl GeneratedValueSetBreakInside for GeneratedAtomBreakInside {}
pub struct GeneratedAtomBoxDecoration(String);
impl GeneratedSkribbleValue for GeneratedAtomBoxDecoration {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBoxDecoration: GeneratedSkribbleValue {
  /// ```css
  /// .box-decoration\:\$clone {
  ///   box-decoration-break: clone;
  /// }
  /// ```
  #[inline]
  fn clone(&self) -> String {
    self.append_value("clone")
  }
  /// ```css
  /// .box-decoration\:\$slice {
  ///   box-decoration-break: slice;
  /// }
  /// ```
  #[inline]
  fn slice(&self) -> String {
    self.append_value("slice")
  }
}
impl GeneratedValueSetBoxDecoration for GeneratedAtomBoxDecoration {}
pub struct GeneratedAtomBox(String);
impl GeneratedSkribbleValue for GeneratedAtomBox {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBox: GeneratedSkribbleValue {
  /// ```css
  /// .box\:\$border {
  ///   box-sizing: border-box;
  /// }
  /// ```
  #[inline]
  fn border(&self) -> String {
    self.append_value("border")
  }
  /// ```css
  /// .box\:\$content {
  ///   box-sizing: content-box;
  /// }
  /// ```
  #[inline]
  fn content(&self) -> String {
    self.append_value("content")
  }
}
impl GeneratedValueSetBox for GeneratedAtomBox {}
pub struct GeneratedAtomDisplay(String);
impl GeneratedSkribbleValue for GeneratedAtomDisplay {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetDisplay: GeneratedSkribbleValue {
  /// ```css
  /// .display\:\$block {
  ///   display: block;
  /// }
  /// ```
  #[inline]
  fn block(&self) -> String {
    self.append_value("block")
  }
  /// ```css
  /// .display\:\$inline-block {
  ///   display: inline-block;
  /// }
  /// ```
  #[inline]
  fn inline_block(&self) -> String {
    self.append_value("inline-block")
  }
  /// ```css
  /// .display\:\$inline {
  ///   display: inline;
  /// }
  /// ```
  #[inline]
  fn inline(&self) -> String {
    self.append_value("inline")
  }
  /// ```css
  /// .display\:\$flex {
  ///   display: flex;
  /// }
  /// ```
  #[inline]
  fn flex(&self) -> String {
    self.append_value("flex")
  }
  /// ```css
  /// .display\:\$inline-flex {
  ///   display: inline-flex;
  /// }
  /// ```
  #[inline]
  fn inline_flex(&self) -> String {
    self.append_value("inline-flex")
  }
  /// ```css
  /// .display\:\$table {
  ///   display: table;
  /// }
  /// ```
  #[inline]
  fn table(&self) -> String {
    self.append_value("table")
  }
  /// ```css
  /// .display\:\$inline-table {
  ///   display: inline-table;
  /// }
  /// ```
  #[inline]
  fn inline_table(&self) -> String {
    self.append_value("inline-table")
  }
  /// ```css
  /// .display\:\$table-caption {
  ///   display: table-caption;
  /// }
  /// ```
  #[inline]
  fn table_caption(&self) -> String {
    self.append_value("table-caption")
  }
  /// ```css
  /// .display\:\$table-cell {
  ///   display: table-cell;
  /// }
  /// ```
  #[inline]
  fn table_cell(&self) -> String {
    self.append_value("table-cell")
  }
  /// ```css
  /// .display\:\$table-column {
  ///   display: table-column;
  /// }
  /// ```
  #[inline]
  fn table_column(&self) -> String {
    self.append_value("table-column")
  }
  /// ```css
  /// .display\:\$table-column-group {
  ///   display: table-column-group;
  /// }
  /// ```
  #[inline]
  fn table_column_group(&self) -> String {
    self.append_value("table-column-group")
  }
  /// ```css
  /// .display\:\$table-footer-group {
  ///   display: table-footer-group;
  /// }
  /// ```
  #[inline]
  fn table_footer_group(&self) -> String {
    self.append_value("table-footer-group")
  }
  /// ```css
  /// .display\:\$table-header-group {
  ///   display: table-header-group;
  /// }
  /// ```
  #[inline]
  fn table_header_group(&self) -> String {
    self.append_value("table-header-group")
  }
  /// ```css
  /// .display\:\$table-row-group {
  ///   display: table-row-group;
  /// }
  /// ```
  #[inline]
  fn table_row_group(&self) -> String {
    self.append_value("table-row-group")
  }
  /// ```css
  /// .display\:\$table-row {
  ///   display: table-row;
  /// }
  /// ```
  #[inline]
  fn table_row(&self) -> String {
    self.append_value("table-row")
  }
  /// ```css
  /// .display\:\$flow-root {
  ///   display: flow-root;
  /// }
  /// ```
  #[inline]
  fn flow_root(&self) -> String {
    self.append_value("flow-root")
  }
  /// ```css
  /// .display\:\$grid {
  ///   display: grid;
  /// }
  /// ```
  #[inline]
  fn grid(&self) -> String {
    self.append_value("grid")
  }
  /// ```css
  /// .display\:\$inline-grid {
  ///   display: inline-grid;
  /// }
  /// ```
  #[inline]
  fn inline_grid(&self) -> String {
    self.append_value("inline-grid")
  }
  /// ```css
  /// .display\:\$contents {
  ///   display: contents;
  /// }
  /// ```
  #[inline]
  fn contents(&self) -> String {
    self.append_value("contents")
  }
  /// ```css
  /// .display\:\$list-item {
  ///   display: list-item;
  /// }
  /// ```
  #[inline]
  fn list_item(&self) -> String {
    self.append_value("list-item")
  }
  /// ```css
  /// .display\:\$hidden {
  ///   display: none;
  /// }
  /// ```
  #[inline]
  fn hidden(&self) -> String {
    self.append_value("hidden")
  }
}
impl GeneratedValueSetDisplay for GeneratedAtomDisplay {}
pub struct GeneratedAtomVisibility(String);
impl GeneratedSkribbleValue for GeneratedAtomVisibility {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetVisibility: GeneratedSkribbleValue {
  /// ```css
  /// .visibility\:\$visible {
  ///   visibility: visible;
  /// }
  /// ```
  #[inline]
  fn visible(&self) -> String {
    self.append_value("visible")
  }
  /// ```css
  /// .visibility\:\$invisible {
  ///   visibility: invisible;
  /// }
  /// ```
  #[inline]
  fn invisible(&self) -> String {
    self.append_value("invisible")
  }
  /// ```css
  /// .visibility\:\$collapse {
  ///   visibility: collapse;
  /// }
  /// ```
  #[inline]
  fn collapse(&self) -> String {
    self.append_value("collapse")
  }
}
impl GeneratedValueSetVisibility for GeneratedAtomVisibility {}
pub struct GeneratedAtomFloat(String);
impl GeneratedSkribbleValue for GeneratedAtomFloat {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetFloat: GeneratedSkribbleValue {
  /// ```css
  /// .float\:\$right {
  ///   float: right;
  /// }
  /// ```
  #[inline]
  fn right(&self) -> String {
    self.append_value("right")
  }
  /// ```css
  /// .float\:\$left {
  ///   float: left;
  /// }
  /// ```
  #[inline]
  fn left(&self) -> String {
    self.append_value("left")
  }
  /// ```css
  /// .float\:\$none {
  ///   float: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
}
impl GeneratedValueSetFloat for GeneratedAtomFloat {}
pub struct GeneratedAtomClear(String);
impl GeneratedSkribbleValue for GeneratedAtomClear {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetClear: GeneratedSkribbleValue {
  /// ```css
  /// .clear\:\$right {
  ///   clear: right;
  /// }
  /// ```
  #[inline]
  fn right(&self) -> String {
    self.append_value("right")
  }
  /// ```css
  /// .clear\:\$left {
  ///   clear: left;
  /// }
  /// ```
  #[inline]
  fn left(&self) -> String {
    self.append_value("left")
  }
  /// ```css
  /// .clear\:\$none {
  ///   clear: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
  /// ```css
  /// .clear\:\$both {
  ///   clear: both;
  /// }
  /// ```
  #[inline]
  fn both(&self) -> String {
    self.append_value("both")
  }
}
impl GeneratedValueSetClear for GeneratedAtomClear {}
pub struct GeneratedAtomIsolate(String);
impl GeneratedSkribbleValue for GeneratedAtomIsolate {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetIsolate: GeneratedSkribbleValue {
  /// ```css
  /// .isolate\:\$auto {
  ///   isolation: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .isolate\:\$isolate {
  ///   isolation: isolate;
  /// }
  /// ```
  #[inline]
  fn isolate(&self) -> String {
    self.append_value("isolate")
  }
}
impl GeneratedValueSetIsolate for GeneratedAtomIsolate {}
pub struct GeneratedAtomObjectFit(String);
impl GeneratedSkribbleValue for GeneratedAtomObjectFit {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetObjectFit: GeneratedSkribbleValue {
  /// ```css
  /// .object-fit\:\$contain {
  ///   object-fit: contain;
  /// }
  /// ```
  #[inline]
  fn contain(&self) -> String {
    self.append_value("contain")
  }
  /// ```css
  /// .object-fit\:\$cover {
  ///   object-fit: cover;
  /// }
  /// ```
  #[inline]
  fn cover(&self) -> String {
    self.append_value("cover")
  }
  /// ```css
  /// .object-fit\:\$fill {
  ///   object-fit: fill;
  /// }
  /// ```
  #[inline]
  fn fill(&self) -> String {
    self.append_value("fill")
  }
  /// ```css
  /// .object-fit\:\$none {
  ///   object-fit: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
  /// ```css
  /// .object-fit\:\$scale-down {
  ///   object-fit: scale-down;
  /// }
  /// ```
  #[inline]
  fn scale_down(&self) -> String {
    self.append_value("scale-down")
  }
}
impl GeneratedValueSetObjectFit for GeneratedAtomObjectFit {}
pub struct GeneratedAtomObjectPosition(String);
impl GeneratedSkribbleValue for GeneratedAtomObjectPosition {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetObjectPosition: GeneratedSkribbleValue {
  /// ```css
  /// .object-position\:\$bottom {
  ///   object-position: bottom;
  /// }
  /// ```
  #[inline]
  fn bottom(&self) -> String {
    self.append_value("bottom")
  }
  /// ```css
  /// .object-position\:\$center {
  ///   object-position: center;
  /// }
  /// ```
  #[inline]
  fn center(&self) -> String {
    self.append_value("center")
  }
  /// ```css
  /// .object-position\:\$left {
  ///   object-position: left;
  /// }
  /// ```
  #[inline]
  fn left(&self) -> String {
    self.append_value("left")
  }
  /// ```css
  /// .object-position\:\$left\ bottom {
  ///   object-position: left bottom;
  /// }
  /// ```
  #[inline]
  fn left_bottom(&self) -> String {
    self.append_value("left bottom")
  }
  /// ```css
  /// .object-position\:\$left\ top {
  ///   object-position: left top;
  /// }
  /// ```
  #[inline]
  fn left_top(&self) -> String {
    self.append_value("left top")
  }
  /// ```css
  /// .object-position\:\$right {
  ///   object-position: right;
  /// }
  /// ```
  #[inline]
  fn right(&self) -> String {
    self.append_value("right")
  }
  /// ```css
  /// .object-position\:\$right\ bottom {
  ///   object-position: right bottom;
  /// }
  /// ```
  #[inline]
  fn right_bottom(&self) -> String {
    self.append_value("right bottom")
  }
  /// ```css
  /// .object-position\:\$right\ top {
  ///   object-position: right top;
  /// }
  /// ```
  #[inline]
  fn right_top(&self) -> String {
    self.append_value("right top")
  }
  /// ```css
  /// .object-position\:\$top {
  ///   object-position: top;
  /// }
  /// ```
  #[inline]
  fn top(&self) -> String {
    self.append_value("top")
  }
}
impl GeneratedValueSetObjectPosition for GeneratedAtomObjectPosition {}
pub struct GeneratedAtomOverflow(String);
impl GeneratedSkribbleValue for GeneratedAtomOverflow {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetOverflow: GeneratedSkribbleValue {
  /// ```css
  /// .overflow\:\$auto {
  ///   overflow: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .overflow\:\$hidden {
  ///   overflow: hidden;
  /// }
  /// ```
  #[inline]
  fn hidden(&self) -> String {
    self.append_value("hidden")
  }
  /// ```css
  /// .overflow\:\$clip {
  ///   overflow: clip;
  /// }
  /// ```
  #[inline]
  fn clip(&self) -> String {
    self.append_value("clip")
  }
  /// ```css
  /// .overflow\:\$visible {
  ///   overflow: visible;
  /// }
  /// ```
  #[inline]
  fn visible(&self) -> String {
    self.append_value("visible")
  }
  /// ```css
  /// .overflow\:\$scroll {
  ///   overflow: scroll;
  /// }
  /// ```
  #[inline]
  fn scroll(&self) -> String {
    self.append_value("scroll")
  }
}
impl GeneratedValueSetOverflow for GeneratedAtomOverflow {}
pub struct GeneratedAtomOverflowX(String);
impl GeneratedSkribbleValue for GeneratedAtomOverflowX {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetOverflowX: GeneratedSkribbleValue {
  /// ```css
  /// .overflow-x\:\$auto {
  ///   overflow-x: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .overflow-x\:\$hidden {
  ///   overflow-x: hidden;
  /// }
  /// ```
  #[inline]
  fn hidden(&self) -> String {
    self.append_value("hidden")
  }
  /// ```css
  /// .overflow-x\:\$clip {
  ///   overflow-x: clip;
  /// }
  /// ```
  #[inline]
  fn clip(&self) -> String {
    self.append_value("clip")
  }
  /// ```css
  /// .overflow-x\:\$visible {
  ///   overflow-x: visible;
  /// }
  /// ```
  #[inline]
  fn visible(&self) -> String {
    self.append_value("visible")
  }
  /// ```css
  /// .overflow-x\:\$scroll {
  ///   overflow-x: scroll;
  /// }
  /// ```
  #[inline]
  fn scroll(&self) -> String {
    self.append_value("scroll")
  }
}
impl GeneratedValueSetOverflowX for GeneratedAtomOverflowX {}
pub struct GeneratedAtomOverflowY(String);
impl GeneratedSkribbleValue for GeneratedAtomOverflowY {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetOverflowY: GeneratedSkribbleValue {
  /// ```css
  /// .overflow-y\:\$auto {
  ///   overflow-y: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .overflow-y\:\$hidden {
  ///   overflow-y: hidden;
  /// }
  /// ```
  #[inline]
  fn hidden(&self) -> String {
    self.append_value("hidden")
  }
  /// ```css
  /// .overflow-y\:\$clip {
  ///   overflow-y: clip;
  /// }
  /// ```
  #[inline]
  fn clip(&self) -> String {
    self.append_value("clip")
  }
  /// ```css
  /// .overflow-y\:\$visible {
  ///   overflow-y: visible;
  /// }
  /// ```
  #[inline]
  fn visible(&self) -> String {
    self.append_value("visible")
  }
  /// ```css
  /// .overflow-y\:\$scroll {
  ///   overflow-y: scroll;
  /// }
  /// ```
  #[inline]
  fn scroll(&self) -> String {
    self.append_value("scroll")
  }
}
impl GeneratedValueSetOverflowY for GeneratedAtomOverflowY {}
pub struct GeneratedAtomOverscroll(String);
impl GeneratedSkribbleValue for GeneratedAtomOverscroll {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetOverscroll: GeneratedSkribbleValue {
  /// ```css
  /// .overscroll\:\$auto {
  ///   overscroll-behavior: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .overscroll\:\$contain {
  ///   overscroll-behavior: contain;
  /// }
  /// ```
  #[inline]
  fn contain(&self) -> String {
    self.append_value("contain")
  }
  /// ```css
  /// .overscroll\:\$none {
  ///   overscroll-behavior: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
}
impl GeneratedValueSetOverscroll for GeneratedAtomOverscroll {}
pub struct GeneratedAtomOverscrollX(String);
impl GeneratedSkribbleValue for GeneratedAtomOverscrollX {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetOverscrollX: GeneratedSkribbleValue {
  /// ```css
  /// .overscroll-x\:\$auto {
  ///   overscroll-behavior-x: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .overscroll-x\:\$contain {
  ///   overscroll-behavior-x: contain;
  /// }
  /// ```
  #[inline]
  fn contain(&self) -> String {
    self.append_value("contain")
  }
  /// ```css
  /// .overscroll-x\:\$none {
  ///   overscroll-behavior-x: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
}
impl GeneratedValueSetOverscrollX for GeneratedAtomOverscrollX {}
pub struct GeneratedAtomOverscrollY(String);
impl GeneratedSkribbleValue for GeneratedAtomOverscrollY {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetOverscrollY: GeneratedSkribbleValue {
  /// ```css
  /// .overscroll-y\:\$auto {
  ///   overscroll-behavior-y: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .overscroll-y\:\$contain {
  ///   overscroll-behavior-y: contain;
  /// }
  /// ```
  #[inline]
  fn contain(&self) -> String {
    self.append_value("contain")
  }
  /// ```css
  /// .overscroll-y\:\$none {
  ///   overscroll-behavior-y: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
}
impl GeneratedValueSetOverscrollY for GeneratedAtomOverscrollY {}
pub struct GeneratedAtomPosition(String);
impl GeneratedSkribbleValue for GeneratedAtomPosition {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetPosition: GeneratedSkribbleValue {
  /// ```css
  /// .position\:\$static {
  ///   position: static;
  /// }
  /// ```
  #[inline]
  fn r#static(&self) -> String {
    self.append_value("static")
  }
  /// ```css
  /// .position\:\$fixed {
  ///   position: fixed;
  /// }
  /// ```
  #[inline]
  fn fixed(&self) -> String {
    self.append_value("fixed")
  }
  /// ```css
  /// .position\:\$absolute {
  ///   position: absolute;
  /// }
  /// ```
  #[inline]
  fn absolute(&self) -> String {
    self.append_value("absolute")
  }
  /// ```css
  /// .position\:\$relative {
  ///   position: relative;
  /// }
  /// ```
  #[inline]
  fn relative(&self) -> String {
    self.append_value("relative")
  }
  /// ```css
  /// .position\:\$sticky {
  ///   position: sticky;
  /// }
  /// ```
  #[inline]
  fn sticky(&self) -> String {
    self.append_value("sticky")
  }
}
impl GeneratedValueSetPosition for GeneratedAtomPosition {}
pub struct GeneratedAtomInset(String);
impl GeneratedSkribbleValue for GeneratedAtomInset {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetInset: GeneratedSkribbleValue {
  /// ```css
  /// .inset\:\$0 {
  ///   inset: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .inset\:\$1 {
  ///   inset: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .inset\:\$2 {
  ///   inset: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .inset\:\$3 {
  ///   inset: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .inset\:\$4 {
  ///   inset: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .inset\:\$5 {
  ///   inset: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .inset\:\$6 {
  ///   inset: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .inset\:\$7 {
  ///   inset: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .inset\:\$8 {
  ///   inset: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .inset\:\$9 {
  ///   inset: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .inset\:\$10 {
  ///   inset: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .inset\:\$11 {
  ///   inset: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .inset\:\$12 {
  ///   inset: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .inset\:\$14 {
  ///   inset: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .inset\:\$16 {
  ///   inset: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .inset\:\$20 {
  ///   inset: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .inset\:\$24 {
  ///   inset: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .inset\:\$28 {
  ///   inset: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .inset\:\$32 {
  ///   inset: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .inset\:\$36 {
  ///   inset: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .inset\:\$40 {
  ///   inset: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .inset\:\$44 {
  ///   inset: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .inset\:\$48 {
  ///   inset: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .inset\:\$52 {
  ///   inset: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .inset\:\$56 {
  ///   inset: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .inset\:\$60 {
  ///   inset: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .inset\:\$64 {
  ///   inset: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .inset\:\$72 {
  ///   inset: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .inset\:\$80 {
  ///   inset: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .inset\:\$96 {
  ///   inset: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .inset\:\$px {
  ///   inset: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .inset\:\$0\.5 {
  ///   inset: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .inset\:\$1\.5 {
  ///   inset: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .inset\:\$2\.5 {
  ///   inset: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .inset\:\$3\.5 {
  ///   inset: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .inset\:\$auto {
  ///   inset: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .inset\:\$half {
  ///   inset: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .inset\:\$third {
  ///   inset: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .inset\:\$two-thirds {
  ///   inset: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("two-thirds")
  }
  /// ```css
  /// .inset\:\$quarter {
  ///   inset: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .inset\:\$three-quarters {
  ///   inset: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("three-quarters")
  }
  /// ```css
  /// .inset\:\$full {
  ///   inset: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .inset\:\$-1 {
  ///   inset: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .inset\:\$-2 {
  ///   inset: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .inset\:\$-3 {
  ///   inset: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .inset\:\$-4 {
  ///   inset: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .inset\:\$-5 {
  ///   inset: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .inset\:\$-6 {
  ///   inset: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .inset\:\$-7 {
  ///   inset: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .inset\:\$-8 {
  ///   inset: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .inset\:\$-9 {
  ///   inset: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .inset\:\$-10 {
  ///   inset: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .inset\:\$-11 {
  ///   inset: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .inset\:\$-12 {
  ///   inset: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .inset\:\$-14 {
  ///   inset: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .inset\:\$-16 {
  ///   inset: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .inset\:\$-20 {
  ///   inset: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .inset\:\$-24 {
  ///   inset: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .inset\:\$-28 {
  ///   inset: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .inset\:\$-32 {
  ///   inset: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .inset\:\$-36 {
  ///   inset: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .inset\:\$-40 {
  ///   inset: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .inset\:\$-44 {
  ///   inset: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .inset\:\$-48 {
  ///   inset: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .inset\:\$-52 {
  ///   inset: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .inset\:\$-56 {
  ///   inset: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .inset\:\$-60 {
  ///   inset: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .inset\:\$-64 {
  ///   inset: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .inset\:\$-72 {
  ///   inset: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .inset\:\$-80 {
  ///   inset: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .inset\:\$-96 {
  ///   inset: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .inset\:\$-px {
  ///   inset: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .inset\:\$-0\.5 {
  ///   inset: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .inset\:\$-1\.5 {
  ///   inset: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .inset\:\$-2\.5 {
  ///   inset: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .inset\:\$-3\.5 {
  ///   inset: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
  /// ```css
  /// .inset\:\$-half {
  ///   inset: -50%;
  /// }
  /// ```
  #[inline]
  fn mhalf(&self) -> String {
    self.append_value("-half")
  }
  /// ```css
  /// .inset\:\$-third {
  ///   inset: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn mthird(&self) -> String {
    self.append_value("-third")
  }
  /// ```css
  /// .inset\:\$-two-thirds {
  ///   inset: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn mtwo_thirds(&self) -> String {
    self.append_value("-two-thirds")
  }
  /// ```css
  /// .inset\:\$-quarter {
  ///   inset: -25%;
  /// }
  /// ```
  #[inline]
  fn mquarter(&self) -> String {
    self.append_value("-quarter")
  }
  /// ```css
  /// .inset\:\$-three-quarters {
  ///   inset: -75%;
  /// }
  /// ```
  #[inline]
  fn mthree_quarters(&self) -> String {
    self.append_value("-three-quarters")
  }
  /// ```css
  /// .inset\:\$-full {
  ///   inset: -100%;
  /// }
  /// ```
  #[inline]
  fn mfull(&self) -> String {
    self.append_value("-full")
  }
}
impl GeneratedValueSetInset for GeneratedAtomInset {}
pub struct GeneratedAtomInsetX(String);
impl GeneratedSkribbleValue for GeneratedAtomInsetX {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetInsetX: GeneratedSkribbleValue {
  /// ```css
  /// .inset-x\:\$0 {
  ///   left: 0px;
  ///   right: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .inset-x\:\$1 {
  ///   left: 0.25rem;
  ///   right: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .inset-x\:\$2 {
  ///   left: 0.5rem;
  ///   right: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .inset-x\:\$3 {
  ///   left: 0.75rem;
  ///   right: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .inset-x\:\$4 {
  ///   left: 1rem;
  ///   right: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .inset-x\:\$5 {
  ///   left: 1.25rem;
  ///   right: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .inset-x\:\$6 {
  ///   left: 1.5rem;
  ///   right: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .inset-x\:\$7 {
  ///   left: 1.75rem;
  ///   right: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .inset-x\:\$8 {
  ///   left: 2rem;
  ///   right: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .inset-x\:\$9 {
  ///   left: 2.25rem;
  ///   right: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .inset-x\:\$10 {
  ///   left: 2.5rem;
  ///   right: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .inset-x\:\$11 {
  ///   left: 2.75rem;
  ///   right: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .inset-x\:\$12 {
  ///   left: 3rem;
  ///   right: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .inset-x\:\$14 {
  ///   left: 3.5rem;
  ///   right: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .inset-x\:\$16 {
  ///   left: 4rem;
  ///   right: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .inset-x\:\$20 {
  ///   left: 5rem;
  ///   right: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .inset-x\:\$24 {
  ///   left: 6rem;
  ///   right: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .inset-x\:\$28 {
  ///   left: 7rem;
  ///   right: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .inset-x\:\$32 {
  ///   left: 8rem;
  ///   right: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .inset-x\:\$36 {
  ///   left: 9rem;
  ///   right: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .inset-x\:\$40 {
  ///   left: 10rem;
  ///   right: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .inset-x\:\$44 {
  ///   left: 11rem;
  ///   right: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .inset-x\:\$48 {
  ///   left: 12rem;
  ///   right: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .inset-x\:\$52 {
  ///   left: 13rem;
  ///   right: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .inset-x\:\$56 {
  ///   left: 14rem;
  ///   right: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .inset-x\:\$60 {
  ///   left: 15rem;
  ///   right: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .inset-x\:\$64 {
  ///   left: 16rem;
  ///   right: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .inset-x\:\$72 {
  ///   left: 18rem;
  ///   right: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .inset-x\:\$80 {
  ///   left: 20rem;
  ///   right: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .inset-x\:\$96 {
  ///   left: 24rem;
  ///   right: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .inset-x\:\$px {
  ///   left: 1px;
  ///   right: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .inset-x\:\$0\.5 {
  ///   left: 0.125rem;
  ///   right: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .inset-x\:\$1\.5 {
  ///   left: 0.375rem;
  ///   right: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .inset-x\:\$2\.5 {
  ///   left: 0.625rem;
  ///   right: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .inset-x\:\$3\.5 {
  ///   left: 0.875rem;
  ///   right: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .inset-x\:\$auto {
  ///   left: auto;
  ///   right: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .inset-x\:\$half {
  ///   left: 50%;
  ///   right: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .inset-x\:\$third {
  ///   left: 33.333333%;
  ///   right: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .inset-x\:\$two-thirds {
  ///   left: 66.666667%;
  ///   right: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("two-thirds")
  }
  /// ```css
  /// .inset-x\:\$quarter {
  ///   left: 25%;
  ///   right: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .inset-x\:\$three-quarters {
  ///   left: 75%;
  ///   right: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("three-quarters")
  }
  /// ```css
  /// .inset-x\:\$full {
  ///   left: 100%;
  ///   right: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .inset-x\:\$-1 {
  ///   left: -0.25rem;
  ///   right: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .inset-x\:\$-2 {
  ///   left: -0.5rem;
  ///   right: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .inset-x\:\$-3 {
  ///   left: -0.75rem;
  ///   right: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .inset-x\:\$-4 {
  ///   left: -1rem;
  ///   right: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .inset-x\:\$-5 {
  ///   left: -1.25rem;
  ///   right: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .inset-x\:\$-6 {
  ///   left: -1.5rem;
  ///   right: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .inset-x\:\$-7 {
  ///   left: -1.75rem;
  ///   right: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .inset-x\:\$-8 {
  ///   left: -2rem;
  ///   right: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .inset-x\:\$-9 {
  ///   left: -2.25rem;
  ///   right: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .inset-x\:\$-10 {
  ///   left: -2.5rem;
  ///   right: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .inset-x\:\$-11 {
  ///   left: -2.75rem;
  ///   right: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .inset-x\:\$-12 {
  ///   left: -3rem;
  ///   right: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .inset-x\:\$-14 {
  ///   left: -3.5rem;
  ///   right: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .inset-x\:\$-16 {
  ///   left: -4rem;
  ///   right: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .inset-x\:\$-20 {
  ///   left: -5rem;
  ///   right: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .inset-x\:\$-24 {
  ///   left: -6rem;
  ///   right: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .inset-x\:\$-28 {
  ///   left: -7rem;
  ///   right: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .inset-x\:\$-32 {
  ///   left: -8rem;
  ///   right: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .inset-x\:\$-36 {
  ///   left: -9rem;
  ///   right: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .inset-x\:\$-40 {
  ///   left: -10rem;
  ///   right: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .inset-x\:\$-44 {
  ///   left: -11rem;
  ///   right: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .inset-x\:\$-48 {
  ///   left: -12rem;
  ///   right: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .inset-x\:\$-52 {
  ///   left: -13rem;
  ///   right: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .inset-x\:\$-56 {
  ///   left: -14rem;
  ///   right: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .inset-x\:\$-60 {
  ///   left: -15rem;
  ///   right: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .inset-x\:\$-64 {
  ///   left: -16rem;
  ///   right: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .inset-x\:\$-72 {
  ///   left: -18rem;
  ///   right: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .inset-x\:\$-80 {
  ///   left: -20rem;
  ///   right: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .inset-x\:\$-96 {
  ///   left: -24rem;
  ///   right: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .inset-x\:\$-px {
  ///   left: -1px;
  ///   right: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .inset-x\:\$-0\.5 {
  ///   left: -0.125rem;
  ///   right: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .inset-x\:\$-1\.5 {
  ///   left: -0.375rem;
  ///   right: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .inset-x\:\$-2\.5 {
  ///   left: -0.625rem;
  ///   right: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .inset-x\:\$-3\.5 {
  ///   left: -0.875rem;
  ///   right: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
  /// ```css
  /// .inset-x\:\$-half {
  ///   left: -50%;
  ///   right: -50%;
  /// }
  /// ```
  #[inline]
  fn mhalf(&self) -> String {
    self.append_value("-half")
  }
  /// ```css
  /// .inset-x\:\$-third {
  ///   left: -33.333333%;
  ///   right: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn mthird(&self) -> String {
    self.append_value("-third")
  }
  /// ```css
  /// .inset-x\:\$-two-thirds {
  ///   left: -66.666667%;
  ///   right: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn mtwo_thirds(&self) -> String {
    self.append_value("-two-thirds")
  }
  /// ```css
  /// .inset-x\:\$-quarter {
  ///   left: -25%;
  ///   right: -25%;
  /// }
  /// ```
  #[inline]
  fn mquarter(&self) -> String {
    self.append_value("-quarter")
  }
  /// ```css
  /// .inset-x\:\$-three-quarters {
  ///   left: -75%;
  ///   right: -75%;
  /// }
  /// ```
  #[inline]
  fn mthree_quarters(&self) -> String {
    self.append_value("-three-quarters")
  }
  /// ```css
  /// .inset-x\:\$-full {
  ///   left: -100%;
  ///   right: -100%;
  /// }
  /// ```
  #[inline]
  fn mfull(&self) -> String {
    self.append_value("-full")
  }
}
impl GeneratedValueSetInsetX for GeneratedAtomInsetX {}
pub struct GeneratedAtomInsetY(String);
impl GeneratedSkribbleValue for GeneratedAtomInsetY {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetInsetY: GeneratedSkribbleValue {
  /// ```css
  /// .inset-y\:\$0 {
  ///   top: 0px;
  ///   bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .inset-y\:\$1 {
  ///   top: 0.25rem;
  ///   bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .inset-y\:\$2 {
  ///   top: 0.5rem;
  ///   bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .inset-y\:\$3 {
  ///   top: 0.75rem;
  ///   bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .inset-y\:\$4 {
  ///   top: 1rem;
  ///   bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .inset-y\:\$5 {
  ///   top: 1.25rem;
  ///   bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .inset-y\:\$6 {
  ///   top: 1.5rem;
  ///   bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .inset-y\:\$7 {
  ///   top: 1.75rem;
  ///   bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .inset-y\:\$8 {
  ///   top: 2rem;
  ///   bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .inset-y\:\$9 {
  ///   top: 2.25rem;
  ///   bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .inset-y\:\$10 {
  ///   top: 2.5rem;
  ///   bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .inset-y\:\$11 {
  ///   top: 2.75rem;
  ///   bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .inset-y\:\$12 {
  ///   top: 3rem;
  ///   bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .inset-y\:\$14 {
  ///   top: 3.5rem;
  ///   bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .inset-y\:\$16 {
  ///   top: 4rem;
  ///   bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .inset-y\:\$20 {
  ///   top: 5rem;
  ///   bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .inset-y\:\$24 {
  ///   top: 6rem;
  ///   bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .inset-y\:\$28 {
  ///   top: 7rem;
  ///   bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .inset-y\:\$32 {
  ///   top: 8rem;
  ///   bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .inset-y\:\$36 {
  ///   top: 9rem;
  ///   bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .inset-y\:\$40 {
  ///   top: 10rem;
  ///   bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .inset-y\:\$44 {
  ///   top: 11rem;
  ///   bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .inset-y\:\$48 {
  ///   top: 12rem;
  ///   bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .inset-y\:\$52 {
  ///   top: 13rem;
  ///   bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .inset-y\:\$56 {
  ///   top: 14rem;
  ///   bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .inset-y\:\$60 {
  ///   top: 15rem;
  ///   bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .inset-y\:\$64 {
  ///   top: 16rem;
  ///   bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .inset-y\:\$72 {
  ///   top: 18rem;
  ///   bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .inset-y\:\$80 {
  ///   top: 20rem;
  ///   bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .inset-y\:\$96 {
  ///   top: 24rem;
  ///   bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .inset-y\:\$px {
  ///   top: 1px;
  ///   bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .inset-y\:\$0\.5 {
  ///   top: 0.125rem;
  ///   bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .inset-y\:\$1\.5 {
  ///   top: 0.375rem;
  ///   bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .inset-y\:\$2\.5 {
  ///   top: 0.625rem;
  ///   bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .inset-y\:\$3\.5 {
  ///   top: 0.875rem;
  ///   bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .inset-y\:\$auto {
  ///   top: auto;
  ///   bottom: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .inset-y\:\$half {
  ///   top: 50%;
  ///   bottom: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .inset-y\:\$third {
  ///   top: 33.333333%;
  ///   bottom: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .inset-y\:\$two-thirds {
  ///   top: 66.666667%;
  ///   bottom: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("two-thirds")
  }
  /// ```css
  /// .inset-y\:\$quarter {
  ///   top: 25%;
  ///   bottom: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .inset-y\:\$three-quarters {
  ///   top: 75%;
  ///   bottom: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("three-quarters")
  }
  /// ```css
  /// .inset-y\:\$full {
  ///   top: 100%;
  ///   bottom: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .inset-y\:\$-1 {
  ///   top: -0.25rem;
  ///   bottom: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .inset-y\:\$-2 {
  ///   top: -0.5rem;
  ///   bottom: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .inset-y\:\$-3 {
  ///   top: -0.75rem;
  ///   bottom: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .inset-y\:\$-4 {
  ///   top: -1rem;
  ///   bottom: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .inset-y\:\$-5 {
  ///   top: -1.25rem;
  ///   bottom: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .inset-y\:\$-6 {
  ///   top: -1.5rem;
  ///   bottom: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .inset-y\:\$-7 {
  ///   top: -1.75rem;
  ///   bottom: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .inset-y\:\$-8 {
  ///   top: -2rem;
  ///   bottom: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .inset-y\:\$-9 {
  ///   top: -2.25rem;
  ///   bottom: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .inset-y\:\$-10 {
  ///   top: -2.5rem;
  ///   bottom: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .inset-y\:\$-11 {
  ///   top: -2.75rem;
  ///   bottom: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .inset-y\:\$-12 {
  ///   top: -3rem;
  ///   bottom: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .inset-y\:\$-14 {
  ///   top: -3.5rem;
  ///   bottom: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .inset-y\:\$-16 {
  ///   top: -4rem;
  ///   bottom: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .inset-y\:\$-20 {
  ///   top: -5rem;
  ///   bottom: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .inset-y\:\$-24 {
  ///   top: -6rem;
  ///   bottom: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .inset-y\:\$-28 {
  ///   top: -7rem;
  ///   bottom: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .inset-y\:\$-32 {
  ///   top: -8rem;
  ///   bottom: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .inset-y\:\$-36 {
  ///   top: -9rem;
  ///   bottom: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .inset-y\:\$-40 {
  ///   top: -10rem;
  ///   bottom: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .inset-y\:\$-44 {
  ///   top: -11rem;
  ///   bottom: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .inset-y\:\$-48 {
  ///   top: -12rem;
  ///   bottom: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .inset-y\:\$-52 {
  ///   top: -13rem;
  ///   bottom: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .inset-y\:\$-56 {
  ///   top: -14rem;
  ///   bottom: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .inset-y\:\$-60 {
  ///   top: -15rem;
  ///   bottom: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .inset-y\:\$-64 {
  ///   top: -16rem;
  ///   bottom: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .inset-y\:\$-72 {
  ///   top: -18rem;
  ///   bottom: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .inset-y\:\$-80 {
  ///   top: -20rem;
  ///   bottom: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .inset-y\:\$-96 {
  ///   top: -24rem;
  ///   bottom: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .inset-y\:\$-px {
  ///   top: -1px;
  ///   bottom: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .inset-y\:\$-0\.5 {
  ///   top: -0.125rem;
  ///   bottom: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .inset-y\:\$-1\.5 {
  ///   top: -0.375rem;
  ///   bottom: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .inset-y\:\$-2\.5 {
  ///   top: -0.625rem;
  ///   bottom: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .inset-y\:\$-3\.5 {
  ///   top: -0.875rem;
  ///   bottom: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
  /// ```css
  /// .inset-y\:\$-half {
  ///   top: -50%;
  ///   bottom: -50%;
  /// }
  /// ```
  #[inline]
  fn mhalf(&self) -> String {
    self.append_value("-half")
  }
  /// ```css
  /// .inset-y\:\$-third {
  ///   top: -33.333333%;
  ///   bottom: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn mthird(&self) -> String {
    self.append_value("-third")
  }
  /// ```css
  /// .inset-y\:\$-two-thirds {
  ///   top: -66.666667%;
  ///   bottom: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn mtwo_thirds(&self) -> String {
    self.append_value("-two-thirds")
  }
  /// ```css
  /// .inset-y\:\$-quarter {
  ///   top: -25%;
  ///   bottom: -25%;
  /// }
  /// ```
  #[inline]
  fn mquarter(&self) -> String {
    self.append_value("-quarter")
  }
  /// ```css
  /// .inset-y\:\$-three-quarters {
  ///   top: -75%;
  ///   bottom: -75%;
  /// }
  /// ```
  #[inline]
  fn mthree_quarters(&self) -> String {
    self.append_value("-three-quarters")
  }
  /// ```css
  /// .inset-y\:\$-full {
  ///   top: -100%;
  ///   bottom: -100%;
  /// }
  /// ```
  #[inline]
  fn mfull(&self) -> String {
    self.append_value("-full")
  }
}
impl GeneratedValueSetInsetY for GeneratedAtomInsetY {}
pub struct GeneratedAtomStart(String);
impl GeneratedSkribbleValue for GeneratedAtomStart {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetStart: GeneratedSkribbleValue {
  /// ```css
  /// .start\:\$0 {
  ///   inset-inline-start: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .start\:\$1 {
  ///   inset-inline-start: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .start\:\$2 {
  ///   inset-inline-start: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .start\:\$3 {
  ///   inset-inline-start: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .start\:\$4 {
  ///   inset-inline-start: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .start\:\$5 {
  ///   inset-inline-start: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .start\:\$6 {
  ///   inset-inline-start: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .start\:\$7 {
  ///   inset-inline-start: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .start\:\$8 {
  ///   inset-inline-start: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .start\:\$9 {
  ///   inset-inline-start: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .start\:\$10 {
  ///   inset-inline-start: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .start\:\$11 {
  ///   inset-inline-start: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .start\:\$12 {
  ///   inset-inline-start: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .start\:\$14 {
  ///   inset-inline-start: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .start\:\$16 {
  ///   inset-inline-start: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .start\:\$20 {
  ///   inset-inline-start: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .start\:\$24 {
  ///   inset-inline-start: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .start\:\$28 {
  ///   inset-inline-start: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .start\:\$32 {
  ///   inset-inline-start: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .start\:\$36 {
  ///   inset-inline-start: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .start\:\$40 {
  ///   inset-inline-start: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .start\:\$44 {
  ///   inset-inline-start: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .start\:\$48 {
  ///   inset-inline-start: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .start\:\$52 {
  ///   inset-inline-start: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .start\:\$56 {
  ///   inset-inline-start: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .start\:\$60 {
  ///   inset-inline-start: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .start\:\$64 {
  ///   inset-inline-start: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .start\:\$72 {
  ///   inset-inline-start: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .start\:\$80 {
  ///   inset-inline-start: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .start\:\$96 {
  ///   inset-inline-start: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .start\:\$px {
  ///   inset-inline-start: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .start\:\$0\.5 {
  ///   inset-inline-start: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .start\:\$1\.5 {
  ///   inset-inline-start: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .start\:\$2\.5 {
  ///   inset-inline-start: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .start\:\$3\.5 {
  ///   inset-inline-start: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .start\:\$auto {
  ///   inset-inline-start: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .start\:\$half {
  ///   inset-inline-start: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .start\:\$third {
  ///   inset-inline-start: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .start\:\$two-thirds {
  ///   inset-inline-start: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("two-thirds")
  }
  /// ```css
  /// .start\:\$quarter {
  ///   inset-inline-start: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .start\:\$three-quarters {
  ///   inset-inline-start: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("three-quarters")
  }
  /// ```css
  /// .start\:\$full {
  ///   inset-inline-start: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .start\:\$-1 {
  ///   inset-inline-start: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .start\:\$-2 {
  ///   inset-inline-start: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .start\:\$-3 {
  ///   inset-inline-start: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .start\:\$-4 {
  ///   inset-inline-start: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .start\:\$-5 {
  ///   inset-inline-start: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .start\:\$-6 {
  ///   inset-inline-start: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .start\:\$-7 {
  ///   inset-inline-start: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .start\:\$-8 {
  ///   inset-inline-start: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .start\:\$-9 {
  ///   inset-inline-start: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .start\:\$-10 {
  ///   inset-inline-start: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .start\:\$-11 {
  ///   inset-inline-start: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .start\:\$-12 {
  ///   inset-inline-start: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .start\:\$-14 {
  ///   inset-inline-start: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .start\:\$-16 {
  ///   inset-inline-start: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .start\:\$-20 {
  ///   inset-inline-start: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .start\:\$-24 {
  ///   inset-inline-start: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .start\:\$-28 {
  ///   inset-inline-start: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .start\:\$-32 {
  ///   inset-inline-start: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .start\:\$-36 {
  ///   inset-inline-start: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .start\:\$-40 {
  ///   inset-inline-start: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .start\:\$-44 {
  ///   inset-inline-start: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .start\:\$-48 {
  ///   inset-inline-start: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .start\:\$-52 {
  ///   inset-inline-start: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .start\:\$-56 {
  ///   inset-inline-start: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .start\:\$-60 {
  ///   inset-inline-start: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .start\:\$-64 {
  ///   inset-inline-start: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .start\:\$-72 {
  ///   inset-inline-start: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .start\:\$-80 {
  ///   inset-inline-start: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .start\:\$-96 {
  ///   inset-inline-start: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .start\:\$-px {
  ///   inset-inline-start: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .start\:\$-0\.5 {
  ///   inset-inline-start: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .start\:\$-1\.5 {
  ///   inset-inline-start: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .start\:\$-2\.5 {
  ///   inset-inline-start: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .start\:\$-3\.5 {
  ///   inset-inline-start: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
  /// ```css
  /// .start\:\$-half {
  ///   inset-inline-start: -50%;
  /// }
  /// ```
  #[inline]
  fn mhalf(&self) -> String {
    self.append_value("-half")
  }
  /// ```css
  /// .start\:\$-third {
  ///   inset-inline-start: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn mthird(&self) -> String {
    self.append_value("-third")
  }
  /// ```css
  /// .start\:\$-two-thirds {
  ///   inset-inline-start: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn mtwo_thirds(&self) -> String {
    self.append_value("-two-thirds")
  }
  /// ```css
  /// .start\:\$-quarter {
  ///   inset-inline-start: -25%;
  /// }
  /// ```
  #[inline]
  fn mquarter(&self) -> String {
    self.append_value("-quarter")
  }
  /// ```css
  /// .start\:\$-three-quarters {
  ///   inset-inline-start: -75%;
  /// }
  /// ```
  #[inline]
  fn mthree_quarters(&self) -> String {
    self.append_value("-three-quarters")
  }
  /// ```css
  /// .start\:\$-full {
  ///   inset-inline-start: -100%;
  /// }
  /// ```
  #[inline]
  fn mfull(&self) -> String {
    self.append_value("-full")
  }
}
impl GeneratedValueSetStart for GeneratedAtomStart {}
pub struct GeneratedAtomEnd(String);
impl GeneratedSkribbleValue for GeneratedAtomEnd {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetEnd: GeneratedSkribbleValue {
  /// ```css
  /// .end\:\$0 {
  ///   inset-inline-end: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .end\:\$1 {
  ///   inset-inline-end: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .end\:\$2 {
  ///   inset-inline-end: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .end\:\$3 {
  ///   inset-inline-end: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .end\:\$4 {
  ///   inset-inline-end: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .end\:\$5 {
  ///   inset-inline-end: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .end\:\$6 {
  ///   inset-inline-end: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .end\:\$7 {
  ///   inset-inline-end: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .end\:\$8 {
  ///   inset-inline-end: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .end\:\$9 {
  ///   inset-inline-end: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .end\:\$10 {
  ///   inset-inline-end: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .end\:\$11 {
  ///   inset-inline-end: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .end\:\$12 {
  ///   inset-inline-end: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .end\:\$14 {
  ///   inset-inline-end: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .end\:\$16 {
  ///   inset-inline-end: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .end\:\$20 {
  ///   inset-inline-end: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .end\:\$24 {
  ///   inset-inline-end: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .end\:\$28 {
  ///   inset-inline-end: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .end\:\$32 {
  ///   inset-inline-end: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .end\:\$36 {
  ///   inset-inline-end: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .end\:\$40 {
  ///   inset-inline-end: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .end\:\$44 {
  ///   inset-inline-end: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .end\:\$48 {
  ///   inset-inline-end: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .end\:\$52 {
  ///   inset-inline-end: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .end\:\$56 {
  ///   inset-inline-end: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .end\:\$60 {
  ///   inset-inline-end: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .end\:\$64 {
  ///   inset-inline-end: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .end\:\$72 {
  ///   inset-inline-end: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .end\:\$80 {
  ///   inset-inline-end: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .end\:\$96 {
  ///   inset-inline-end: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .end\:\$px {
  ///   inset-inline-end: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .end\:\$0\.5 {
  ///   inset-inline-end: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .end\:\$1\.5 {
  ///   inset-inline-end: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .end\:\$2\.5 {
  ///   inset-inline-end: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .end\:\$3\.5 {
  ///   inset-inline-end: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .end\:\$auto {
  ///   inset-inline-end: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .end\:\$half {
  ///   inset-inline-end: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .end\:\$third {
  ///   inset-inline-end: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .end\:\$two-thirds {
  ///   inset-inline-end: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("two-thirds")
  }
  /// ```css
  /// .end\:\$quarter {
  ///   inset-inline-end: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .end\:\$three-quarters {
  ///   inset-inline-end: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("three-quarters")
  }
  /// ```css
  /// .end\:\$full {
  ///   inset-inline-end: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .end\:\$-1 {
  ///   inset-inline-end: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .end\:\$-2 {
  ///   inset-inline-end: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .end\:\$-3 {
  ///   inset-inline-end: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .end\:\$-4 {
  ///   inset-inline-end: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .end\:\$-5 {
  ///   inset-inline-end: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .end\:\$-6 {
  ///   inset-inline-end: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .end\:\$-7 {
  ///   inset-inline-end: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .end\:\$-8 {
  ///   inset-inline-end: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .end\:\$-9 {
  ///   inset-inline-end: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .end\:\$-10 {
  ///   inset-inline-end: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .end\:\$-11 {
  ///   inset-inline-end: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .end\:\$-12 {
  ///   inset-inline-end: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .end\:\$-14 {
  ///   inset-inline-end: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .end\:\$-16 {
  ///   inset-inline-end: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .end\:\$-20 {
  ///   inset-inline-end: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .end\:\$-24 {
  ///   inset-inline-end: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .end\:\$-28 {
  ///   inset-inline-end: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .end\:\$-32 {
  ///   inset-inline-end: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .end\:\$-36 {
  ///   inset-inline-end: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .end\:\$-40 {
  ///   inset-inline-end: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .end\:\$-44 {
  ///   inset-inline-end: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .end\:\$-48 {
  ///   inset-inline-end: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .end\:\$-52 {
  ///   inset-inline-end: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .end\:\$-56 {
  ///   inset-inline-end: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .end\:\$-60 {
  ///   inset-inline-end: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .end\:\$-64 {
  ///   inset-inline-end: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .end\:\$-72 {
  ///   inset-inline-end: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .end\:\$-80 {
  ///   inset-inline-end: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .end\:\$-96 {
  ///   inset-inline-end: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .end\:\$-px {
  ///   inset-inline-end: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .end\:\$-0\.5 {
  ///   inset-inline-end: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .end\:\$-1\.5 {
  ///   inset-inline-end: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .end\:\$-2\.5 {
  ///   inset-inline-end: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .end\:\$-3\.5 {
  ///   inset-inline-end: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
  /// ```css
  /// .end\:\$-half {
  ///   inset-inline-end: -50%;
  /// }
  /// ```
  #[inline]
  fn mhalf(&self) -> String {
    self.append_value("-half")
  }
  /// ```css
  /// .end\:\$-third {
  ///   inset-inline-end: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn mthird(&self) -> String {
    self.append_value("-third")
  }
  /// ```css
  /// .end\:\$-two-thirds {
  ///   inset-inline-end: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn mtwo_thirds(&self) -> String {
    self.append_value("-two-thirds")
  }
  /// ```css
  /// .end\:\$-quarter {
  ///   inset-inline-end: -25%;
  /// }
  /// ```
  #[inline]
  fn mquarter(&self) -> String {
    self.append_value("-quarter")
  }
  /// ```css
  /// .end\:\$-three-quarters {
  ///   inset-inline-end: -75%;
  /// }
  /// ```
  #[inline]
  fn mthree_quarters(&self) -> String {
    self.append_value("-three-quarters")
  }
  /// ```css
  /// .end\:\$-full {
  ///   inset-inline-end: -100%;
  /// }
  /// ```
  #[inline]
  fn mfull(&self) -> String {
    self.append_value("-full")
  }
}
impl GeneratedValueSetEnd for GeneratedAtomEnd {}
pub struct GeneratedAtomTop(String);
impl GeneratedSkribbleValue for GeneratedAtomTop {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetTop: GeneratedSkribbleValue {
  /// ```css
  /// .top\:\$0 {
  ///   top: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .top\:\$1 {
  ///   top: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .top\:\$2 {
  ///   top: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .top\:\$3 {
  ///   top: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .top\:\$4 {
  ///   top: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .top\:\$5 {
  ///   top: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .top\:\$6 {
  ///   top: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .top\:\$7 {
  ///   top: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .top\:\$8 {
  ///   top: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .top\:\$9 {
  ///   top: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .top\:\$10 {
  ///   top: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .top\:\$11 {
  ///   top: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .top\:\$12 {
  ///   top: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .top\:\$14 {
  ///   top: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .top\:\$16 {
  ///   top: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .top\:\$20 {
  ///   top: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .top\:\$24 {
  ///   top: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .top\:\$28 {
  ///   top: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .top\:\$32 {
  ///   top: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .top\:\$36 {
  ///   top: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .top\:\$40 {
  ///   top: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .top\:\$44 {
  ///   top: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .top\:\$48 {
  ///   top: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .top\:\$52 {
  ///   top: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .top\:\$56 {
  ///   top: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .top\:\$60 {
  ///   top: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .top\:\$64 {
  ///   top: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .top\:\$72 {
  ///   top: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .top\:\$80 {
  ///   top: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .top\:\$96 {
  ///   top: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .top\:\$px {
  ///   top: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .top\:\$0\.5 {
  ///   top: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .top\:\$1\.5 {
  ///   top: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .top\:\$2\.5 {
  ///   top: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .top\:\$3\.5 {
  ///   top: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .top\:\$auto {
  ///   top: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .top\:\$half {
  ///   top: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .top\:\$third {
  ///   top: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .top\:\$two-thirds {
  ///   top: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("two-thirds")
  }
  /// ```css
  /// .top\:\$quarter {
  ///   top: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .top\:\$three-quarters {
  ///   top: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("three-quarters")
  }
  /// ```css
  /// .top\:\$full {
  ///   top: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .top\:\$-1 {
  ///   top: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .top\:\$-2 {
  ///   top: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .top\:\$-3 {
  ///   top: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .top\:\$-4 {
  ///   top: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .top\:\$-5 {
  ///   top: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .top\:\$-6 {
  ///   top: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .top\:\$-7 {
  ///   top: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .top\:\$-8 {
  ///   top: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .top\:\$-9 {
  ///   top: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .top\:\$-10 {
  ///   top: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .top\:\$-11 {
  ///   top: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .top\:\$-12 {
  ///   top: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .top\:\$-14 {
  ///   top: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .top\:\$-16 {
  ///   top: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .top\:\$-20 {
  ///   top: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .top\:\$-24 {
  ///   top: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .top\:\$-28 {
  ///   top: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .top\:\$-32 {
  ///   top: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .top\:\$-36 {
  ///   top: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .top\:\$-40 {
  ///   top: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .top\:\$-44 {
  ///   top: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .top\:\$-48 {
  ///   top: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .top\:\$-52 {
  ///   top: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .top\:\$-56 {
  ///   top: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .top\:\$-60 {
  ///   top: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .top\:\$-64 {
  ///   top: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .top\:\$-72 {
  ///   top: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .top\:\$-80 {
  ///   top: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .top\:\$-96 {
  ///   top: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .top\:\$-px {
  ///   top: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .top\:\$-0\.5 {
  ///   top: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .top\:\$-1\.5 {
  ///   top: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .top\:\$-2\.5 {
  ///   top: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .top\:\$-3\.5 {
  ///   top: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
  /// ```css
  /// .top\:\$-half {
  ///   top: -50%;
  /// }
  /// ```
  #[inline]
  fn mhalf(&self) -> String {
    self.append_value("-half")
  }
  /// ```css
  /// .top\:\$-third {
  ///   top: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn mthird(&self) -> String {
    self.append_value("-third")
  }
  /// ```css
  /// .top\:\$-two-thirds {
  ///   top: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn mtwo_thirds(&self) -> String {
    self.append_value("-two-thirds")
  }
  /// ```css
  /// .top\:\$-quarter {
  ///   top: -25%;
  /// }
  /// ```
  #[inline]
  fn mquarter(&self) -> String {
    self.append_value("-quarter")
  }
  /// ```css
  /// .top\:\$-three-quarters {
  ///   top: -75%;
  /// }
  /// ```
  #[inline]
  fn mthree_quarters(&self) -> String {
    self.append_value("-three-quarters")
  }
  /// ```css
  /// .top\:\$-full {
  ///   top: -100%;
  /// }
  /// ```
  #[inline]
  fn mfull(&self) -> String {
    self.append_value("-full")
  }
}
impl GeneratedValueSetTop for GeneratedAtomTop {}
pub struct GeneratedAtomRight(String);
impl GeneratedSkribbleValue for GeneratedAtomRight {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetRight: GeneratedSkribbleValue {
  /// ```css
  /// .right\:\$0 {
  ///   right: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .right\:\$1 {
  ///   right: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .right\:\$2 {
  ///   right: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .right\:\$3 {
  ///   right: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .right\:\$4 {
  ///   right: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .right\:\$5 {
  ///   right: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .right\:\$6 {
  ///   right: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .right\:\$7 {
  ///   right: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .right\:\$8 {
  ///   right: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .right\:\$9 {
  ///   right: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .right\:\$10 {
  ///   right: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .right\:\$11 {
  ///   right: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .right\:\$12 {
  ///   right: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .right\:\$14 {
  ///   right: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .right\:\$16 {
  ///   right: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .right\:\$20 {
  ///   right: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .right\:\$24 {
  ///   right: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .right\:\$28 {
  ///   right: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .right\:\$32 {
  ///   right: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .right\:\$36 {
  ///   right: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .right\:\$40 {
  ///   right: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .right\:\$44 {
  ///   right: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .right\:\$48 {
  ///   right: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .right\:\$52 {
  ///   right: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .right\:\$56 {
  ///   right: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .right\:\$60 {
  ///   right: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .right\:\$64 {
  ///   right: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .right\:\$72 {
  ///   right: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .right\:\$80 {
  ///   right: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .right\:\$96 {
  ///   right: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .right\:\$px {
  ///   right: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .right\:\$0\.5 {
  ///   right: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .right\:\$1\.5 {
  ///   right: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .right\:\$2\.5 {
  ///   right: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .right\:\$3\.5 {
  ///   right: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .right\:\$auto {
  ///   right: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .right\:\$half {
  ///   right: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .right\:\$third {
  ///   right: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .right\:\$two-thirds {
  ///   right: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("two-thirds")
  }
  /// ```css
  /// .right\:\$quarter {
  ///   right: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .right\:\$three-quarters {
  ///   right: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("three-quarters")
  }
  /// ```css
  /// .right\:\$full {
  ///   right: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .right\:\$-1 {
  ///   right: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .right\:\$-2 {
  ///   right: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .right\:\$-3 {
  ///   right: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .right\:\$-4 {
  ///   right: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .right\:\$-5 {
  ///   right: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .right\:\$-6 {
  ///   right: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .right\:\$-7 {
  ///   right: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .right\:\$-8 {
  ///   right: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .right\:\$-9 {
  ///   right: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .right\:\$-10 {
  ///   right: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .right\:\$-11 {
  ///   right: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .right\:\$-12 {
  ///   right: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .right\:\$-14 {
  ///   right: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .right\:\$-16 {
  ///   right: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .right\:\$-20 {
  ///   right: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .right\:\$-24 {
  ///   right: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .right\:\$-28 {
  ///   right: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .right\:\$-32 {
  ///   right: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .right\:\$-36 {
  ///   right: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .right\:\$-40 {
  ///   right: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .right\:\$-44 {
  ///   right: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .right\:\$-48 {
  ///   right: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .right\:\$-52 {
  ///   right: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .right\:\$-56 {
  ///   right: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .right\:\$-60 {
  ///   right: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .right\:\$-64 {
  ///   right: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .right\:\$-72 {
  ///   right: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .right\:\$-80 {
  ///   right: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .right\:\$-96 {
  ///   right: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .right\:\$-px {
  ///   right: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .right\:\$-0\.5 {
  ///   right: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .right\:\$-1\.5 {
  ///   right: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .right\:\$-2\.5 {
  ///   right: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .right\:\$-3\.5 {
  ///   right: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
  /// ```css
  /// .right\:\$-half {
  ///   right: -50%;
  /// }
  /// ```
  #[inline]
  fn mhalf(&self) -> String {
    self.append_value("-half")
  }
  /// ```css
  /// .right\:\$-third {
  ///   right: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn mthird(&self) -> String {
    self.append_value("-third")
  }
  /// ```css
  /// .right\:\$-two-thirds {
  ///   right: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn mtwo_thirds(&self) -> String {
    self.append_value("-two-thirds")
  }
  /// ```css
  /// .right\:\$-quarter {
  ///   right: -25%;
  /// }
  /// ```
  #[inline]
  fn mquarter(&self) -> String {
    self.append_value("-quarter")
  }
  /// ```css
  /// .right\:\$-three-quarters {
  ///   right: -75%;
  /// }
  /// ```
  #[inline]
  fn mthree_quarters(&self) -> String {
    self.append_value("-three-quarters")
  }
  /// ```css
  /// .right\:\$-full {
  ///   right: -100%;
  /// }
  /// ```
  #[inline]
  fn mfull(&self) -> String {
    self.append_value("-full")
  }
}
impl GeneratedValueSetRight for GeneratedAtomRight {}
pub struct GeneratedAtomBottom(String);
impl GeneratedSkribbleValue for GeneratedAtomBottom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBottom: GeneratedSkribbleValue {
  /// ```css
  /// .bottom\:\$0 {
  ///   bottom: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .bottom\:\$1 {
  ///   bottom: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .bottom\:\$2 {
  ///   bottom: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .bottom\:\$3 {
  ///   bottom: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .bottom\:\$4 {
  ///   bottom: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .bottom\:\$5 {
  ///   bottom: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .bottom\:\$6 {
  ///   bottom: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .bottom\:\$7 {
  ///   bottom: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .bottom\:\$8 {
  ///   bottom: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .bottom\:\$9 {
  ///   bottom: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .bottom\:\$10 {
  ///   bottom: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .bottom\:\$11 {
  ///   bottom: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .bottom\:\$12 {
  ///   bottom: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .bottom\:\$14 {
  ///   bottom: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .bottom\:\$16 {
  ///   bottom: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .bottom\:\$20 {
  ///   bottom: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .bottom\:\$24 {
  ///   bottom: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .bottom\:\$28 {
  ///   bottom: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .bottom\:\$32 {
  ///   bottom: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .bottom\:\$36 {
  ///   bottom: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .bottom\:\$40 {
  ///   bottom: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .bottom\:\$44 {
  ///   bottom: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .bottom\:\$48 {
  ///   bottom: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .bottom\:\$52 {
  ///   bottom: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .bottom\:\$56 {
  ///   bottom: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .bottom\:\$60 {
  ///   bottom: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .bottom\:\$64 {
  ///   bottom: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .bottom\:\$72 {
  ///   bottom: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .bottom\:\$80 {
  ///   bottom: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .bottom\:\$96 {
  ///   bottom: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .bottom\:\$px {
  ///   bottom: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .bottom\:\$0\.5 {
  ///   bottom: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .bottom\:\$1\.5 {
  ///   bottom: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .bottom\:\$2\.5 {
  ///   bottom: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .bottom\:\$3\.5 {
  ///   bottom: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .bottom\:\$auto {
  ///   bottom: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .bottom\:\$half {
  ///   bottom: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .bottom\:\$third {
  ///   bottom: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .bottom\:\$two-thirds {
  ///   bottom: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("two-thirds")
  }
  /// ```css
  /// .bottom\:\$quarter {
  ///   bottom: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .bottom\:\$three-quarters {
  ///   bottom: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("three-quarters")
  }
  /// ```css
  /// .bottom\:\$full {
  ///   bottom: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .bottom\:\$-1 {
  ///   bottom: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .bottom\:\$-2 {
  ///   bottom: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .bottom\:\$-3 {
  ///   bottom: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .bottom\:\$-4 {
  ///   bottom: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .bottom\:\$-5 {
  ///   bottom: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .bottom\:\$-6 {
  ///   bottom: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .bottom\:\$-7 {
  ///   bottom: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .bottom\:\$-8 {
  ///   bottom: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .bottom\:\$-9 {
  ///   bottom: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .bottom\:\$-10 {
  ///   bottom: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .bottom\:\$-11 {
  ///   bottom: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .bottom\:\$-12 {
  ///   bottom: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .bottom\:\$-14 {
  ///   bottom: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .bottom\:\$-16 {
  ///   bottom: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .bottom\:\$-20 {
  ///   bottom: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .bottom\:\$-24 {
  ///   bottom: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .bottom\:\$-28 {
  ///   bottom: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .bottom\:\$-32 {
  ///   bottom: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .bottom\:\$-36 {
  ///   bottom: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .bottom\:\$-40 {
  ///   bottom: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .bottom\:\$-44 {
  ///   bottom: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .bottom\:\$-48 {
  ///   bottom: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .bottom\:\$-52 {
  ///   bottom: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .bottom\:\$-56 {
  ///   bottom: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .bottom\:\$-60 {
  ///   bottom: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .bottom\:\$-64 {
  ///   bottom: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .bottom\:\$-72 {
  ///   bottom: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .bottom\:\$-80 {
  ///   bottom: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .bottom\:\$-96 {
  ///   bottom: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .bottom\:\$-px {
  ///   bottom: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .bottom\:\$-0\.5 {
  ///   bottom: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .bottom\:\$-1\.5 {
  ///   bottom: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .bottom\:\$-2\.5 {
  ///   bottom: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .bottom\:\$-3\.5 {
  ///   bottom: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
  /// ```css
  /// .bottom\:\$-half {
  ///   bottom: -50%;
  /// }
  /// ```
  #[inline]
  fn mhalf(&self) -> String {
    self.append_value("-half")
  }
  /// ```css
  /// .bottom\:\$-third {
  ///   bottom: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn mthird(&self) -> String {
    self.append_value("-third")
  }
  /// ```css
  /// .bottom\:\$-two-thirds {
  ///   bottom: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn mtwo_thirds(&self) -> String {
    self.append_value("-two-thirds")
  }
  /// ```css
  /// .bottom\:\$-quarter {
  ///   bottom: -25%;
  /// }
  /// ```
  #[inline]
  fn mquarter(&self) -> String {
    self.append_value("-quarter")
  }
  /// ```css
  /// .bottom\:\$-three-quarters {
  ///   bottom: -75%;
  /// }
  /// ```
  #[inline]
  fn mthree_quarters(&self) -> String {
    self.append_value("-three-quarters")
  }
  /// ```css
  /// .bottom\:\$-full {
  ///   bottom: -100%;
  /// }
  /// ```
  #[inline]
  fn mfull(&self) -> String {
    self.append_value("-full")
  }
}
impl GeneratedValueSetBottom for GeneratedAtomBottom {}
pub struct GeneratedAtomLeft(String);
impl GeneratedSkribbleValue for GeneratedAtomLeft {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetLeft: GeneratedSkribbleValue {
  /// ```css
  /// .left\:\$0 {
  ///   left: 0px;
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .left\:\$1 {
  ///   left: 0.25rem;
  /// }
  /// ```
  #[inline]
  fn n1(&self) -> String {
    self.append_value("1")
  }
  /// ```css
  /// .left\:\$2 {
  ///   left: 0.5rem;
  /// }
  /// ```
  #[inline]
  fn n2(&self) -> String {
    self.append_value("2")
  }
  /// ```css
  /// .left\:\$3 {
  ///   left: 0.75rem;
  /// }
  /// ```
  #[inline]
  fn n3(&self) -> String {
    self.append_value("3")
  }
  /// ```css
  /// .left\:\$4 {
  ///   left: 1rem;
  /// }
  /// ```
  #[inline]
  fn n4(&self) -> String {
    self.append_value("4")
  }
  /// ```css
  /// .left\:\$5 {
  ///   left: 1.25rem;
  /// }
  /// ```
  #[inline]
  fn n5(&self) -> String {
    self.append_value("5")
  }
  /// ```css
  /// .left\:\$6 {
  ///   left: 1.5rem;
  /// }
  /// ```
  #[inline]
  fn n6(&self) -> String {
    self.append_value("6")
  }
  /// ```css
  /// .left\:\$7 {
  ///   left: 1.75rem;
  /// }
  /// ```
  #[inline]
  fn n7(&self) -> String {
    self.append_value("7")
  }
  /// ```css
  /// .left\:\$8 {
  ///   left: 2rem;
  /// }
  /// ```
  #[inline]
  fn n8(&self) -> String {
    self.append_value("8")
  }
  /// ```css
  /// .left\:\$9 {
  ///   left: 2.25rem;
  /// }
  /// ```
  #[inline]
  fn n9(&self) -> String {
    self.append_value("9")
  }
  /// ```css
  /// .left\:\$10 {
  ///   left: 2.5rem;
  /// }
  /// ```
  #[inline]
  fn n10(&self) -> String {
    self.append_value("10")
  }
  /// ```css
  /// .left\:\$11 {
  ///   left: 2.75rem;
  /// }
  /// ```
  #[inline]
  fn n11(&self) -> String {
    self.append_value("11")
  }
  /// ```css
  /// .left\:\$12 {
  ///   left: 3rem;
  /// }
  /// ```
  #[inline]
  fn n12(&self) -> String {
    self.append_value("12")
  }
  /// ```css
  /// .left\:\$14 {
  ///   left: 3.5rem;
  /// }
  /// ```
  #[inline]
  fn n14(&self) -> String {
    self.append_value("14")
  }
  /// ```css
  /// .left\:\$16 {
  ///   left: 4rem;
  /// }
  /// ```
  #[inline]
  fn n16(&self) -> String {
    self.append_value("16")
  }
  /// ```css
  /// .left\:\$20 {
  ///   left: 5rem;
  /// }
  /// ```
  #[inline]
  fn n20(&self) -> String {
    self.append_value("20")
  }
  /// ```css
  /// .left\:\$24 {
  ///   left: 6rem;
  /// }
  /// ```
  #[inline]
  fn n24(&self) -> String {
    self.append_value("24")
  }
  /// ```css
  /// .left\:\$28 {
  ///   left: 7rem;
  /// }
  /// ```
  #[inline]
  fn n28(&self) -> String {
    self.append_value("28")
  }
  /// ```css
  /// .left\:\$32 {
  ///   left: 8rem;
  /// }
  /// ```
  #[inline]
  fn n32(&self) -> String {
    self.append_value("32")
  }
  /// ```css
  /// .left\:\$36 {
  ///   left: 9rem;
  /// }
  /// ```
  #[inline]
  fn n36(&self) -> String {
    self.append_value("36")
  }
  /// ```css
  /// .left\:\$40 {
  ///   left: 10rem;
  /// }
  /// ```
  #[inline]
  fn n40(&self) -> String {
    self.append_value("40")
  }
  /// ```css
  /// .left\:\$44 {
  ///   left: 11rem;
  /// }
  /// ```
  #[inline]
  fn n44(&self) -> String {
    self.append_value("44")
  }
  /// ```css
  /// .left\:\$48 {
  ///   left: 12rem;
  /// }
  /// ```
  #[inline]
  fn n48(&self) -> String {
    self.append_value("48")
  }
  /// ```css
  /// .left\:\$52 {
  ///   left: 13rem;
  /// }
  /// ```
  #[inline]
  fn n52(&self) -> String {
    self.append_value("52")
  }
  /// ```css
  /// .left\:\$56 {
  ///   left: 14rem;
  /// }
  /// ```
  #[inline]
  fn n56(&self) -> String {
    self.append_value("56")
  }
  /// ```css
  /// .left\:\$60 {
  ///   left: 15rem;
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .left\:\$64 {
  ///   left: 16rem;
  /// }
  /// ```
  #[inline]
  fn n64(&self) -> String {
    self.append_value("64")
  }
  /// ```css
  /// .left\:\$72 {
  ///   left: 18rem;
  /// }
  /// ```
  #[inline]
  fn n72(&self) -> String {
    self.append_value("72")
  }
  /// ```css
  /// .left\:\$80 {
  ///   left: 20rem;
  /// }
  /// ```
  #[inline]
  fn n80(&self) -> String {
    self.append_value("80")
  }
  /// ```css
  /// .left\:\$96 {
  ///   left: 24rem;
  /// }
  /// ```
  #[inline]
  fn n96(&self) -> String {
    self.append_value("96")
  }
  /// ```css
  /// .left\:\$px {
  ///   left: 1px;
  /// }
  /// ```
  #[inline]
  fn px(&self) -> String {
    self.append_value("px")
  }
  /// ```css
  /// .left\:\$0\.5 {
  ///   left: 0.125rem;
  /// }
  /// ```
  #[inline]
  fn n0_5(&self) -> String {
    self.append_value("0.5")
  }
  /// ```css
  /// .left\:\$1\.5 {
  ///   left: 0.375rem;
  /// }
  /// ```
  #[inline]
  fn n1_5(&self) -> String {
    self.append_value("1.5")
  }
  /// ```css
  /// .left\:\$2\.5 {
  ///   left: 0.625rem;
  /// }
  /// ```
  #[inline]
  fn n2_5(&self) -> String {
    self.append_value("2.5")
  }
  /// ```css
  /// .left\:\$3\.5 {
  ///   left: 0.875rem;
  /// }
  /// ```
  #[inline]
  fn n3_5(&self) -> String {
    self.append_value("3.5")
  }
  /// ```css
  /// .left\:\$auto {
  ///   left: auto;
  /// }
  /// ```
  #[inline]
  fn auto(&self) -> String {
    self.append_value("auto")
  }
  /// ```css
  /// .left\:\$half {
  ///   left: 50%;
  /// }
  /// ```
  #[inline]
  fn half(&self) -> String {
    self.append_value("half")
  }
  /// ```css
  /// .left\:\$third {
  ///   left: 33.333333%;
  /// }
  /// ```
  #[inline]
  fn third(&self) -> String {
    self.append_value("third")
  }
  /// ```css
  /// .left\:\$two-thirds {
  ///   left: 66.666667%;
  /// }
  /// ```
  #[inline]
  fn two_thirds(&self) -> String {
    self.append_value("two-thirds")
  }
  /// ```css
  /// .left\:\$quarter {
  ///   left: 25%;
  /// }
  /// ```
  #[inline]
  fn quarter(&self) -> String {
    self.append_value("quarter")
  }
  /// ```css
  /// .left\:\$three-quarters {
  ///   left: 75%;
  /// }
  /// ```
  #[inline]
  fn three_quarters(&self) -> String {
    self.append_value("three-quarters")
  }
  /// ```css
  /// .left\:\$full {
  ///   left: 100%;
  /// }
  /// ```
  #[inline]
  fn full(&self) -> String {
    self.append_value("full")
  }
  /// ```css
  /// .left\:\$-1 {
  ///   left: -0.25rem;
  /// }
  /// ```
  #[inline]
  fn m1(&self) -> String {
    self.append_value("-1")
  }
  /// ```css
  /// .left\:\$-2 {
  ///   left: -0.5rem;
  /// }
  /// ```
  #[inline]
  fn m2(&self) -> String {
    self.append_value("-2")
  }
  /// ```css
  /// .left\:\$-3 {
  ///   left: -0.75rem;
  /// }
  /// ```
  #[inline]
  fn m3(&self) -> String {
    self.append_value("-3")
  }
  /// ```css
  /// .left\:\$-4 {
  ///   left: -1rem;
  /// }
  /// ```
  #[inline]
  fn m4(&self) -> String {
    self.append_value("-4")
  }
  /// ```css
  /// .left\:\$-5 {
  ///   left: -1.25rem;
  /// }
  /// ```
  #[inline]
  fn m5(&self) -> String {
    self.append_value("-5")
  }
  /// ```css
  /// .left\:\$-6 {
  ///   left: -1.5rem;
  /// }
  /// ```
  #[inline]
  fn m6(&self) -> String {
    self.append_value("-6")
  }
  /// ```css
  /// .left\:\$-7 {
  ///   left: -1.75rem;
  /// }
  /// ```
  #[inline]
  fn m7(&self) -> String {
    self.append_value("-7")
  }
  /// ```css
  /// .left\:\$-8 {
  ///   left: -2rem;
  /// }
  /// ```
  #[inline]
  fn m8(&self) -> String {
    self.append_value("-8")
  }
  /// ```css
  /// .left\:\$-9 {
  ///   left: -2.25rem;
  /// }
  /// ```
  #[inline]
  fn m9(&self) -> String {
    self.append_value("-9")
  }
  /// ```css
  /// .left\:\$-10 {
  ///   left: -2.5rem;
  /// }
  /// ```
  #[inline]
  fn m10(&self) -> String {
    self.append_value("-10")
  }
  /// ```css
  /// .left\:\$-11 {
  ///   left: -2.75rem;
  /// }
  /// ```
  #[inline]
  fn m11(&self) -> String {
    self.append_value("-11")
  }
  /// ```css
  /// .left\:\$-12 {
  ///   left: -3rem;
  /// }
  /// ```
  #[inline]
  fn m12(&self) -> String {
    self.append_value("-12")
  }
  /// ```css
  /// .left\:\$-14 {
  ///   left: -3.5rem;
  /// }
  /// ```
  #[inline]
  fn m14(&self) -> String {
    self.append_value("-14")
  }
  /// ```css
  /// .left\:\$-16 {
  ///   left: -4rem;
  /// }
  /// ```
  #[inline]
  fn m16(&self) -> String {
    self.append_value("-16")
  }
  /// ```css
  /// .left\:\$-20 {
  ///   left: -5rem;
  /// }
  /// ```
  #[inline]
  fn m20(&self) -> String {
    self.append_value("-20")
  }
  /// ```css
  /// .left\:\$-24 {
  ///   left: -6rem;
  /// }
  /// ```
  #[inline]
  fn m24(&self) -> String {
    self.append_value("-24")
  }
  /// ```css
  /// .left\:\$-28 {
  ///   left: -7rem;
  /// }
  /// ```
  #[inline]
  fn m28(&self) -> String {
    self.append_value("-28")
  }
  /// ```css
  /// .left\:\$-32 {
  ///   left: -8rem;
  /// }
  /// ```
  #[inline]
  fn m32(&self) -> String {
    self.append_value("-32")
  }
  /// ```css
  /// .left\:\$-36 {
  ///   left: -9rem;
  /// }
  /// ```
  #[inline]
  fn m36(&self) -> String {
    self.append_value("-36")
  }
  /// ```css
  /// .left\:\$-40 {
  ///   left: -10rem;
  /// }
  /// ```
  #[inline]
  fn m40(&self) -> String {
    self.append_value("-40")
  }
  /// ```css
  /// .left\:\$-44 {
  ///   left: -11rem;
  /// }
  /// ```
  #[inline]
  fn m44(&self) -> String {
    self.append_value("-44")
  }
  /// ```css
  /// .left\:\$-48 {
  ///   left: -12rem;
  /// }
  /// ```
  #[inline]
  fn m48(&self) -> String {
    self.append_value("-48")
  }
  /// ```css
  /// .left\:\$-52 {
  ///   left: -13rem;
  /// }
  /// ```
  #[inline]
  fn m52(&self) -> String {
    self.append_value("-52")
  }
  /// ```css
  /// .left\:\$-56 {
  ///   left: -14rem;
  /// }
  /// ```
  #[inline]
  fn m56(&self) -> String {
    self.append_value("-56")
  }
  /// ```css
  /// .left\:\$-60 {
  ///   left: -15rem;
  /// }
  /// ```
  #[inline]
  fn m60(&self) -> String {
    self.append_value("-60")
  }
  /// ```css
  /// .left\:\$-64 {
  ///   left: -16rem;
  /// }
  /// ```
  #[inline]
  fn m64(&self) -> String {
    self.append_value("-64")
  }
  /// ```css
  /// .left\:\$-72 {
  ///   left: -18rem;
  /// }
  /// ```
  #[inline]
  fn m72(&self) -> String {
    self.append_value("-72")
  }
  /// ```css
  /// .left\:\$-80 {
  ///   left: -20rem;
  /// }
  /// ```
  #[inline]
  fn m80(&self) -> String {
    self.append_value("-80")
  }
  /// ```css
  /// .left\:\$-96 {
  ///   left: -24rem;
  /// }
  /// ```
  #[inline]
  fn m96(&self) -> String {
    self.append_value("-96")
  }
  /// ```css
  /// .left\:\$-px {
  ///   left: -1px;
  /// }
  /// ```
  #[inline]
  fn mpx(&self) -> String {
    self.append_value("-px")
  }
  /// ```css
  /// .left\:\$-0\.5 {
  ///   left: -0.125rem;
  /// }
  /// ```
  #[inline]
  fn m0_5(&self) -> String {
    self.append_value("-0.5")
  }
  /// ```css
  /// .left\:\$-1\.5 {
  ///   left: -0.375rem;
  /// }
  /// ```
  #[inline]
  fn m1_5(&self) -> String {
    self.append_value("-1.5")
  }
  /// ```css
  /// .left\:\$-2\.5 {
  ///   left: -0.625rem;
  /// }
  /// ```
  #[inline]
  fn m2_5(&self) -> String {
    self.append_value("-2.5")
  }
  /// ```css
  /// .left\:\$-3\.5 {
  ///   left: -0.875rem;
  /// }
  /// ```
  #[inline]
  fn m3_5(&self) -> String {
    self.append_value("-3.5")
  }
  /// ```css
  /// .left\:\$-half {
  ///   left: -50%;
  /// }
  /// ```
  #[inline]
  fn mhalf(&self) -> String {
    self.append_value("-half")
  }
  /// ```css
  /// .left\:\$-third {
  ///   left: -33.333333%;
  /// }
  /// ```
  #[inline]
  fn mthird(&self) -> String {
    self.append_value("-third")
  }
  /// ```css
  /// .left\:\$-two-thirds {
  ///   left: -66.666667%;
  /// }
  /// ```
  #[inline]
  fn mtwo_thirds(&self) -> String {
    self.append_value("-two-thirds")
  }
  /// ```css
  /// .left\:\$-quarter {
  ///   left: -25%;
  /// }
  /// ```
  #[inline]
  fn mquarter(&self) -> String {
    self.append_value("-quarter")
  }
  /// ```css
  /// .left\:\$-three-quarters {
  ///   left: -75%;
  /// }
  /// ```
  #[inline]
  fn mthree_quarters(&self) -> String {
    self.append_value("-three-quarters")
  }
  /// ```css
  /// .left\:\$-full {
  ///   left: -100%;
  /// }
  /// ```
  #[inline]
  fn mfull(&self) -> String {
    self.append_value("-full")
  }
}
impl GeneratedValueSetLeft for GeneratedAtomLeft {}
pub struct GeneratedAtomBlur(String);
impl GeneratedSkribbleValue for GeneratedAtomBlur {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBlur: GeneratedSkribbleValue {
  /// ```css
  /// .blur\:\$default {
  ///   --sk-filter-blur: blur(8px);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .blur\:\$none {
  ///   --sk-filter-blur: blur(0);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
  /// ```css
  /// .blur\:\$sm {
  ///   --sk-filter-blur: blur(4px);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn sm(&self) -> String {
    self.append_value("sm")
  }
  /// ```css
  /// .blur\:\$md {
  ///   --sk-filter-blur: blur(12px);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn md(&self) -> String {
    self.append_value("md")
  }
  /// ```css
  /// .blur\:\$lg {
  ///   --sk-filter-blur: blur(16px);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn lg(&self) -> String {
    self.append_value("lg")
  }
  /// ```css
  /// .blur\:\$xl {
  ///   --sk-filter-blur: blur(24px);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn xl(&self) -> String {
    self.append_value("xl")
  }
  /// ```css
  /// .blur\:\$2xl {
  ///   --sk-filter-blur: blur(40px);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n2xl(&self) -> String {
    self.append_value("2xl")
  }
  /// ```css
  /// .blur\:\$3xl {
  ///   --sk-filter-blur: blur(64px);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n3xl(&self) -> String {
    self.append_value("3xl")
  }
}
impl GeneratedValueSetBlur for GeneratedAtomBlur {}
pub struct GeneratedAtomBrightness(String);
impl GeneratedSkribbleValue for GeneratedAtomBrightness {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBrightness: GeneratedSkribbleValue {
  /// ```css
  /// .brightness\:\$0 {
  ///   --sk-filter-brightness: brightness(0);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .brightness\:\$50 {
  ///   --sk-filter-brightness: brightness(.5);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .brightness\:\$75 {
  ///   --sk-filter-brightness: brightness(.75);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .brightness\:\$90 {
  ///   --sk-filter-brightness: brightness(.9);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .brightness\:\$95 {
  ///   --sk-filter-brightness: brightness(.95);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_value("95")
  }
  /// ```css
  /// .brightness\:\$100 {
  ///   --sk-filter-brightness: brightness(1);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .brightness\:\$105 {
  ///   --sk-filter-brightness: brightness(1.05);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n105(&self) -> String {
    self.append_value("105")
  }
  /// ```css
  /// .brightness\:\$110 {
  ///   --sk-filter-brightness: brightness(1.1);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n110(&self) -> String {
    self.append_value("110")
  }
  /// ```css
  /// .brightness\:\$125 {
  ///   --sk-filter-brightness: brightness(1.25);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_value("125")
  }
  /// ```css
  /// .brightness\:\$150 {
  ///   --sk-filter-brightness: brightness(1.5);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .brightness\:\$200 {
  ///   --sk-filter-brightness: brightness(2);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
}
impl GeneratedValueSetBrightness for GeneratedAtomBrightness {}
pub struct GeneratedAtomContrast(String);
impl GeneratedSkribbleValue for GeneratedAtomContrast {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetContrast: GeneratedSkribbleValue {
  /// ```css
  /// .contrast\:\$0 {
  ///   --sk-filter-contrast: contrast(0);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .contrast\:\$50 {
  ///   --sk-filter-contrast: contrast(.5);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .contrast\:\$75 {
  ///   --sk-filter-contrast: contrast(.75);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .contrast\:\$100 {
  ///   --sk-filter-contrast: contrast(1);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .contrast\:\$125 {
  ///   --sk-filter-contrast: contrast(1.25);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_value("125")
  }
  /// ```css
  /// .contrast\:\$150 {
  ///   --sk-filter-contrast: contrast(1.5);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .contrast\:\$200 {
  ///   --sk-filter-contrast: contrast(2);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
}
impl GeneratedValueSetContrast for GeneratedAtomContrast {}
pub struct GeneratedAtomGrayscale(String);
impl GeneratedSkribbleValue for GeneratedAtomGrayscale {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetGrayscale: GeneratedSkribbleValue {
  /// ```css
  /// .grayscale\:\$default {
  ///   --sk-filter-grayscale: grayscale(100%);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .grayscale\:\$0 {
  ///   --sk-filter-grayscale: grayscale(0);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
}
impl GeneratedValueSetGrayscale for GeneratedAtomGrayscale {}
pub struct GeneratedAtomHueRotate(String);
impl GeneratedSkribbleValue for GeneratedAtomHueRotate {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetHueRotate: GeneratedSkribbleValue {
  /// ```css
  /// .hue-rotate\:\$0 {
  ///   --sk-filter-hue-rotate: hue-rotate(0deg);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .hue-rotate\:\$15 {
  ///   --sk-filter-hue-rotate: hue-rotate(15deg);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n15(&self) -> String {
    self.append_value("15")
  }
  /// ```css
  /// .hue-rotate\:\$30 {
  ///   --sk-filter-hue-rotate: hue-rotate(30deg);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_value("30")
  }
  /// ```css
  /// .hue-rotate\:\$60 {
  ///   --sk-filter-hue-rotate: hue-rotate(60deg);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .hue-rotate\:\$90 {
  ///   --sk-filter-hue-rotate: hue-rotate(90deg);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .hue-rotate\:\$180 {
  ///   --sk-filter-hue-rotate: hue-rotate(180deg);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n180(&self) -> String {
    self.append_value("180")
  }
}
impl GeneratedValueSetHueRotate for GeneratedAtomHueRotate {}
pub struct GeneratedAtomInvert(String);
impl GeneratedSkribbleValue for GeneratedAtomInvert {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetInvert: GeneratedSkribbleValue {
  /// ```css
  /// .invert\:\$default {
  ///   --sk-filter-invert: invert(100%);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .invert\:\$0 {
  ///   --sk-filter-invert: invert(0);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
}
impl GeneratedValueSetInvert for GeneratedAtomInvert {}
pub struct GeneratedAtomSaturate(String);
impl GeneratedSkribbleValue for GeneratedAtomSaturate {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSaturate: GeneratedSkribbleValue {
  /// ```css
  /// .saturate\:\$0 {
  ///   --sk-filter-saturate: saturate(0);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .saturate\:\$50 {
  ///   --sk-filter-saturate: saturate(.5);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .saturate\:\$100 {
  ///   --sk-filter-saturate: saturate(1);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .saturate\:\$150 {
  ///   --sk-filter-saturate: saturate(1.5);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .saturate\:\$200 {
  ///   --sk-filter-saturate: saturate(2);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
}
impl GeneratedValueSetSaturate for GeneratedAtomSaturate {}
pub struct GeneratedAtomSepia(String);
impl GeneratedSkribbleValue for GeneratedAtomSepia {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetSepia: GeneratedSkribbleValue {
  /// ```css
  /// .sepia\:\$default {
  ///   --sk-filter-sepia: sepia(100%);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .sepia\:\$0 {
  ///   --sk-filter-sepia: sepia(0);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
}
impl GeneratedValueSetSepia for GeneratedAtomSepia {}
pub struct GeneratedAtomDropShadow(String);
impl GeneratedSkribbleValue for GeneratedAtomDropShadow {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetDropShadow: GeneratedSkribbleValue {
  /// ```css
  /// .drop-shadow\:\$default {
  ///   --sk-filter-drop-shadow: drop-shadow(0 1px 2px rgb(0 0 0 / 0.1)) drop-shadow(0 1px 1px rgb(0 0 0 / 0.06));
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .drop-shadow\:\$sm {
  ///   --sk-filter-drop-shadow: drop-shadow(0 1px 1px rgb(0 0 0 / 0.05));
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn sm(&self) -> String {
    self.append_value("sm")
  }
  /// ```css
  /// .drop-shadow\:\$md {
  ///   --sk-filter-drop-shadow: drop-shadow(0 4px 3px rgb(0 0 0 / 0.07)) drop-shadow(0 2px 2px rgb(0 0 0 / 0.06));
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn md(&self) -> String {
    self.append_value("md")
  }
  /// ```css
  /// .drop-shadow\:\$lg {
  ///   --sk-filter-drop-shadow: drop-shadow(0 10px 8px rgb(0 0 0 / 0.04)) drop-shadow(0 4px 3px rgb(0 0 0 / 0.1));
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn lg(&self) -> String {
    self.append_value("lg")
  }
  /// ```css
  /// .drop-shadow\:\$xl {
  ///   --sk-filter-drop-shadow: drop-shadow(0 20px 13px rgb(0 0 0 / 0.03)) drop-shadow(0 8px 5px rgb(0 0 0 / 0.08));
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn xl(&self) -> String {
    self.append_value("xl")
  }
  /// ```css
  /// .drop-shadow\:\$2xl {
  ///   --sk-filter-drop-shadow: drop-shadow(0 25px 25px rgb(0 0 0 / 0.15));
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn n2xl(&self) -> String {
    self.append_value("2xl")
  }
  /// ```css
  /// .drop-shadow\:\$none {
  ///   --sk-filter-drop-shadow: drop-shadow(0 0 #0000);
  ///   filter: var(--sk-filter-blur) var(--sk-filter-brightness) var(--sk-filter-contrast) var(--sk-filter-grayscale) var(--sk-filter-hue-rotate) var(--sk-filter-invert) var(--sk-filter-saturate) var(--sk-filter-sepia) var(--sk-filter-drop-shadow) var(--sk-filter-custom);
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
}
impl GeneratedValueSetDropShadow for GeneratedAtomDropShadow {}
pub struct GeneratedAtomCustom(String);
impl GeneratedSkribbleValue for GeneratedAtomCustom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetCustom: GeneratedSkribbleValue {}
impl GeneratedValueSetCustom for GeneratedAtomCustom {}
pub struct GeneratedAtomFilter(String);
impl GeneratedSkribbleValue for GeneratedAtomFilter {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetFilter: GeneratedSkribbleValue {
  /// ```css
  /// .filter\:\$none {
  ///   filter: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
}
impl GeneratedValueSetFilter for GeneratedAtomFilter {}
pub struct GeneratedAtomBackdropBlur(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropBlur {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropBlur: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-blur\:\$default {
  ///   --sk-backdrop-blur: blur(8px);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .backdrop-blur\:\$none {
  ///   --sk-backdrop-blur: blur(0);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
  /// ```css
  /// .backdrop-blur\:\$sm {
  ///   --sk-backdrop-blur: blur(4px);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn sm(&self) -> String {
    self.append_value("sm")
  }
  /// ```css
  /// .backdrop-blur\:\$md {
  ///   --sk-backdrop-blur: blur(12px);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn md(&self) -> String {
    self.append_value("md")
  }
  /// ```css
  /// .backdrop-blur\:\$lg {
  ///   --sk-backdrop-blur: blur(16px);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn lg(&self) -> String {
    self.append_value("lg")
  }
  /// ```css
  /// .backdrop-blur\:\$xl {
  ///   --sk-backdrop-blur: blur(24px);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn xl(&self) -> String {
    self.append_value("xl")
  }
  /// ```css
  /// .backdrop-blur\:\$2xl {
  ///   --sk-backdrop-blur: blur(40px);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n2xl(&self) -> String {
    self.append_value("2xl")
  }
  /// ```css
  /// .backdrop-blur\:\$3xl {
  ///   --sk-backdrop-blur: blur(64px);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n3xl(&self) -> String {
    self.append_value("3xl")
  }
}
impl GeneratedValueSetBackdropBlur for GeneratedAtomBackdropBlur {}
pub struct GeneratedAtomBackdropBrightness(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropBrightness {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropBrightness: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-brightness\:\$0 {
  ///   --sk-backdrop-brightness: brightness(0);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .backdrop-brightness\:\$50 {
  ///   --sk-backdrop-brightness: brightness(.5);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .backdrop-brightness\:\$75 {
  ///   --sk-backdrop-brightness: brightness(.75);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .backdrop-brightness\:\$90 {
  ///   --sk-backdrop-brightness: brightness(.9);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .backdrop-brightness\:\$95 {
  ///   --sk-backdrop-brightness: brightness(.95);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n95(&self) -> String {
    self.append_value("95")
  }
  /// ```css
  /// .backdrop-brightness\:\$100 {
  ///   --sk-backdrop-brightness: brightness(1);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .backdrop-brightness\:\$105 {
  ///   --sk-backdrop-brightness: brightness(1.05);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n105(&self) -> String {
    self.append_value("105")
  }
  /// ```css
  /// .backdrop-brightness\:\$110 {
  ///   --sk-backdrop-brightness: brightness(1.1);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n110(&self) -> String {
    self.append_value("110")
  }
  /// ```css
  /// .backdrop-brightness\:\$125 {
  ///   --sk-backdrop-brightness: brightness(1.25);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_value("125")
  }
  /// ```css
  /// .backdrop-brightness\:\$150 {
  ///   --sk-backdrop-brightness: brightness(1.5);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .backdrop-brightness\:\$200 {
  ///   --sk-backdrop-brightness: brightness(2);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
}
impl GeneratedValueSetBackdropBrightness for GeneratedAtomBackdropBrightness {}
pub struct GeneratedAtomBackdropContrast(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropContrast {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropContrast: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-contrast\:\$0 {
  ///   --sk-backdrop-contrast: contrast(0);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .backdrop-contrast\:\$50 {
  ///   --sk-backdrop-contrast: contrast(.5);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .backdrop-contrast\:\$75 {
  ///   --sk-backdrop-contrast: contrast(.75);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n75(&self) -> String {
    self.append_value("75")
  }
  /// ```css
  /// .backdrop-contrast\:\$100 {
  ///   --sk-backdrop-contrast: contrast(1);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .backdrop-contrast\:\$125 {
  ///   --sk-backdrop-contrast: contrast(1.25);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n125(&self) -> String {
    self.append_value("125")
  }
  /// ```css
  /// .backdrop-contrast\:\$150 {
  ///   --sk-backdrop-contrast: contrast(1.5);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .backdrop-contrast\:\$200 {
  ///   --sk-backdrop-contrast: contrast(2);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
}
impl GeneratedValueSetBackdropContrast for GeneratedAtomBackdropContrast {}
pub struct GeneratedAtomBackdropGrayscale(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropGrayscale {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropGrayscale: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-grayscale\:\$default {
  ///   --sk-backdrop-grayscale: grayscale(100%);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .backdrop-grayscale\:\$0 {
  ///   --sk-backdrop-grayscale: grayscale(0);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
}
impl GeneratedValueSetBackdropGrayscale for GeneratedAtomBackdropGrayscale {}
pub struct GeneratedAtomBackdropHueRotate(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropHueRotate {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropHueRotate: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-hue-rotate\:\$0 {
  ///   --sk-backdrop-hue-rotate: hue-rotate(0deg);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .backdrop-hue-rotate\:\$15 {
  ///   --sk-backdrop-hue-rotate: hue-rotate(15deg);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n15(&self) -> String {
    self.append_value("15")
  }
  /// ```css
  /// .backdrop-hue-rotate\:\$30 {
  ///   --sk-backdrop-hue-rotate: hue-rotate(30deg);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n30(&self) -> String {
    self.append_value("30")
  }
  /// ```css
  /// .backdrop-hue-rotate\:\$60 {
  ///   --sk-backdrop-hue-rotate: hue-rotate(60deg);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n60(&self) -> String {
    self.append_value("60")
  }
  /// ```css
  /// .backdrop-hue-rotate\:\$90 {
  ///   --sk-backdrop-hue-rotate: hue-rotate(90deg);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n90(&self) -> String {
    self.append_value("90")
  }
  /// ```css
  /// .backdrop-hue-rotate\:\$180 {
  ///   --sk-backdrop-hue-rotate: hue-rotate(180deg);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n180(&self) -> String {
    self.append_value("180")
  }
}
impl GeneratedValueSetBackdropHueRotate for GeneratedAtomBackdropHueRotate {}
pub struct GeneratedAtomBackdropInvert(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropInvert {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropInvert: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-invert\:\$default {
  ///   --sk-backdrop-invert: invert(100%);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .backdrop-invert\:\$0 {
  ///   --sk-backdrop-invert: invert(0);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
}
impl GeneratedValueSetBackdropInvert for GeneratedAtomBackdropInvert {}
pub struct GeneratedAtomBackdropSaturate(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropSaturate {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropSaturate: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-saturate\:\$0 {
  ///   --sk-backdrop-saturate: saturate(0);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
  /// ```css
  /// .backdrop-saturate\:\$50 {
  ///   --sk-backdrop-saturate: saturate(.5);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n50(&self) -> String {
    self.append_value("50")
  }
  /// ```css
  /// .backdrop-saturate\:\$100 {
  ///   --sk-backdrop-saturate: saturate(1);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n100(&self) -> String {
    self.append_value("100")
  }
  /// ```css
  /// .backdrop-saturate\:\$150 {
  ///   --sk-backdrop-saturate: saturate(1.5);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n150(&self) -> String {
    self.append_value("150")
  }
  /// ```css
  /// .backdrop-saturate\:\$200 {
  ///   --sk-backdrop-saturate: saturate(2);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n200(&self) -> String {
    self.append_value("200")
  }
}
impl GeneratedValueSetBackdropSaturate for GeneratedAtomBackdropSaturate {}
pub struct GeneratedAtomBackdropSepia(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropSepia {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropSepia: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-sepia\:\$default {
  ///   --sk-backdrop-sepia: sepia(100%);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .backdrop-sepia\:\$0 {
  ///   --sk-backdrop-sepia: sepia(0);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n0(&self) -> String {
    self.append_value("0")
  }
}
impl GeneratedValueSetBackdropSepia for GeneratedAtomBackdropSepia {}
pub struct GeneratedAtomBackdropDropShadow(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropDropShadow {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropDropShadow: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-drop-shadow\:\$default {
  ///   --sk-backdrop-drop-shadow: drop-shadow(0 1px 2px rgb(0 0 0 / 0.1)) drop-shadow(0 1px 1px rgb(0 0 0 / 0.06));
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn default(&self) -> String {
    self.append_value("default")
  }
  /// ```css
  /// .backdrop-drop-shadow\:\$sm {
  ///   --sk-backdrop-drop-shadow: drop-shadow(0 1px 1px rgb(0 0 0 / 0.05));
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn sm(&self) -> String {
    self.append_value("sm")
  }
  /// ```css
  /// .backdrop-drop-shadow\:\$md {
  ///   --sk-backdrop-drop-shadow: drop-shadow(0 4px 3px rgb(0 0 0 / 0.07)) drop-shadow(0 2px 2px rgb(0 0 0 / 0.06));
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn md(&self) -> String {
    self.append_value("md")
  }
  /// ```css
  /// .backdrop-drop-shadow\:\$lg {
  ///   --sk-backdrop-drop-shadow: drop-shadow(0 10px 8px rgb(0 0 0 / 0.04)) drop-shadow(0 4px 3px rgb(0 0 0 / 0.1));
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn lg(&self) -> String {
    self.append_value("lg")
  }
  /// ```css
  /// .backdrop-drop-shadow\:\$xl {
  ///   --sk-backdrop-drop-shadow: drop-shadow(0 20px 13px rgb(0 0 0 / 0.03)) drop-shadow(0 8px 5px rgb(0 0 0 / 0.08));
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn xl(&self) -> String {
    self.append_value("xl")
  }
  /// ```css
  /// .backdrop-drop-shadow\:\$2xl {
  ///   --sk-backdrop-drop-shadow: drop-shadow(0 25px 25px rgb(0 0 0 / 0.15));
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn n2xl(&self) -> String {
    self.append_value("2xl")
  }
  /// ```css
  /// .backdrop-drop-shadow\:\$none {
  ///   --sk-backdrop-drop-shadow: drop-shadow(0 0 #0000);
  ///   backdrop-filter: var(--sk-backdrop-blur) var(--sk-backdrop-brightness) var(--sk-backdrop-contrast) var(--sk-backdrop-grayscale) var(--sk-backdrop-hue-rotate) var(--sk-backdrop-invert) var(--sk-backdrop-saturate) var(--sk-backdrop-sepia) var(--sk-backdrop-drop-shadow) var(--sk-backdrop-custom);
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
}
impl GeneratedValueSetBackdropDropShadow for GeneratedAtomBackdropDropShadow {}
pub struct GeneratedAtomBackdropCustom(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropCustom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropCustom: GeneratedSkribbleValue {}
impl GeneratedValueSetBackdropCustom for GeneratedAtomBackdropCustom {}
pub struct GeneratedAtomBackdropFilter(String);
impl GeneratedSkribbleValue for GeneratedAtomBackdropFilter {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait GeneratedValueSetBackdropFilter: GeneratedSkribbleValue {
  /// ```css
  /// .backdrop-filter\:\$none {
  ///   backdrop-filter: none;
  /// }
  /// ```
  #[inline]
  fn none(&self) -> String {
    self.append_value("none")
  }
}
impl GeneratedValueSetBackdropFilter for GeneratedAtomBackdropFilter {}
pub trait GeneratedAtom: GeneratedSkribbleValue {
  /// Screen reader only
  #[inline]
  fn sr(&self) -> GeneratedAtomSr {
    GeneratedAtomSr::from_ref(self.append("sr"))
  }
  #[inline]
  fn sr_(&self, value: &'static str) -> String {
    self.append(format!("sr:[{}]", value.trim()))
  }
  /// A class to apply transition effects.
  #[inline]
  fn transition(&self) -> GeneratedAtomTransition {
    GeneratedAtomTransition::from_ref(self.append("transition"))
  }
  #[inline]
  fn transition_(&self, value: &'static str) -> String {
    self.append(format!("transition:[{}]", value.trim()))
  }
  #[inline]
  fn transition_property(&self) -> GeneratedAtomTransitionProperty {
    GeneratedAtomTransitionProperty::from_ref(self.append("transition-property"))
  }
  #[inline]
  fn transition_property_(&self, value: &'static str) -> String {
    self.append(format!("transition-property:[{}]", value.trim()))
  }
  #[inline]
  fn duration(&self) -> GeneratedAtomDuration {
    GeneratedAtomDuration::from_ref(self.append("duration"))
  }
  #[inline]
  fn duration_(&self, value: &'static str) -> String {
    self.append(format!("duration:[{}]", value.trim()))
  }
  #[inline]
  fn ease(&self) -> GeneratedAtomEase {
    GeneratedAtomEase::from_ref(self.append("ease"))
  }
  #[inline]
  fn ease_(&self, value: &'static str) -> String {
    self.append(format!("ease:[{}]", value.trim()))
  }
  #[inline]
  fn delay(&self) -> GeneratedAtomDelay {
    GeneratedAtomDelay::from_ref(self.append("delay"))
  }
  #[inline]
  fn delay_(&self, value: &'static str) -> String {
    self.append(format!("delay:[{}]", value.trim()))
  }
  #[inline]
  fn animate(&self) -> GeneratedAtomAnimate {
    GeneratedAtomAnimate::from_ref(self.append("animate"))
  }
  #[inline]
  fn animate_(&self, value: &'static str) -> String {
    self.append(format!("animate:[{}]", value.trim()))
  }
  /// Fade in an element. Requires the `animate:$in` class to be applied to the
  /// element.
  #[inline]
  fn fade_in(&self) -> GeneratedAtomFadeIn {
    GeneratedAtomFadeIn::from_ref(self.append("fade-in"))
  }
  #[inline]
  fn fade_in_(&self, value: &'static str) -> String {
    self.append(format!("fade-in:[{}]", value.trim()))
  }
  /// Fade out an element. Requires the `animate:$out` class to be applied to
  /// the element.
  #[inline]
  fn fade_out(&self) -> GeneratedAtomFadeOut {
    GeneratedAtomFadeOut::from_ref(self.append("fade-out"))
  }
  #[inline]
  fn fade_out_(&self, value: &'static str) -> String {
    self.append(format!("fade-out:[{}]", value.trim()))
  }
  /// Rotate an element to enter. Requires the `animate:$in` class to be applied
  /// to the element.
  #[inline]
  fn spin_in(&self) -> GeneratedAtomSpinIn {
    GeneratedAtomSpinIn::from_ref(self.append("spin-in"))
  }
  #[inline]
  fn spin_in_(&self, value: &'static str) -> String {
    self.append(format!("spin-in:[{}]", value.trim()))
  }
  /// Rotate an element to exit. Requires the `animate:$out` class to be applied
  /// to the element.
  #[inline]
  fn spin_out(&self) -> GeneratedAtomSpinOut {
    GeneratedAtomSpinOut::from_ref(self.append("spin-out"))
  }
  #[inline]
  fn spin_out_(&self, value: &'static str) -> String {
    self.append(format!("spin-out:[{}]", value.trim()))
  }
  /// Entry animation from the left. Requires the `animate:$in` class to be
  /// applied to the element.
  #[inline]
  fn slide_in_left(&self) -> GeneratedAtomSlideInLeft {
    GeneratedAtomSlideInLeft::from_ref(self.append("slide-in-left"))
  }
  #[inline]
  fn slide_in_left_(&self, value: &'static str) -> String {
    self.append(format!("slide-in-left:[{}]", value.trim()))
  }
  /// Entry animation from the right. Requires the `animate:$in` class to be
  /// applied to the element.
  #[inline]
  fn slide_in_right(&self) -> GeneratedAtomSlideInRight {
    GeneratedAtomSlideInRight::from_ref(self.append("slide-in-right"))
  }
  #[inline]
  fn slide_in_right_(&self, value: &'static str) -> String {
    self.append(format!("slide-in-right:[{}]", value.trim()))
  }
  /// Exit animation to the left. Requires the `animate:$out` class to be
  /// applied to the element.
  #[inline]
  fn slide_out_left(&self) -> GeneratedAtomSlideOutLeft {
    GeneratedAtomSlideOutLeft::from_ref(self.append("slide-out-left"))
  }
  #[inline]
  fn slide_out_left_(&self, value: &'static str) -> String {
    self.append(format!("slide-out-left:[{}]", value.trim()))
  }
  /// Exit animation to the right. Requires the `animate:$out` class to be
  /// applied to the element.
  #[inline]
  fn slide_out_right(&self) -> GeneratedAtomSlideOutRight {
    GeneratedAtomSlideOutRight::from_ref(self.append("slide-out-right"))
  }
  #[inline]
  fn slide_out_right_(&self, value: &'static str) -> String {
    self.append(format!("slide-out-right:[{}]", value.trim()))
  }
  /// Entry animation from the top. Requires the `animate:$in` class to be
  /// applied to the element.
  #[inline]
  fn slide_in_top(&self) -> GeneratedAtomSlideInTop {
    GeneratedAtomSlideInTop::from_ref(self.append("slide-in-top"))
  }
  #[inline]
  fn slide_in_top_(&self, value: &'static str) -> String {
    self.append(format!("slide-in-top:[{}]", value.trim()))
  }
  /// Entry animation from the bottom. Requires the `animate:$in` class to be
  /// applied to the element.
  #[inline]
  fn slide_in_bottom(&self) -> GeneratedAtomSlideInBottom {
    GeneratedAtomSlideInBottom::from_ref(self.append("slide-in-bottom"))
  }
  #[inline]
  fn slide_in_bottom_(&self, value: &'static str) -> String {
    self.append(format!("slide-in-bottom:[{}]", value.trim()))
  }
  /// Exit animation to the top. Requires the `animate:$out` class to be applied
  /// to the element.
  #[inline]
  fn slide_out_top(&self) -> GeneratedAtomSlideOutTop {
    GeneratedAtomSlideOutTop::from_ref(self.append("slide-out-top"))
  }
  #[inline]
  fn slide_out_top_(&self, value: &'static str) -> String {
    self.append(format!("slide-out-top:[{}]", value.trim()))
  }
  /// Exit animation to the bottom. Requires the `animate:$out` class to be
  /// applied to the element.
  #[inline]
  fn slide_out_bottom(&self) -> GeneratedAtomSlideOutBottom {
    GeneratedAtomSlideOutBottom::from_ref(self.append("slide-out-bottom"))
  }
  #[inline]
  fn slide_out_bottom_(&self, value: &'static str) -> String {
    self.append(format!("slide-out-bottom:[{}]", value.trim()))
  }
  /// Entry animation from this zoom level. Requires the `animate:$in` class to
  /// be applied to the element.
  #[inline]
  fn zoom_in(&self) -> GeneratedAtomZoomIn {
    GeneratedAtomZoomIn::from_ref(self.append("zoom-in"))
  }
  #[inline]
  fn zoom_in_(&self, value: &'static str) -> String {
    self.append(format!("zoom-in:[{}]", value.trim()))
  }
  /// Exit animation from this zoom level. Requires the `animate:$out` class to
  /// be applied to the element.
  #[inline]
  fn zoom_out(&self) -> GeneratedAtomZoomOut {
    GeneratedAtomZoomOut::from_ref(self.append("zoom-out"))
  }
  #[inline]
  fn zoom_out_(&self, value: &'static str) -> String {
    self.append(format!("zoom-out:[{}]", value.trim()))
  }
  #[inline]
  fn animate_duration(&self) -> GeneratedAtomAnimateDuration {
    GeneratedAtomAnimateDuration::from_ref(self.append("animate-duration"))
  }
  #[inline]
  fn animate_duration_(&self, value: &'static str) -> String {
    self.append(format!("animate-duration:[{}]", value.trim()))
  }
  #[inline]
  fn animate_easing(&self) -> GeneratedAtomAnimateEasing {
    GeneratedAtomAnimateEasing::from_ref(self.append("animate-easing"))
  }
  #[inline]
  fn animate_easing_(&self, value: &'static str) -> String {
    self.append(format!("animate-easing:[{}]", value.trim()))
  }
  #[inline]
  fn animate_delay(&self) -> GeneratedAtomAnimateDelay {
    GeneratedAtomAnimateDelay::from_ref(self.append("animate-delay"))
  }
  #[inline]
  fn animate_delay_(&self, value: &'static str) -> String {
    self.append(format!("animate-delay:[{}]", value.trim()))
  }
  #[inline]
  fn animate_repeat(&self) -> GeneratedAtomAnimateRepeat {
    GeneratedAtomAnimateRepeat::from_ref(self.append("animate-repeat"))
  }
  #[inline]
  fn animate_repeat_(&self, value: &'static str) -> String {
    self.append(format!("animate-repeat:[{}]", value.trim()))
  }
  #[inline]
  fn animate_direction(&self) -> GeneratedAtomAnimateDirection {
    GeneratedAtomAnimateDirection::from_ref(self.append("animate-direction"))
  }
  #[inline]
  fn animate_direction_(&self, value: &'static str) -> String {
    self.append(format!("animate-direction:[{}]", value.trim()))
  }
  #[inline]
  fn animate_fill_mode(&self) -> GeneratedAtomAnimateFillMode {
    GeneratedAtomAnimateFillMode::from_ref(self.append("animate-fill-mode"))
  }
  #[inline]
  fn animate_fill_mode_(&self, value: &'static str) -> String {
    self.append(format!("animate-fill-mode:[{}]", value.trim()))
  }
  #[inline]
  fn animate_state(&self) -> GeneratedAtomAnimateState {
    GeneratedAtomAnimateState::from_ref(self.append("animate-state"))
  }
  #[inline]
  fn animate_state_(&self, value: &'static str) -> String {
    self.append(format!("animate-state:[{}]", value.trim()))
  }
  #[inline]
  fn zoom(&self) -> GeneratedAtomZoom {
    GeneratedAtomZoom::from_ref(self.append("zoom"))
  }
  #[inline]
  fn zoom_(&self, value: &'static str) -> String {
    self.append(format!("zoom:[{}]", value.trim()))
  }
  #[inline]
  fn font(&self) -> GeneratedAtomFont {
    GeneratedAtomFont::from_ref(self.append("font"))
  }
  #[inline]
  fn font_(&self, value: &'static str) -> String {
    self.append(format!("font:[{}]", value.trim()))
  }
  #[inline]
  fn p(&self) -> GeneratedAtomP {
    GeneratedAtomP::from_ref(self.append("p"))
  }
  #[inline]
  fn p_(&self, value: &'static str) -> String {
    self.append(format!("p:[{}]", value.trim()))
  }
  #[inline]
  fn py(&self) -> GeneratedAtomPy {
    GeneratedAtomPy::from_ref(self.append("py"))
  }
  #[inline]
  fn py_(&self, value: &'static str) -> String {
    self.append(format!("py:[{}]", value.trim()))
  }
  #[inline]
  fn px(&self) -> GeneratedAtomPx {
    GeneratedAtomPx::from_ref(self.append("px"))
  }
  #[inline]
  fn px_(&self, value: &'static str) -> String {
    self.append(format!("px:[{}]", value.trim()))
  }
  #[inline]
  fn p_block(&self) -> GeneratedAtomPBlock {
    GeneratedAtomPBlock::from_ref(self.append("p-block"))
  }
  #[inline]
  fn p_block_(&self, value: &'static str) -> String {
    self.append(format!("p-block:[{}]", value.trim()))
  }
  #[inline]
  fn pbs(&self) -> GeneratedAtomPbs {
    GeneratedAtomPbs::from_ref(self.append("pbs"))
  }
  #[inline]
  fn pbs_(&self, value: &'static str) -> String {
    self.append(format!("pbs:[{}]", value.trim()))
  }
  #[inline]
  fn pbe(&self) -> GeneratedAtomPbe {
    GeneratedAtomPbe::from_ref(self.append("pbe"))
  }
  #[inline]
  fn pbe_(&self, value: &'static str) -> String {
    self.append(format!("pbe:[{}]", value.trim()))
  }
  #[inline]
  fn p_inline(&self) -> GeneratedAtomPInline {
    GeneratedAtomPInline::from_ref(self.append("p-inline"))
  }
  #[inline]
  fn p_inline_(&self, value: &'static str) -> String {
    self.append(format!("p-inline:[{}]", value.trim()))
  }
  #[inline]
  fn ps(&self) -> GeneratedAtomPs {
    GeneratedAtomPs::from_ref(self.append("ps"))
  }
  #[inline]
  fn ps_(&self, value: &'static str) -> String {
    self.append(format!("ps:[{}]", value.trim()))
  }
  #[inline]
  fn pe(&self) -> GeneratedAtomPe {
    GeneratedAtomPe::from_ref(self.append("pe"))
  }
  #[inline]
  fn pe_(&self, value: &'static str) -> String {
    self.append(format!("pe:[{}]", value.trim()))
  }
  #[inline]
  fn pt(&self) -> GeneratedAtomPt {
    GeneratedAtomPt::from_ref(self.append("pt"))
  }
  #[inline]
  fn pt_(&self, value: &'static str) -> String {
    self.append(format!("pt:[{}]", value.trim()))
  }
  #[inline]
  fn pr(&self) -> GeneratedAtomPr {
    GeneratedAtomPr::from_ref(self.append("pr"))
  }
  #[inline]
  fn pr_(&self, value: &'static str) -> String {
    self.append(format!("pr:[{}]", value.trim()))
  }
  #[inline]
  fn pb(&self) -> GeneratedAtomPb {
    GeneratedAtomPb::from_ref(self.append("pb"))
  }
  #[inline]
  fn pb_(&self, value: &'static str) -> String {
    self.append(format!("pb:[{}]", value.trim()))
  }
  #[inline]
  fn pl(&self) -> GeneratedAtomPl {
    GeneratedAtomPl::from_ref(self.append("pl"))
  }
  #[inline]
  fn pl_(&self, value: &'static str) -> String {
    self.append(format!("pl:[{}]", value.trim()))
  }
  #[inline]
  fn m(&self) -> GeneratedAtomM {
    GeneratedAtomM::from_ref(self.append("m"))
  }
  #[inline]
  fn m_(&self, value: &'static str) -> String {
    self.append(format!("m:[{}]", value.trim()))
  }
  #[inline]
  fn my(&self) -> GeneratedAtomMy {
    GeneratedAtomMy::from_ref(self.append("my"))
  }
  #[inline]
  fn my_(&self, value: &'static str) -> String {
    self.append(format!("my:[{}]", value.trim()))
  }
  #[inline]
  fn mx(&self) -> GeneratedAtomMx {
    GeneratedAtomMx::from_ref(self.append("mx"))
  }
  #[inline]
  fn mx_(&self, value: &'static str) -> String {
    self.append(format!("mx:[{}]", value.trim()))
  }
  #[inline]
  fn m_block(&self) -> GeneratedAtomMBlock {
    GeneratedAtomMBlock::from_ref(self.append("m-block"))
  }
  #[inline]
  fn m_block_(&self, value: &'static str) -> String {
    self.append(format!("m-block:[{}]", value.trim()))
  }
  #[inline]
  fn mbs(&self) -> GeneratedAtomMbs {
    GeneratedAtomMbs::from_ref(self.append("mbs"))
  }
  #[inline]
  fn mbs_(&self, value: &'static str) -> String {
    self.append(format!("mbs:[{}]", value.trim()))
  }
  #[inline]
  fn mbe(&self) -> GeneratedAtomMbe {
    GeneratedAtomMbe::from_ref(self.append("mbe"))
  }
  #[inline]
  fn mbe_(&self, value: &'static str) -> String {
    self.append(format!("mbe:[{}]", value.trim()))
  }
  #[inline]
  fn m_inline(&self) -> GeneratedAtomMInline {
    GeneratedAtomMInline::from_ref(self.append("m-inline"))
  }
  #[inline]
  fn m_inline_(&self, value: &'static str) -> String {
    self.append(format!("m-inline:[{}]", value.trim()))
  }
  #[inline]
  fn ms(&self) -> GeneratedAtomMs {
    GeneratedAtomMs::from_ref(self.append("ms"))
  }
  #[inline]
  fn ms_(&self, value: &'static str) -> String {
    self.append(format!("ms:[{}]", value.trim()))
  }
  #[inline]
  fn me(&self) -> GeneratedAtomMe {
    GeneratedAtomMe::from_ref(self.append("me"))
  }
  #[inline]
  fn me_(&self, value: &'static str) -> String {
    self.append(format!("me:[{}]", value.trim()))
  }
  #[inline]
  fn mt(&self) -> GeneratedAtomMt {
    GeneratedAtomMt::from_ref(self.append("mt"))
  }
  #[inline]
  fn mt_(&self, value: &'static str) -> String {
    self.append(format!("mt:[{}]", value.trim()))
  }
  #[inline]
  fn mr(&self) -> GeneratedAtomMr {
    GeneratedAtomMr::from_ref(self.append("mr"))
  }
  #[inline]
  fn mr_(&self, value: &'static str) -> String {
    self.append(format!("mr:[{}]", value.trim()))
  }
  #[inline]
  fn mb(&self) -> GeneratedAtomMb {
    GeneratedAtomMb::from_ref(self.append("mb"))
  }
  #[inline]
  fn mb_(&self, value: &'static str) -> String {
    self.append(format!("mb:[{}]", value.trim()))
  }
  #[inline]
  fn ml(&self) -> GeneratedAtomMl {
    GeneratedAtomMl::from_ref(self.append("ml"))
  }
  #[inline]
  fn ml_(&self, value: &'static str) -> String {
    self.append(format!("ml:[{}]", value.trim()))
  }
  /// Control the horizontal space between child elements.
  #[inline]
  fn space_x(&self) -> GeneratedAtomSpaceX {
    GeneratedAtomSpaceX::from_ref(self.append("space-x"))
  }
  #[inline]
  fn space_x_(&self, value: &'static str) -> String {
    self.append(format!("space-x:[{}]", value.trim()))
  }
  /// Control the vertical space between child elements.
  #[inline]
  fn space_y(&self) -> GeneratedAtomSpaceY {
    GeneratedAtomSpaceY::from_ref(self.append("space-y"))
  }
  #[inline]
  fn space_y_(&self, value: &'static str) -> String {
    self.append(format!("space-y:[{}]", value.trim()))
  }
  #[inline]
  fn z(&self) -> GeneratedAtomZ {
    GeneratedAtomZ::from_ref(self.append("z"))
  }
  #[inline]
  fn z_(&self, value: &'static str) -> String {
    self.append(format!("z:[{}]", value.trim()))
  }
  #[inline]
  fn dir(&self) -> GeneratedAtomDir {
    GeneratedAtomDir::from_ref(self.append("dir"))
  }
  #[inline]
  fn dir_(&self, value: &'static str) -> String {
    self.append(format!("dir:[{}]", value.trim()))
  }
  #[inline]
  fn bg(&self) -> GeneratedAtomBg {
    GeneratedAtomBg::from_ref(self.append("bg"))
  }
  #[inline]
  fn bg_(&self, value: &'static str) -> String {
    self.append(format!("bg:[{}]", value.trim()))
  }
  #[inline]
  fn opacity(&self) -> GeneratedAtomOpacity {
    GeneratedAtomOpacity::from_ref(self.append("opacity"))
  }
  #[inline]
  fn opacity_(&self, value: &'static str) -> String {
    self.append(format!("opacity:[{}]", value.trim()))
  }
  /// Control the aspect ratio of an element.
  #[inline]
  fn aspect(&self) -> GeneratedAtomAspect {
    GeneratedAtomAspect::from_ref(self.append("aspect"))
  }
  #[inline]
  fn aspect_(&self, value: &'static str) -> String {
    self.append(format!("aspect:[{}]", value.trim()))
  }
  /// Control the number of columns within an element.
  #[inline]
  fn columns(&self) -> GeneratedAtomColumns {
    GeneratedAtomColumns::from_ref(self.append("columns"))
  }
  #[inline]
  fn columns_(&self, value: &'static str) -> String {
    self.append(format!("columns:[{}]", value.trim()))
  }
  /// Control how a column or page should break after an element.
  #[inline]
  fn break_after(&self) -> GeneratedAtomBreakAfter {
    GeneratedAtomBreakAfter::from_ref(self.append("break-after"))
  }
  #[inline]
  fn break_after_(&self, value: &'static str) -> String {
    self.append(format!("break-after:[{}]", value.trim()))
  }
  /// Control how a column or page should break before an element.
  #[inline]
  fn break_before(&self) -> GeneratedAtomBreakBefore {
    GeneratedAtomBreakBefore::from_ref(self.append("break-before"))
  }
  #[inline]
  fn break_before_(&self, value: &'static str) -> String {
    self.append(format!("break-before:[{}]", value.trim()))
  }
  /// Control how a column or page should break within an element.
  #[inline]
  fn break_inside(&self) -> GeneratedAtomBreakInside {
    GeneratedAtomBreakInside::from_ref(self.append("break-inside"))
  }
  #[inline]
  fn break_inside_(&self, value: &'static str) -> String {
    self.append(format!("break-inside:[{}]", value.trim()))
  }
  /// Use the box-decoration-slice and box-decoration-clone utilities to control
  /// whether properties like background, border, border-image, box-shadow,
  /// clip-page, margin, and padding should be rendered as if the element were
  /// one continuous fragment, or distinct blocks.
  #[inline]
  fn box_decoration(&self) -> GeneratedAtomBoxDecoration {
    GeneratedAtomBoxDecoration::from_ref(self.append("box-decoration"))
  }
  #[inline]
  fn box_decoration_(&self, value: &'static str) -> String {
    self.append(format!("box-decoration:[{}]", value.trim()))
  }
  /// Control how the browser should calculate an element's total size.
  #[inline]
  fn r#box(&self) -> GeneratedAtomBox {
    GeneratedAtomBox::from_ref(self.append("box"))
  }
  #[inline]
  fn r#box_(&self, value: &'static str) -> String {
    self.append(format!("box:[{}]", value.trim()))
  }
  #[inline]
  fn display(&self) -> GeneratedAtomDisplay {
    GeneratedAtomDisplay::from_ref(self.append("display"))
  }
  #[inline]
  fn display_(&self, value: &'static str) -> String {
    self.append(format!("display:[{}]", value.trim()))
  }
  #[inline]
  fn visibility(&self) -> GeneratedAtomVisibility {
    GeneratedAtomVisibility::from_ref(self.append("visibility"))
  }
  #[inline]
  fn visibility_(&self, value: &'static str) -> String {
    self.append(format!("visibility:[{}]", value.trim()))
  }
  #[inline]
  fn float(&self) -> GeneratedAtomFloat {
    GeneratedAtomFloat::from_ref(self.append("float"))
  }
  #[inline]
  fn float_(&self, value: &'static str) -> String {
    self.append(format!("float:[{}]", value.trim()))
  }
  #[inline]
  fn clear(&self) -> GeneratedAtomClear {
    GeneratedAtomClear::from_ref(self.append("clear"))
  }
  #[inline]
  fn clear_(&self, value: &'static str) -> String {
    self.append(format!("clear:[{}]", value.trim()))
  }
  /// Control whether an element should explicitly create a new stacking context. More details: https://developer.mozilla.org/en-US/docs/Web/CSS/isolation
  #[inline]
  fn isolate(&self) -> GeneratedAtomIsolate {
    GeneratedAtomIsolate::from_ref(self.append("isolate"))
  }
  #[inline]
  fn isolate_(&self, value: &'static str) -> String {
    self.append(format!("isolate:[{}]", value.trim()))
  }
  /// Control how a replaced element's content should be resized.
  #[inline]
  fn object_fit(&self) -> GeneratedAtomObjectFit {
    GeneratedAtomObjectFit::from_ref(self.append("object-fit"))
  }
  #[inline]
  fn object_fit_(&self, value: &'static str) -> String {
    self.append(format!("object-fit:[{}]", value.trim()))
  }
  /// Control how a replaced element's content should be positioned within its
  /// container.
  #[inline]
  fn object_position(&self) -> GeneratedAtomObjectPosition {
    GeneratedAtomObjectPosition::from_ref(self.append("object-position"))
  }
  #[inline]
  fn object_position_(&self, value: &'static str) -> String {
    self.append(format!("object-position:[{}]", value.trim()))
  }
  /// Control how an element handles content that is too large for the
  /// container.
  #[inline]
  fn overflow(&self) -> GeneratedAtomOverflow {
    GeneratedAtomOverflow::from_ref(self.append("overflow"))
  }
  #[inline]
  fn overflow_(&self, value: &'static str) -> String {
    self.append(format!("overflow:[{}]", value.trim()))
  }
  /// Control how an element handles horizontal content that is too large for
  /// the container.
  #[inline]
  fn overflow_x(&self) -> GeneratedAtomOverflowX {
    GeneratedAtomOverflowX::from_ref(self.append("overflow-x"))
  }
  #[inline]
  fn overflow_x_(&self, value: &'static str) -> String {
    self.append(format!("overflow-x:[{}]", value.trim()))
  }
  /// Control how an element handles vertical content that is too large for the
  /// container.
  #[inline]
  fn overflow_y(&self) -> GeneratedAtomOverflowY {
    GeneratedAtomOverflowY::from_ref(self.append("overflow-y"))
  }
  #[inline]
  fn overflow_y_(&self, value: &'static str) -> String {
    self.append(format!("overflow-y:[{}]", value.trim()))
  }
  /// Control how the browser behaves when reaching the boundary of a scrolling
  /// area.
  #[inline]
  fn overscroll(&self) -> GeneratedAtomOverscroll {
    GeneratedAtomOverscroll::from_ref(self.append("overscroll"))
  }
  #[inline]
  fn overscroll_(&self, value: &'static str) -> String {
    self.append(format!("overscroll:[{}]", value.trim()))
  }
  /// Control how the browser behaves when reaching the horizontal boundary of a
  /// scrolling area.
  #[inline]
  fn overscroll_x(&self) -> GeneratedAtomOverscrollX {
    GeneratedAtomOverscrollX::from_ref(self.append("overscroll-x"))
  }
  #[inline]
  fn overscroll_x_(&self, value: &'static str) -> String {
    self.append(format!("overscroll-x:[{}]", value.trim()))
  }
  /// Control how the browser behaves when reaching the vertical boundary of a
  /// scrolling area.
  #[inline]
  fn overscroll_y(&self) -> GeneratedAtomOverscrollY {
    GeneratedAtomOverscrollY::from_ref(self.append("overscroll-y"))
  }
  #[inline]
  fn overscroll_y_(&self, value: &'static str) -> String {
    self.append(format!("overscroll-y:[{}]", value.trim()))
  }
  /// Control how an element is positioned in the DOM.
  #[inline]
  fn position(&self) -> GeneratedAtomPosition {
    GeneratedAtomPosition::from_ref(self.append("position"))
  }
  #[inline]
  fn position_(&self, value: &'static str) -> String {
    self.append(format!("position:[{}]", value.trim()))
  }
  /// Control the placement of positioned elements.
  #[inline]
  fn inset(&self) -> GeneratedAtomInset {
    GeneratedAtomInset::from_ref(self.append("inset"))
  }
  #[inline]
  fn inset_(&self, value: &'static str) -> String {
    self.append(format!("inset:[{}]", value.trim()))
  }
  /// Control the placement of positioned elements.
  #[inline]
  fn inset_x(&self) -> GeneratedAtomInsetX {
    GeneratedAtomInsetX::from_ref(self.append("inset-x"))
  }
  #[inline]
  fn inset_x_(&self, value: &'static str) -> String {
    self.append(format!("inset-x:[{}]", value.trim()))
  }
  /// Control the placement of positioned elements.
  #[inline]
  fn inset_y(&self) -> GeneratedAtomInsetY {
    GeneratedAtomInsetY::from_ref(self.append("inset-y"))
  }
  #[inline]
  fn inset_y_(&self, value: &'static str) -> String {
    self.append(format!("inset-y:[{}]", value.trim()))
  }
  /// Control the placement of positioned elements.
  #[inline]
  fn start(&self) -> GeneratedAtomStart {
    GeneratedAtomStart::from_ref(self.append("start"))
  }
  #[inline]
  fn start_(&self, value: &'static str) -> String {
    self.append(format!("start:[{}]", value.trim()))
  }
  /// Control the placement of positioned elements.
  #[inline]
  fn end(&self) -> GeneratedAtomEnd {
    GeneratedAtomEnd::from_ref(self.append("end"))
  }
  #[inline]
  fn end_(&self, value: &'static str) -> String {
    self.append(format!("end:[{}]", value.trim()))
  }
  /// Control the placement of positioned elements.
  #[inline]
  fn top(&self) -> GeneratedAtomTop {
    GeneratedAtomTop::from_ref(self.append("top"))
  }
  #[inline]
  fn top_(&self, value: &'static str) -> String {
    self.append(format!("top:[{}]", value.trim()))
  }
  /// Control the placement of positioned elements.
  #[inline]
  fn right(&self) -> GeneratedAtomRight {
    GeneratedAtomRight::from_ref(self.append("right"))
  }
  #[inline]
  fn right_(&self, value: &'static str) -> String {
    self.append(format!("right:[{}]", value.trim()))
  }
  /// Control the placement of positioned elements.
  #[inline]
  fn bottom(&self) -> GeneratedAtomBottom {
    GeneratedAtomBottom::from_ref(self.append("bottom"))
  }
  #[inline]
  fn bottom_(&self, value: &'static str) -> String {
    self.append(format!("bottom:[{}]", value.trim()))
  }
  /// Control the placement of positioned elements.
  #[inline]
  fn left(&self) -> GeneratedAtomLeft {
    GeneratedAtomLeft::from_ref(self.append("left"))
  }
  #[inline]
  fn left_(&self, value: &'static str) -> String {
    self.append(format!("left:[{}]", value.trim()))
  }
  /// Control the blur filters to an element.
  #[inline]
  fn blur(&self) -> GeneratedAtomBlur {
    GeneratedAtomBlur::from_ref(self.append("blur"))
  }
  #[inline]
  fn blur_(&self, value: &'static str) -> String {
    self.append(format!("blur:[{}]", value.trim()))
  }
  /// Control the brightness filters to an element.
  #[inline]
  fn brightness(&self) -> GeneratedAtomBrightness {
    GeneratedAtomBrightness::from_ref(self.append("brightness"))
  }
  #[inline]
  fn brightness_(&self, value: &'static str) -> String {
    self.append(format!("brightness:[{}]", value.trim()))
  }
  /// Control the contrast filters to an element.
  #[inline]
  fn contrast(&self) -> GeneratedAtomContrast {
    GeneratedAtomContrast::from_ref(self.append("contrast"))
  }
  #[inline]
  fn contrast_(&self, value: &'static str) -> String {
    self.append(format!("contrast:[{}]", value.trim()))
  }
  /// Control the grayscale filters to an element.
  #[inline]
  fn grayscale(&self) -> GeneratedAtomGrayscale {
    GeneratedAtomGrayscale::from_ref(self.append("grayscale"))
  }
  #[inline]
  fn grayscale_(&self, value: &'static str) -> String {
    self.append(format!("grayscale:[{}]", value.trim()))
  }
  /// Control the hue-rotate filters to an element.
  #[inline]
  fn hue_rotate(&self) -> GeneratedAtomHueRotate {
    GeneratedAtomHueRotate::from_ref(self.append("hue-rotate"))
  }
  #[inline]
  fn hue_rotate_(&self, value: &'static str) -> String {
    self.append(format!("hue-rotate:[{}]", value.trim()))
  }
  /// Control the invert filters to an element.
  #[inline]
  fn invert(&self) -> GeneratedAtomInvert {
    GeneratedAtomInvert::from_ref(self.append("invert"))
  }
  #[inline]
  fn invert_(&self, value: &'static str) -> String {
    self.append(format!("invert:[{}]", value.trim()))
  }
  /// Control the saturate filters to an element.
  #[inline]
  fn saturate(&self) -> GeneratedAtomSaturate {
    GeneratedAtomSaturate::from_ref(self.append("saturate"))
  }
  #[inline]
  fn saturate_(&self, value: &'static str) -> String {
    self.append(format!("saturate:[{}]", value.trim()))
  }
  /// Control the sepia filters to an element.
  #[inline]
  fn sepia(&self) -> GeneratedAtomSepia {
    GeneratedAtomSepia::from_ref(self.append("sepia"))
  }
  #[inline]
  fn sepia_(&self, value: &'static str) -> String {
    self.append(format!("sepia:[{}]", value.trim()))
  }
  /// Control the drop-shadow filters to an element.
  #[inline]
  fn drop_shadow(&self) -> GeneratedAtomDropShadow {
    GeneratedAtomDropShadow::from_ref(self.append("drop-shadow"))
  }
  #[inline]
  fn drop_shadow_(&self, value: &'static str) -> String {
    self.append(format!("drop-shadow:[{}]", value.trim()))
  }
  /// Control the custom filters to an element.
  #[inline]
  fn custom(&self) -> GeneratedAtomCustom {
    GeneratedAtomCustom::from_ref(self.append("custom"))
  }
  #[inline]
  fn custom_(&self, value: &'static str) -> String {
    self.append(format!("custom:[{}]", value.trim()))
  }
  /// Control the filters to an element.
  #[inline]
  fn filter(&self) -> GeneratedAtomFilter {
    GeneratedAtomFilter::from_ref(self.append("filter"))
  }
  #[inline]
  fn filter_(&self, value: &'static str) -> String {
    self.append(format!("filter:[{}]", value.trim()))
  }
  /// Control the backdrop-blur filters to an element.
  #[inline]
  fn backdrop_blur(&self) -> GeneratedAtomBackdropBlur {
    GeneratedAtomBackdropBlur::from_ref(self.append("backdrop-blur"))
  }
  #[inline]
  fn backdrop_blur_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-blur:[{}]", value.trim()))
  }
  /// Control the backdrop-brightness filters to an element.
  #[inline]
  fn backdrop_brightness(&self) -> GeneratedAtomBackdropBrightness {
    GeneratedAtomBackdropBrightness::from_ref(self.append("backdrop-brightness"))
  }
  #[inline]
  fn backdrop_brightness_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-brightness:[{}]", value.trim()))
  }
  /// Control the backdrop-contrast filters to an element.
  #[inline]
  fn backdrop_contrast(&self) -> GeneratedAtomBackdropContrast {
    GeneratedAtomBackdropContrast::from_ref(self.append("backdrop-contrast"))
  }
  #[inline]
  fn backdrop_contrast_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-contrast:[{}]", value.trim()))
  }
  /// Control the backdrop-grayscale filters to an element.
  #[inline]
  fn backdrop_grayscale(&self) -> GeneratedAtomBackdropGrayscale {
    GeneratedAtomBackdropGrayscale::from_ref(self.append("backdrop-grayscale"))
  }
  #[inline]
  fn backdrop_grayscale_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-grayscale:[{}]", value.trim()))
  }
  /// Control the backdrop-hue-rotate filters to an element.
  #[inline]
  fn backdrop_hue_rotate(&self) -> GeneratedAtomBackdropHueRotate {
    GeneratedAtomBackdropHueRotate::from_ref(self.append("backdrop-hue-rotate"))
  }
  #[inline]
  fn backdrop_hue_rotate_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-hue-rotate:[{}]", value.trim()))
  }
  /// Control the backdrop-invert filters to an element.
  #[inline]
  fn backdrop_invert(&self) -> GeneratedAtomBackdropInvert {
    GeneratedAtomBackdropInvert::from_ref(self.append("backdrop-invert"))
  }
  #[inline]
  fn backdrop_invert_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-invert:[{}]", value.trim()))
  }
  /// Control the backdrop-saturate filters to an element.
  #[inline]
  fn backdrop_saturate(&self) -> GeneratedAtomBackdropSaturate {
    GeneratedAtomBackdropSaturate::from_ref(self.append("backdrop-saturate"))
  }
  #[inline]
  fn backdrop_saturate_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-saturate:[{}]", value.trim()))
  }
  /// Control the backdrop-sepia filters to an element.
  #[inline]
  fn backdrop_sepia(&self) -> GeneratedAtomBackdropSepia {
    GeneratedAtomBackdropSepia::from_ref(self.append("backdrop-sepia"))
  }
  #[inline]
  fn backdrop_sepia_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-sepia:[{}]", value.trim()))
  }
  /// Control the backdrop-drop-shadow filters to an element.
  #[inline]
  fn backdrop_drop_shadow(&self) -> GeneratedAtomBackdropDropShadow {
    GeneratedAtomBackdropDropShadow::from_ref(self.append("backdrop-drop-shadow"))
  }
  #[inline]
  fn backdrop_drop_shadow_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-drop-shadow:[{}]", value.trim()))
  }
  /// Control the backdrop-custom filters to an element.
  #[inline]
  fn backdrop_custom(&self) -> GeneratedAtomBackdropCustom {
    GeneratedAtomBackdropCustom::from_ref(self.append("backdrop-custom"))
  }
  #[inline]
  fn backdrop_custom_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-custom:[{}]", value.trim()))
  }
  /// Control the backdrop-filters to an element.
  #[inline]
  fn backdrop_filter(&self) -> GeneratedAtomBackdropFilter {
    GeneratedAtomBackdropFilter::from_ref(self.append("backdrop-filter"))
  }
  #[inline]
  fn backdrop_filter_(&self, value: &'static str) -> String {
    self.append(format!("backdrop-filter:[{}]", value.trim()))
  }
}
pub trait GeneratedNamedClasses: GeneratedSkribbleValue {
  #[inline]
  fn group(&self) -> String {
    self.append_value("group")
  }
  #[inline]
  fn contained(&self) -> String {
    self.append_value("contained")
  }
  #[inline]
  fn italic(&self) -> String {
    self.append_value("italic")
  }
  #[inline]
  fn non_italic(&self) -> String {
    self.append_value("non-italic")
  }
  #[inline]
  fn oblique(&self) -> String {
    self.append_value("oblique")
  }
  #[inline]
  fn antialiased(&self) -> String {
    self.append_value("antialiased")
  }
  #[inline]
  fn subpixel_antialiased(&self) -> String {
    self.append_value("subpixel-antialiased")
  }
  #[inline]
  fn invisible(&self) -> String {
    self.append_value("invisible")
  }
  #[inline]
  fn visible(&self) -> String {
    self.append_value("visible")
  }
  #[inline]
  fn transform_gpu(&self) -> String {
    self.append_value("transform-gpu")
  }
  #[inline]
  fn transform_cpu(&self) -> String {
    self.append_value("transform-cpu")
  }
  #[inline]
  fn space_x_reverse(&self) -> String {
    self.append_value("space-x-reverse")
  }
  #[inline]
  fn space_y_reverse(&self) -> String {
    self.append_value("space-y-reverse")
  }
}
pub trait GeneratedAliases: GeneratedSkribbleValue {
  #[inline]
  fn block(&self) -> String {
    ["display:$block"].map(|class| self.append(class)).join(" ")
  }
  #[inline]
  fn inline_block(&self) -> String {
    ["display:$inline-block"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn inline(&self) -> String {
    ["display:$inline"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn flex(&self) -> String {
    ["display:$flex"].map(|class| self.append(class)).join(" ")
  }
  #[inline]
  fn inline_flex(&self) -> String {
    ["display:$inline-flex"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn table(&self) -> String {
    ["display:$table"].map(|class| self.append(class)).join(" ")
  }
  #[inline]
  fn inline_table(&self) -> String {
    ["display:$inline-table"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn table_caption(&self) -> String {
    ["display:$table-caption"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn table_cell(&self) -> String {
    ["display:$table-cell"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn table_column(&self) -> String {
    ["display:$table-column"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn table_column_group(&self) -> String {
    ["display:$table-column-group"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn table_footer_group(&self) -> String {
    ["display:$table-footer-group"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn table_header_group(&self) -> String {
    ["display:$table-header-group"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn table_row_group(&self) -> String {
    ["display:$table-row-group"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn table_row(&self) -> String {
    ["display:$table-row"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn flow_root(&self) -> String {
    ["display:$flow-root"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn grid(&self) -> String {
    ["display:$grid"].map(|class| self.append(class)).join(" ")
  }
  #[inline]
  fn inline_grid(&self) -> String {
    ["display:$inline-grid"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn contents(&self) -> String {
    ["display:$contents"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn list_item(&self) -> String {
    ["display:$list-item"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn hidden(&self) -> String {
    ["display:$none"].map(|class| self.append(class)).join(" ")
  }
  #[inline]
  fn visible_1(&self) -> String {
    ["visibility:$visible"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn invisible_1(&self) -> String {
    ["visibility:$hidden"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn collapse(&self) -> String {
    ["visibility:$collapse"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn isolate_1(&self) -> String {
    ["isolate:$isolate"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn r#static(&self) -> String {
    ["position:$static"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn fixed(&self) -> String {
    ["position:$fixed"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn absolute(&self) -> String {
    ["position:$absolute"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn relative(&self) -> String {
    ["position:$relative"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn sticky(&self) -> String {
    ["position:$sticky"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn blur_1(&self) -> String {
    ["blur:$default"].map(|class| self.append(class)).join(" ")
  }
  #[inline]
  fn drop_shadow_1(&self) -> String {
    ["drop-shadow:$default"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn grayscale_1(&self) -> String {
    ["grayscale:$default"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn invert_1(&self) -> String {
    ["invert:$default"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn sepia_1(&self) -> String {
    ["sepia:$default"].map(|class| self.append(class)).join(" ")
  }
  #[inline]
  fn filter_none(&self) -> String {
    ["filter:$none"].map(|class| self.append(class)).join(" ")
  }
  #[inline]
  fn backdrop_blur_1(&self) -> String {
    ["backdrop-blur:$default"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn backdrop_drop_shadow_1(&self) -> String {
    ["backdrop-drop-shadow:$default"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn backdrop_grayscale_1(&self) -> String {
    ["backdrop-grayscale:$default"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn backdrop_invert_1(&self) -> String {
    ["backdrop-invert:$default"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn backdrop_sepia_1(&self) -> String {
    ["backdrop-sepia:$default"]
      .map(|class| self.append(class))
      .join(" ")
  }
  #[inline]
  fn backdrop_filter_none(&self) -> String {
    ["backdrop-filter:$none"]
      .map(|class| self.append(class))
      .join(" ")
  }
}
impl GeneratedMediaQueryDeviceCategories for GeneratedSkribbleRoot {}
impl GeneratedMediaQueryBreakpoints for GeneratedSkribbleRoot {}
impl GeneratedMediaQueryOrientation for GeneratedSkribbleRoot {}
impl GeneratedMediaQueryMotion for GeneratedSkribbleRoot {}
impl GeneratedMediaQueryDarkMode for GeneratedSkribbleRoot {}
impl GeneratedModifierParentGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierHoverGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierActiveGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierFocusGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierFocusWithinGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierFocusVisibleGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierEnabledGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierEmptyGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierReadGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierCheckedGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierValidGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierAutofillGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierEvenGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierNodePositionGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierVisitedGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierOptionalGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierAria for GeneratedSkribbleRoot {}
impl GeneratedModifierFullScreenGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierTargetGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierRequiredGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierDefaultGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierOnlyChildGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierOnlyGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierRootGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierLinkGroup for GeneratedSkribbleRoot {}
impl GeneratedModifierPseudoGroup for GeneratedSkribbleRoot {}
impl GeneratedAtom for GeneratedSkribbleRoot {}
impl GeneratedNamedClasses for GeneratedSkribbleRoot {}
impl GeneratedAliases for GeneratedSkribbleRoot {}
impl GeneratedMediaQueryBreakpoints for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedMediaQueryOrientation for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedMediaQueryMotion for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedMediaQueryDarkMode for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierParentGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierHoverGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierActiveGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierFocusGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierFocusWithinGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierEnabledGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierEmptyGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierReadGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierCheckedGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierValidGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierAutofillGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierEvenGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierNodePositionGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierVisitedGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierOptionalGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierAria for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierFullScreenGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierTargetGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierRequiredGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierDefaultGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierOnlyGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierRootGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierLinkGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedModifierPseudoGroup for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedAtom for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedNamedClasses for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedAliases for GeneratedMediaQueryDeviceCategoriesChild {}
impl GeneratedMediaQueryOrientation for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedMediaQueryMotion for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedMediaQueryDarkMode for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierParentGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierHoverGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierActiveGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierFocusGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierFocusWithinGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierEnabledGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierEmptyGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierReadGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierCheckedGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierValidGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierAutofillGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierEvenGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierNodePositionGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierVisitedGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierOptionalGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierAria for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierFullScreenGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierTargetGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierRequiredGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierDefaultGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierOnlyGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierRootGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierLinkGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedModifierPseudoGroup for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedAtom for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedNamedClasses for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedAliases for GeneratedMediaQueryBreakpointsChild {}
impl GeneratedMediaQueryMotion for GeneratedMediaQueryOrientationChild {}
impl GeneratedMediaQueryDarkMode for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierParentGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierHoverGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierActiveGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierFocusGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierFocusWithinGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierEnabledGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierEmptyGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierReadGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierCheckedGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierValidGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierAutofillGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierEvenGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierNodePositionGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierVisitedGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierOptionalGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierAria for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierFullScreenGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierTargetGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierRequiredGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierDefaultGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierOnlyGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierRootGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierLinkGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedModifierPseudoGroup for GeneratedMediaQueryOrientationChild {}
impl GeneratedAtom for GeneratedMediaQueryOrientationChild {}
impl GeneratedNamedClasses for GeneratedMediaQueryOrientationChild {}
impl GeneratedAliases for GeneratedMediaQueryOrientationChild {}
impl GeneratedMediaQueryDarkMode for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierParentGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierHoverGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierActiveGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierFocusGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierFocusWithinGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierEnabledGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierEmptyGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierReadGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierCheckedGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierValidGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierAutofillGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierEvenGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierNodePositionGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierVisitedGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierOptionalGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierAria for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierFullScreenGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierTargetGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierRequiredGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierDefaultGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierOnlyGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierRootGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierLinkGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierPseudoGroup for GeneratedMediaQueryMotionChild {}
impl GeneratedAtom for GeneratedMediaQueryMotionChild {}
impl GeneratedNamedClasses for GeneratedMediaQueryMotionChild {}
impl GeneratedAliases for GeneratedMediaQueryMotionChild {}
impl GeneratedModifierParentGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierHoverGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierActiveGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierFocusGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierFocusWithinGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierEnabledGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierEmptyGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierReadGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierCheckedGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierValidGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierAutofillGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierEvenGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierNodePositionGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierVisitedGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierOptionalGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierAria for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierFullScreenGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierTargetGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierRequiredGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierDefaultGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierOnlyGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierRootGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierLinkGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierPseudoGroup for GeneratedMediaQueryDarkModeChild {}
impl GeneratedAtom for GeneratedMediaQueryDarkModeChild {}
impl GeneratedNamedClasses for GeneratedMediaQueryDarkModeChild {}
impl GeneratedAliases for GeneratedMediaQueryDarkModeChild {}
impl GeneratedModifierHoverGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierActiveGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierFocusGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierFocusWithinGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierEnabledGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierEmptyGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierReadGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierCheckedGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierAria for GeneratedModifierParentGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierParentGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierParentGroupChild {}
impl GeneratedAtom for GeneratedModifierParentGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierParentGroupChild {}
impl GeneratedAliases for GeneratedModifierParentGroupChild {}
impl GeneratedModifierActiveGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierFocusGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierFocusWithinGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierEnabledGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierEmptyGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierReadGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierCheckedGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierAria for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierHoverGroupChild {}
impl GeneratedAtom for GeneratedModifierHoverGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierHoverGroupChild {}
impl GeneratedAliases for GeneratedModifierHoverGroupChild {}
impl GeneratedModifierFocusGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierFocusWithinGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierEnabledGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierEmptyGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierReadGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierCheckedGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierAria for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierActiveGroupChild {}
impl GeneratedAtom for GeneratedModifierActiveGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierActiveGroupChild {}
impl GeneratedAliases for GeneratedModifierActiveGroupChild {}
impl GeneratedModifierFocusWithinGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierEnabledGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierEmptyGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierReadGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierCheckedGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierAria for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierFocusGroupChild {}
impl GeneratedAtom for GeneratedModifierFocusGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierFocusGroupChild {}
impl GeneratedAliases for GeneratedModifierFocusGroupChild {}
impl GeneratedModifierFocusVisibleGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierEnabledGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierEmptyGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierReadGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierCheckedGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierAria for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedAtom for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedAliases for GeneratedModifierFocusWithinGroupChild {}
impl GeneratedModifierEnabledGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierEmptyGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierReadGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierCheckedGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierAria for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedAtom for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedAliases for GeneratedModifierFocusVisibleGroupChild {}
impl GeneratedModifierEmptyGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierReadGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierCheckedGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierAria for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierEnabledGroupChild {}
impl GeneratedAtom for GeneratedModifierEnabledGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierEnabledGroupChild {}
impl GeneratedAliases for GeneratedModifierEnabledGroupChild {}
impl GeneratedModifierReadGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierCheckedGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierAria for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierEmptyGroupChild {}
impl GeneratedAtom for GeneratedModifierEmptyGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierEmptyGroupChild {}
impl GeneratedAliases for GeneratedModifierEmptyGroupChild {}
impl GeneratedModifierCheckedGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierAria for GeneratedModifierReadGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierReadGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierReadGroupChild {}
impl GeneratedAtom for GeneratedModifierReadGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierReadGroupChild {}
impl GeneratedAliases for GeneratedModifierReadGroupChild {}
impl GeneratedModifierValidGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierAria for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierCheckedGroupChild {}
impl GeneratedAtom for GeneratedModifierCheckedGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierCheckedGroupChild {}
impl GeneratedAliases for GeneratedModifierCheckedGroupChild {}
impl GeneratedModifierAutofillGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierAria for GeneratedModifierValidGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierValidGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierValidGroupChild {}
impl GeneratedAtom for GeneratedModifierValidGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierValidGroupChild {}
impl GeneratedAliases for GeneratedModifierValidGroupChild {}
impl GeneratedModifierEvenGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierAria for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierAutofillGroupChild {}
impl GeneratedAtom for GeneratedModifierAutofillGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierAutofillGroupChild {}
impl GeneratedAliases for GeneratedModifierAutofillGroupChild {}
impl GeneratedModifierNodePositionGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierAria for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierEvenGroupChild {}
impl GeneratedAtom for GeneratedModifierEvenGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierEvenGroupChild {}
impl GeneratedAliases for GeneratedModifierEvenGroupChild {}
impl GeneratedModifierNodeOfTypeGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierAria for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierNodePositionGroupChild {}
impl GeneratedAtom for GeneratedModifierNodePositionGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierNodePositionGroupChild {}
impl GeneratedAliases for GeneratedModifierNodePositionGroupChild {}
impl GeneratedModifierVisitedGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierAria for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedAtom for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedAliases for GeneratedModifierNodeOfTypeGroupChild {}
impl GeneratedModifierOptionalGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierAria for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierVisitedGroupChild {}
impl GeneratedAtom for GeneratedModifierVisitedGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierVisitedGroupChild {}
impl GeneratedAliases for GeneratedModifierVisitedGroupChild {}
impl GeneratedModifierAria for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierOptionalGroupChild {}
impl GeneratedAtom for GeneratedModifierOptionalGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierOptionalGroupChild {}
impl GeneratedAliases for GeneratedModifierOptionalGroupChild {}
impl GeneratedModifierFullScreenGroup for GeneratedModifierAriaChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierAriaChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierAriaChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierAriaChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierAriaChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierAriaChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierAriaChild {}
impl GeneratedModifierRootGroup for GeneratedModifierAriaChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierAriaChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierAriaChild {}
impl GeneratedAtom for GeneratedModifierAriaChild {}
impl GeneratedNamedClasses for GeneratedModifierAriaChild {}
impl GeneratedAliases for GeneratedModifierAriaChild {}
impl GeneratedModifierTargetGroup for GeneratedModifierFullScreenGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierFullScreenGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierFullScreenGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierFullScreenGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierFullScreenGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierFullScreenGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierFullScreenGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierFullScreenGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierFullScreenGroupChild {}
impl GeneratedAtom for GeneratedModifierFullScreenGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierFullScreenGroupChild {}
impl GeneratedAliases for GeneratedModifierFullScreenGroupChild {}
impl GeneratedModifierPlaceholderShownGroup for GeneratedModifierTargetGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierTargetGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierTargetGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierTargetGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierTargetGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierTargetGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierTargetGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierTargetGroupChild {}
impl GeneratedAtom for GeneratedModifierTargetGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierTargetGroupChild {}
impl GeneratedAliases for GeneratedModifierTargetGroupChild {}
impl GeneratedModifierRequiredGroup for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedAtom for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedAliases for GeneratedModifierPlaceholderShownGroupChild {}
impl GeneratedModifierDefaultGroup for GeneratedModifierRequiredGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierRequiredGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierRequiredGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierRequiredGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierRequiredGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierRequiredGroupChild {}
impl GeneratedAtom for GeneratedModifierRequiredGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierRequiredGroupChild {}
impl GeneratedAliases for GeneratedModifierRequiredGroupChild {}
impl GeneratedModifierOnlyChildGroup for GeneratedModifierDefaultGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierDefaultGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierDefaultGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierDefaultGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierDefaultGroupChild {}
impl GeneratedAtom for GeneratedModifierDefaultGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierDefaultGroupChild {}
impl GeneratedAliases for GeneratedModifierDefaultGroupChild {}
impl GeneratedModifierOnlyGroup for GeneratedModifierOnlyChildGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierOnlyChildGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierOnlyChildGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierOnlyChildGroupChild {}
impl GeneratedAtom for GeneratedModifierOnlyChildGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierOnlyChildGroupChild {}
impl GeneratedAliases for GeneratedModifierOnlyChildGroupChild {}
impl GeneratedModifierRootGroup for GeneratedModifierOnlyGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierOnlyGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierOnlyGroupChild {}
impl GeneratedAtom for GeneratedModifierOnlyGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierOnlyGroupChild {}
impl GeneratedAliases for GeneratedModifierOnlyGroupChild {}
impl GeneratedModifierLinkGroup for GeneratedModifierRootGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierRootGroupChild {}
impl GeneratedAtom for GeneratedModifierRootGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierRootGroupChild {}
impl GeneratedAliases for GeneratedModifierRootGroupChild {}
impl GeneratedModifierPseudoGroup for GeneratedModifierLinkGroupChild {}
impl GeneratedAtom for GeneratedModifierLinkGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierLinkGroupChild {}
impl GeneratedAliases for GeneratedModifierLinkGroupChild {}
impl GeneratedAtom for GeneratedModifierPseudoGroupChild {}
impl GeneratedNamedClasses for GeneratedModifierPseudoGroupChild {}
impl GeneratedAliases for GeneratedModifierPseudoGroupChild {}
