// This file was generated by skribble.
use private::SkribbleValue;
pub fn sk() -> SkribbleRoot {
  SkribbleRoot::from_ref("")
}
pub struct SkribbleRoot(String);
impl SkribbleValue for SkribbleRoot {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
mod private {
  #[doc(hidden)]
  pub trait SkribbleValue {
    fn from_ref(value: impl AsRef<str>) -> Self;
    fn get_skribble_value(&self) -> &String;
    #[inline]
    fn append_to_skribble_value(&self, value: impl AsRef<str>) -> String {
      let current_value = self.get_skribble_value();
      let prefix = if current_value.is_empty() {
        "".into()
      } else {
        format!("{current_value}:")
      };

      format!("{}{}", prefix, value.as_ref())
    }
    #[inline]
    fn append_string_to_skribble_value(&self, value: impl AsRef<str>) -> String {
      format!("{}:${}", self.get_skribble_value(), value.as_ref())
    }
  }
}
pub fn vars() -> CssVariables {
  CssVariables
}
pub struct CssVariables;
impl CssVariables {
  /// The primary color. Useful for primary buttons.
  ///
  /// ```css
  /// @property --sk-p {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #570df8;
  /// }
  /// ```
  #[inline]
  pub fn primary(&self) -> String {
    "--sk-p".into()
  }

  /// The primary content color
  ///
  /// ```css
  /// @property --sk-pc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  pub fn primary_content(&self) -> String {
    "--sk-pc".into()
  }

  /// The secondary color. Useful for secondary buttons.
  ///
  /// ```css
  /// @property --sk-s {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #f000b8;
  /// }
  /// ```
  #[inline]
  pub fn secondary(&self) -> String {
    "--sk-s".into()
  }

  /// The secondary content color. Useful for text within secondary buttons.
  ///
  /// ```css
  /// @property --sk-sc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  pub fn secondary_content(&self) -> String {
    "--sk-sc".into()
  }

  /// Color for accents.
  ///
  /// ```css
  /// @property --sk-a {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #37cdbe;
  /// }
  /// ```
  #[inline]
  pub fn accent(&self) -> String {
    "--sk-a".into()
  }

  /// Color for content within accents.
  ///
  /// ```css
  /// @property --sk-ac {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #163835;
  /// }
  /// ```
  #[inline]
  pub fn accent_content(&self) -> String {
    "--sk-ac".into()
  }

  /// The neutral color.
  ///
  /// ```css
  /// @property --sk-n {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #3d4451;
  /// }
  /// ```
  #[inline]
  pub fn neutral(&self) -> String {
    "--sk-n".into()
  }

  /// The neutral content color.
  ///
  /// ```css
  /// @property --sk-nc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  pub fn neutral_content(&self) -> String {
    "--sk-nc".into()
  }

  /// The base color.
  ///
  /// ```css
  /// @property --sk-b1 {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  pub fn base100(&self) -> String {
    "--sk-b1".into()
  }

  /// The secondary base color.
  ///
  /// ```css
  /// @property --sk-b2 {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #F2F2F2;
  /// }
  /// ```
  #[inline]
  pub fn base200(&self) -> String {
    "--sk-b2".into()
  }

  /// The tertiary base color.
  ///
  /// ```css
  /// @property --sk-b3 {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #E5E6E6;
  /// }
  /// ```
  #[inline]
  pub fn base300(&self) -> String {
    "--sk-b3".into()
  }

  /// The base content color. This is useful for text.
  ///
  /// ```css
  /// @property --sk-bc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #1f2937;
  /// }
  /// ```
  #[inline]
  pub fn base_content(&self) -> String {
    "--sk-bc".into()
  }

  /// The info color. Useful for info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-in {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #0070F3;
  /// }
  /// ```
  #[inline]
  pub fn info(&self) -> String {
    "--sk-in".into()
  }

  /// The info content color. Useful for text within info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-inc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  pub fn info_content(&self) -> String {
    "--sk-inc".into()
  }

  /// The success color. Useful for success buttons and alerts.
  ///
  /// ```css
  /// @property --sk-su {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #21CC51;
  /// }
  /// ```
  #[inline]
  pub fn success(&self) -> String {
    "--sk-su".into()
  }

  /// The success content color. Useful for text within success buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-suc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  pub fn success_content(&self) -> String {
    "--sk-suc".into()
  }

  /// The warning color. Useful for warning buttons and alerts.
  ///
  /// ```css
  /// @property --sk-wa {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #FF6154;
  /// }
  /// ```
  #[inline]
  pub fn warning(&self) -> String {
    "--sk-wa".into()
  }

  /// The warning content color. Useful for text within warning buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-wac {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  pub fn warning_content(&self) -> String {
    "--sk-wac".into()
  }

  /// The error color. Useful for error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-er {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #DE1C8D;
  /// }
  /// ```
  #[inline]
  pub fn error(&self) -> String {
    "--sk-er".into()
  }

  /// The error content color. Useful for text within error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-erc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  pub fn error_content(&self) -> String {
    "--sk-erc".into()
  }

  /// ```css
  /// @property --sk-container-max-width {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: container;
  /// }
  /// ```
  #[inline]
  pub fn container_max_width(&self) -> String {
    "--sk-container-max-width".into()
  }

  /// ```css
  /// @property --sk-empty {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn empty(&self) -> String {
    "--sk-empty".into()
  }

  /// ```css
  /// @property --sk-filter-blur {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_blur(&self) -> String {
    "--sk-filter-blur".into()
  }

  /// ```css
  /// @property --sk-filter-brightness {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_brightness(&self) -> String {
    "--sk-filter-brightness".into()
  }

  /// ```css
  /// @property --sk-filter-contrast {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_contrast(&self) -> String {
    "--sk-filter-contrast".into()
  }

  /// ```css
  /// @property --sk-filter-custom {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_custom(&self) -> String {
    "--sk-filter-custom".into()
  }

  /// ```css
  /// @property --sk-filter-grayscale {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_grayscale(&self) -> String {
    "--sk-filter-grayscale".into()
  }

  /// ```css
  /// @property --sk-filter-hue-rotate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_hue_rotate(&self) -> String {
    "--sk-filter-hue-rotate".into()
  }

  /// ```css
  /// @property --sk-filter-invert {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_invert(&self) -> String {
    "--sk-filter-invert".into()
  }

  /// ```css
  /// @property --sk-filter-saturate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_saturate(&self) -> String {
    "--sk-filter-saturate".into()
  }

  /// ```css
  /// @property --sk-filter-sepia {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_sepia(&self) -> String {
    "--sk-filter-sepia".into()
  }

  /// ```css
  /// @property --sk-filter-drop-shadow {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn filter_drop_shadow(&self) -> String {
    "--sk-filter-drop-shadow".into()
  }

  /// ```css
  /// @property --sk-group-nested-filter {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: var(__CSS_VARIABLE::filterBlur__) var(__CSS_VARIABLE::filterBrightness__) var(__CSS_VARIABLE::filterContrast__) var(__CSS_VARIABLE::filterGrayscale__) var(__CSS_VARIABLE::filterHueRotate__) var(__CSS_VARIABLE::filterInvert__) var(__CSS_VARIABLE::filterSaturate__) var(__CSS_VARIABLE::filterSepia__) var(__CSS_VARIABLE::filterDropShadow__) var(__CSS_VARIABLE::filterCustom__);
  /// }
  /// ```
  #[inline]
  pub fn group_nested_filter(&self) -> String {
    "--sk-group-nested-filter".into()
  }

  /// ```css
  /// @property --sk-backdrop-blur {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_blur(&self) -> String {
    "--sk-backdrop-blur".into()
  }

  /// ```css
  /// @property --sk-backdrop-brightness {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_brightness(&self) -> String {
    "--sk-backdrop-brightness".into()
  }

  /// ```css
  /// @property --sk-backdrop-contrast {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_contrast(&self) -> String {
    "--sk-backdrop-contrast".into()
  }

  /// ```css
  /// @property --sk-backdrop-custom {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_custom(&self) -> String {
    "--sk-backdrop-custom".into()
  }

  /// ```css
  /// @property --sk-backdrop-grayscale {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_grayscale(&self) -> String {
    "--sk-backdrop-grayscale".into()
  }

  /// ```css
  /// @property --sk-backdrop-hue-rotate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_hue_rotate(&self) -> String {
    "--sk-backdrop-hue-rotate".into()
  }

  /// ```css
  /// @property --sk-backdrop-invert {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_invert(&self) -> String {
    "--sk-backdrop-invert".into()
  }

  /// ```css
  /// @property --sk-backdrop-saturate {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_saturate(&self) -> String {
    "--sk-backdrop-saturate".into()
  }

  /// ```css
  /// @property --sk-backdrop-sepia {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_sepia(&self) -> String {
    "--sk-backdrop-sepia".into()
  }

  /// ```css
  /// @property --sk-backdrop-drop-shadow {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn backdrop_drop_shadow(&self) -> String {
    "--sk-backdrop-drop-shadow".into()
  }

  /// ```css
  /// @property --sk-group-nested-backdrop {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: var(__CSS_VARIABLE::backdropBlur__) var(__CSS_VARIABLE::backdropBrightness__) var(__CSS_VARIABLE::backdropContrast__) var(__CSS_VARIABLE::backdropGrayscale__) var(__CSS_VARIABLE::backdropHueRotate__) var(__CSS_VARIABLE::backdropInvert__) var(__CSS_VARIABLE::backdropSaturate__) var(__CSS_VARIABLE::backdropSepia__) var(__CSS_VARIABLE::backdropDropShadow__) var(__CSS_VARIABLE::backdropCustom__);
  /// }
  /// ```
  #[inline]
  pub fn group_nested_backdrop(&self) -> String {
    "--sk-group-nested-backdrop".into()
  }

  /// ```css
  /// @property --sk-default-transition-duration {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: 150ms;
  /// }
  /// ```
  #[inline]
  pub fn default_transition_duration(&self) -> String {
    "--sk-default-transition-duration".into()
  }

  /// ```css
  /// @property --sk-default-animation-duration {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: 1s;
  /// }
  /// ```
  #[inline]
  pub fn default_animation_duration(&self) -> String {
    "--sk-default-animation-duration".into()
  }

  /// ```css
  /// @property --sk-etx {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn enter_translate_x(&self) -> String {
    "--sk-etx".into()
  }

  /// ```css
  /// @property --sk-ety {
  ///   syntax: "*";
  ///   inherits: false;
  ///   initial-value: /* */;
  /// }
  /// ```
  #[inline]
  pub fn enter_translate_y(&self) -> String {
    "--sk-ety".into()
  }
}
pub trait Color: SkribbleValue {
  /// The primary color. Useful for primary buttons.
  ///
  /// ```css
  /// @property --sk-p {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #570df8;
  /// }
  /// ```
  #[inline]
  fn primary(&self) -> String {
    self.append_string_to_skribble_value("primary")
  }
  /// The primary content color
  ///
  /// ```css
  /// @property --sk-pc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  fn primary_content(&self) -> String {
    self.append_string_to_skribble_value("primaryContent")
  }
  /// The secondary color. Useful for secondary buttons.
  ///
  /// ```css
  /// @property --sk-s {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #f000b8;
  /// }
  /// ```
  #[inline]
  fn secondary(&self) -> String {
    self.append_string_to_skribble_value("secondary")
  }
  /// The secondary content color. Useful for text within secondary buttons.
  ///
  /// ```css
  /// @property --sk-sc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  fn secondary_content(&self) -> String {
    self.append_string_to_skribble_value("secondaryContent")
  }
  /// Color for accents.
  ///
  /// ```css
  /// @property --sk-a {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #37cdbe;
  /// }
  /// ```
  #[inline]
  fn accent(&self) -> String {
    self.append_string_to_skribble_value("accent")
  }
  /// Color for content within accents.
  ///
  /// ```css
  /// @property --sk-ac {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #163835;
  /// }
  /// ```
  #[inline]
  fn accent_content(&self) -> String {
    self.append_string_to_skribble_value("accentContent")
  }
  /// The neutral color.
  ///
  /// ```css
  /// @property --sk-n {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #3d4451;
  /// }
  /// ```
  #[inline]
  fn neutral(&self) -> String {
    self.append_string_to_skribble_value("neutral")
  }
  /// The neutral content color.
  ///
  /// ```css
  /// @property --sk-nc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  fn neutral_content(&self) -> String {
    self.append_string_to_skribble_value("neutralContent")
  }
  /// The base color.
  ///
  /// ```css
  /// @property --sk-b1 {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  fn base100(&self) -> String {
    self.append_string_to_skribble_value("base100")
  }
  /// The secondary base color.
  ///
  /// ```css
  /// @property --sk-b2 {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #F2F2F2;
  /// }
  /// ```
  #[inline]
  fn base200(&self) -> String {
    self.append_string_to_skribble_value("base200")
  }
  /// The tertiary base color.
  ///
  /// ```css
  /// @property --sk-b3 {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #E5E6E6;
  /// }
  /// ```
  #[inline]
  fn base300(&self) -> String {
    self.append_string_to_skribble_value("base300")
  }
  /// The base content color. This is useful for text.
  ///
  /// ```css
  /// @property --sk-bc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #1f2937;
  /// }
  /// ```
  #[inline]
  fn base_content(&self) -> String {
    self.append_string_to_skribble_value("baseContent")
  }
  /// The info color. Useful for info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-in {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #0070F3;
  /// }
  /// ```
  #[inline]
  fn info(&self) -> String {
    self.append_string_to_skribble_value("info")
  }
  /// The info content color. Useful for text within info buttons and alerts.
  ///
  /// ```css
  /// @property --sk-inc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  fn info_content(&self) -> String {
    self.append_string_to_skribble_value("infoContent")
  }
  /// The success color. Useful for success buttons and alerts.
  ///
  /// ```css
  /// @property --sk-su {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #21CC51;
  /// }
  /// ```
  #[inline]
  fn success(&self) -> String {
    self.append_string_to_skribble_value("success")
  }
  /// The success content color. Useful for text within success buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-suc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  fn success_content(&self) -> String {
    self.append_string_to_skribble_value("successContent")
  }
  /// The warning color. Useful for warning buttons and alerts.
  ///
  /// ```css
  /// @property --sk-wa {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #FF6154;
  /// }
  /// ```
  #[inline]
  fn warning(&self) -> String {
    self.append_string_to_skribble_value("warning")
  }
  /// The warning content color. Useful for text within warning buttons and
  /// alerts.
  ///
  /// ```css
  /// @property --sk-wac {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  fn warning_content(&self) -> String {
    self.append_string_to_skribble_value("warningContent")
  }
  /// The error color. Useful for error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-er {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #DE1C8D;
  /// }
  /// ```
  #[inline]
  fn error(&self) -> String {
    self.append_string_to_skribble_value("error")
  }
  /// The error content color. Useful for text within error buttons and alerts.
  ///
  /// ```css
  /// @property --sk-erc {
  ///   syntax: "<color>";
  ///   inherits: false;
  ///   initial-value: #ffffff;
  /// }
  /// ```
  #[inline]
  fn error_content(&self) -> String {
    self.append_string_to_skribble_value("errorContent")
  }
}
pub struct MediaQueryDeviceCategoriesChild(String);
impl SkribbleValue for MediaQueryDeviceCategoriesChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryDeviceCategories: SkribbleValue {
  /// The media query for devices with a screen.
  ///
  /// ```css
  /// @media screen {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn screen(&self) -> MediaQueryDeviceCategoriesChild {
    MediaQueryDeviceCategoriesChild::from_ref(self.append_to_skribble_value("screen"))
  }
  /// The media query for devices with a printer.
  ///
  /// ```css
  /// @media print {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn print(&self) -> MediaQueryDeviceCategoriesChild {
    MediaQueryDeviceCategoriesChild::from_ref(self.append_to_skribble_value("print"))
  }
}
pub struct MediaQueryBreakpointsChild(String);
impl SkribbleValue for MediaQueryBreakpointsChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryBreakpoints: SkribbleValue {
  /// The breakpoint for devices with screen size greater than tiny.
  ///
  /// ```css
  /// @media (min-width: 640px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn sm(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("sm"))
  }
  /// The breakpoint for devices screen size greater than medium
  ///
  /// ```css
  /// @media (min-width: 768px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn md(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("md"))
  }
  /// The breakpoint for devices screen size greater than large
  ///
  /// ```css
  /// @media (min-width: 1024px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn lg(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("lg"))
  }
  /// The breakpoint for devices screen size greater than extra large
  ///
  /// ```css
  /// @media (min-width: 1280px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn xl(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("xl"))
  }
  /// The breakpoint for devices screen size greater than xxl
  ///
  /// ```css
  /// @media (min-width: 1536px) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn xxl(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("xxl"))
  }
}
pub struct MediaQueryOrientationChild(String);
impl SkribbleValue for MediaQueryOrientationChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryOrientation: SkribbleValue {
  /// The media query for devices with a portrait orientation.
  ///
  /// ```css
  /// @media (orientation: portrait) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn portrait(&self) -> MediaQueryOrientationChild {
    MediaQueryOrientationChild::from_ref(self.append_to_skribble_value("portrait"))
  }
  /// The media query for devices with a landscape orientation.
  ///
  /// ```css
  /// @media (orientation: landscape) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn landscape(&self) -> MediaQueryOrientationChild {
    MediaQueryOrientationChild::from_ref(self.append_to_skribble_value("landscape"))
  }
}
pub struct MediaQueryMotionChild(String);
impl SkribbleValue for MediaQueryMotionChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryMotion: SkribbleValue {
  /// The media query for devices with a reduced motion preference.
  ///
  /// ```css
  /// @media (prefers-reduced-motion: reduce) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn motion_reduce(&self) -> MediaQueryMotionChild {
    MediaQueryMotionChild::from_ref(self.append_to_skribble_value("motionReduce"))
  }
  /// The media query for devices with a no preference motion preference.
  ///
  /// ```css
  /// @media (prefers-reduced-motion: no-preference) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn motion_safe(&self) -> MediaQueryMotionChild {
    MediaQueryMotionChild::from_ref(self.append_to_skribble_value("motionSafe"))
  }
}
pub struct MediaQueryDarkModeChild(String);
impl SkribbleValue for MediaQueryDarkModeChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait MediaQueryDarkMode: SkribbleValue {
  /// The media query for devices with a dark color scheme.
  ///
  /// ```css
  /// @media (prefers-color-scheme: dark) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn dark(&self) -> MediaQueryDarkModeChild {
    MediaQueryDarkModeChild::from_ref(self.append_to_skribble_value("dark"))
  }
  /// The media query for devices with a light color scheme.
  ///
  /// ```css
  /// @media (prefers-color-scheme: light) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn light(&self) -> MediaQueryDarkModeChild {
    MediaQueryDarkModeChild::from_ref(self.append_to_skribble_value("light"))
  }
}
pub struct ModifierParentGroupChild(String);
impl SkribbleValue for ModifierParentGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierParentGroup: SkribbleValue {
  /// This class modifier becomes active when when the text direction of any
  /// parent nodes is set to right to left.
  ///
  /// ```css
  /// [dir=rtl] & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn rtl(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("rtl"))
  }
  /// This class modifier becomes active when a parent group is hovered.
  ///
  /// ```css
  /// .\$group:hover &, .group:hover &, [role='group']:hover & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_hover(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("groupHover"))
  }
  /// This class modifier becomes active when a parent group is focused.
  ///
  /// ```css
  /// .\$group:focus &, .group:focus &, [role='group']:focus & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_focus(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("groupFocus"))
  }
  /// This class modifier becomes active when a parent group is active.
  ///
  /// ```css
  /// .\$group:active &, .group:active &, [role='group']:active & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_active(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("groupActive"))
  }
  /// This class modifier becomes active when a parent group is visited.
  ///
  /// ```css
  /// .\$group:visited &, .group:visited &, [role='group']:visited & {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn group_visited(&self) -> ModifierParentGroupChild {
    ModifierParentGroupChild::from_ref(self.append_to_skribble_value("groupVisited"))
  }
}
pub struct ModifierHoverGroupChild(String);
impl SkribbleValue for ModifierHoverGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierHoverGroup: SkribbleValue {
  /// This class modifier becomes active when the element is hovered.
  ///
  /// ```css
  /// &:hover {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn hover(&self) -> ModifierHoverGroupChild {
    ModifierHoverGroupChild::from_ref(self.append_to_skribble_value("hover"))
  }
}
pub struct ModifierActiveGroupChild(String);
impl SkribbleValue for ModifierActiveGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierActiveGroup: SkribbleValue {
  /// ```css
  /// &:active {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("active"))
  }
  /// ```css
  /// &[aria-current=page] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_link(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeLink"))
  }
  /// ```css
  /// &[aria-current=location] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_location(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeLocation"))
  }
  /// ```css
  /// &[aria-current=date] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_date(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeDate"))
  }
  /// ```css
  /// &[aria-current=time] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_time(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeTime"))
  }
  /// ```css
  /// &[aria-current=step] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn active_step(&self) -> ModifierActiveGroupChild {
    ModifierActiveGroupChild::from_ref(self.append_to_skribble_value("activeStep"))
  }
}
pub struct ModifierFocusGroupChild(String);
impl SkribbleValue for ModifierFocusGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierFocusGroup: SkribbleValue {
  /// ```css
  /// &:focus {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn focus(&self) -> ModifierFocusGroupChild {
    ModifierFocusGroupChild::from_ref(self.append_to_skribble_value("focus"))
  }
}
pub struct ModifierFocusWithinGroupChild(String);
impl SkribbleValue for ModifierFocusWithinGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierFocusWithinGroup: SkribbleValue {
  /// ```css
  /// &:focus-within {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn focus_within(&self) -> ModifierFocusWithinGroupChild {
    ModifierFocusWithinGroupChild::from_ref(self.append_to_skribble_value("focusWithin"))
  }
}
pub struct ModifierFocusVisibleGroupChild(String);
impl SkribbleValue for ModifierFocusVisibleGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierFocusVisibleGroup: SkribbleValue {
  /// ```css
  /// &:focus-visible {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn focus_visible(&self) -> ModifierFocusVisibleGroupChild {
    ModifierFocusVisibleGroupChild::from_ref(self.append_to_skribble_value("focusVisible"))
  }
}
pub struct ModifierEnabledGroupChild(String);
impl SkribbleValue for ModifierEnabledGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierEnabledGroup: SkribbleValue {
  /// ```css
  /// &[disabled], &[aria-disabled=true], &:disabled {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn disabled(&self) -> ModifierEnabledGroupChild {
    ModifierEnabledGroupChild::from_ref(self.append_to_skribble_value("disabled"))
  }
  /// ```css
  /// &[aria-disabled=false], &:disabled {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_disabled(&self) -> ModifierEnabledGroupChild {
    ModifierEnabledGroupChild::from_ref(self.append_to_skribble_value("notDisabled"))
  }
  /// ```css
  /// &:enabled {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn enabled(&self) -> ModifierEnabledGroupChild {
    ModifierEnabledGroupChild::from_ref(self.append_to_skribble_value("enabled"))
  }
}
pub struct ModifierEmptyGroupChild(String);
impl SkribbleValue for ModifierEmptyGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierEmptyGroup: SkribbleValue {
  /// ```css
  /// &:empty {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn empty(&self) -> ModifierEmptyGroupChild {
    ModifierEmptyGroupChild::from_ref(self.append_to_skribble_value("empty"))
  }
}
pub struct ModifierReadGroupChild(String);
impl SkribbleValue for ModifierReadGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierReadGroup: SkribbleValue {
  /// ```css
  /// &:read-write {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn read_write(&self) -> ModifierReadGroupChild {
    ModifierReadGroupChild::from_ref(self.append_to_skribble_value("readWrite"))
  }
  /// ```css
  /// &[aria-readonly=true], &[readonly], &:read-only {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn read_only(&self) -> ModifierReadGroupChild {
    ModifierReadGroupChild::from_ref(self.append_to_skribble_value("readOnly"))
  }
  /// ```css
  /// &[aria-readonly=false], &[readonly=false], &:not(:read-only) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_read_only(&self) -> ModifierReadGroupChild {
    ModifierReadGroupChild::from_ref(self.append_to_skribble_value("notReadOnly"))
  }
}
pub struct ModifierExpandedGroupChild(String);
impl SkribbleValue for ModifierExpandedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierExpandedGroup: SkribbleValue {
  /// ```css
  /// &[aria-expanded=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn expanded(&self) -> ModifierExpandedGroupChild {
    ModifierExpandedGroupChild::from_ref(self.append_to_skribble_value("expanded"))
  }
}
pub struct ModifierCheckedGroupChild(String);
impl SkribbleValue for ModifierCheckedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierCheckedGroup: SkribbleValue {
  /// ```css
  /// &:indeterminate, &[aria-checked=mixed] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn indeterminate(&self) -> ModifierCheckedGroupChild {
    ModifierCheckedGroupChild::from_ref(self.append_to_skribble_value("indeterminate"))
  }
  /// ```css
  /// &[aria-checked=true], &:checked {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn checked(&self) -> ModifierCheckedGroupChild {
    ModifierCheckedGroupChild::from_ref(self.append_to_skribble_value("checked"))
  }
  /// ```css
  /// &[aria-checked=false], &:not(:checked) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn unchecked(&self) -> ModifierCheckedGroupChild {
    ModifierCheckedGroupChild::from_ref(self.append_to_skribble_value("unchecked"))
  }
}
pub struct ModifierGrabbedGroupChild(String);
impl SkribbleValue for ModifierGrabbedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierGrabbedGroup: SkribbleValue {
  /// ```css
  /// &[aria-grabbed=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn grabbed(&self) -> ModifierGrabbedGroupChild {
    ModifierGrabbedGroupChild::from_ref(self.append_to_skribble_value("grabbed"))
  }
}
pub struct ModifierPressedGroupChild(String);
impl SkribbleValue for ModifierPressedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierPressedGroup: SkribbleValue {
  /// ```css
  /// &[aria-pressed=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn pressed(&self) -> ModifierPressedGroupChild {
    ModifierPressedGroupChild::from_ref(self.append_to_skribble_value("pressed"))
  }
}
pub struct ModifierInvalidGrammarGroupChild(String);
impl SkribbleValue for ModifierInvalidGrammarGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierInvalidGrammarGroup: SkribbleValue {
  /// ```css
  /// &[aria-invalid=grammar] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn invalid_grammar(&self) -> ModifierInvalidGrammarGroupChild {
    ModifierInvalidGrammarGroupChild::from_ref(self.append_to_skribble_value("invalidGrammar"))
  }
}
pub struct ModifierInvalidSpellingGroupChild(String);
impl SkribbleValue for ModifierInvalidSpellingGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierInvalidSpellingGroup: SkribbleValue {
  /// ```css
  /// &[aria-invalid=spelling] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn invalid_spelling(&self) -> ModifierInvalidSpellingGroupChild {
    ModifierInvalidSpellingGroupChild::from_ref(self.append_to_skribble_value("invalidSpelling"))
  }
}
pub struct ModifierValidGroupChild(String);
impl SkribbleValue for ModifierValidGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierValidGroup: SkribbleValue {
  /// ```css
  /// &[aria-invalid=false], &:valid {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn valid(&self) -> ModifierValidGroupChild {
    ModifierValidGroupChild::from_ref(self.append_to_skribble_value("valid"))
  }
  /// ```css
  /// &[aria-invalid=true], &:invalid {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn invalid(&self) -> ModifierValidGroupChild {
    ModifierValidGroupChild::from_ref(self.append_to_skribble_value("invalid"))
  }
}
pub struct ModifierLoadingGroupChild(String);
impl SkribbleValue for ModifierLoadingGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierLoadingGroup: SkribbleValue {
  /// ```css
  /// &[aria-busy=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn loading(&self) -> ModifierLoadingGroupChild {
    ModifierLoadingGroupChild::from_ref(self.append_to_skribble_value("loading"))
  }
}
pub struct ModifierSelectedGroupChild(String);
impl SkribbleValue for ModifierSelectedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierSelectedGroup: SkribbleValue {
  /// ```css
  /// &[aria-selected=true] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn selected(&self) -> ModifierSelectedGroupChild {
    ModifierSelectedGroupChild::from_ref(self.append_to_skribble_value("selected"))
  }
}
pub struct ModifierHiddenGroupChild(String);
impl SkribbleValue for ModifierHiddenGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierHiddenGroup: SkribbleValue {
  /// ```css
  /// &[hidden] {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn hidden(&self) -> ModifierHiddenGroupChild {
    ModifierHiddenGroupChild::from_ref(self.append_to_skribble_value("hidden"))
  }
}
pub struct ModifierAutofillGroupChild(String);
impl SkribbleValue for ModifierAutofillGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierAutofillGroup: SkribbleValue {
  /// ```css
  /// &:-webkit-autofill {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn autofill(&self) -> ModifierAutofillGroupChild {
    ModifierAutofillGroupChild::from_ref(self.append_to_skribble_value("autofill"))
  }
}
pub struct ModifierEvenGroupChild(String);
impl SkribbleValue for ModifierEvenGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierEvenGroup: SkribbleValue {
  /// ```css
  /// &:even {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn even(&self) -> ModifierEvenGroupChild {
    ModifierEvenGroupChild::from_ref(self.append_to_skribble_value("even"))
  }
  /// ```css
  /// &:odd {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn odd(&self) -> ModifierEvenGroupChild {
    ModifierEvenGroupChild::from_ref(self.append_to_skribble_value("odd"))
  }
  /// ```css
  /// &:nth-of-type(even) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn even_of_type(&self) -> ModifierEvenGroupChild {
    ModifierEvenGroupChild::from_ref(self.append_to_skribble_value("evenOfType"))
  }
  /// ```css
  /// &:nth-of-type(odd) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn odd_of_type(&self) -> ModifierEvenGroupChild {
    ModifierEvenGroupChild::from_ref(self.append_to_skribble_value("oddOfType"))
  }
}
pub struct ModifierNodePositionGroupChild(String);
impl SkribbleValue for ModifierNodePositionGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierNodePositionGroup: SkribbleValue {
  /// ```css
  /// &:first {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first(&self) -> ModifierNodePositionGroupChild {
    ModifierNodePositionGroupChild::from_ref(self.append_to_skribble_value("first"))
  }
  /// ```css
  /// &:not(:first-child) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_first(&self) -> ModifierNodePositionGroupChild {
    ModifierNodePositionGroupChild::from_ref(self.append_to_skribble_value("notFirst"))
  }
  /// ```css
  /// &:last {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn last(&self) -> ModifierNodePositionGroupChild {
    ModifierNodePositionGroupChild::from_ref(self.append_to_skribble_value("last"))
  }
  /// ```css
  /// &:not(:last-child) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_last(&self) -> ModifierNodePositionGroupChild {
    ModifierNodePositionGroupChild::from_ref(self.append_to_skribble_value("notLast"))
  }
}
pub struct ModifierNodeOfTypeGroupChild(String);
impl SkribbleValue for ModifierNodeOfTypeGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierNodeOfTypeGroup: SkribbleValue {
  /// ```css
  /// &:first-of-type {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first_of_type(&self) -> ModifierNodeOfTypeGroupChild {
    ModifierNodeOfTypeGroupChild::from_ref(self.append_to_skribble_value("firstOfType"))
  }
  /// ```css
  /// &:not(:first-of-type) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_first_of_type(&self) -> ModifierNodeOfTypeGroupChild {
    ModifierNodeOfTypeGroupChild::from_ref(self.append_to_skribble_value("notFirstOfType"))
  }
  /// ```css
  /// &:last-of-type {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn last_of_type(&self) -> ModifierNodeOfTypeGroupChild {
    ModifierNodeOfTypeGroupChild::from_ref(self.append_to_skribble_value("lastOfType"))
  }
  /// ```css
  /// &:not(:last-of-type) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_last_of_type(&self) -> ModifierNodeOfTypeGroupChild {
    ModifierNodeOfTypeGroupChild::from_ref(self.append_to_skribble_value("notLastOfType"))
  }
}
pub struct ModifierVisitedGroupChild(String);
impl SkribbleValue for ModifierVisitedGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierVisitedGroup: SkribbleValue {
  /// ```css
  /// &:visited {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn visited(&self) -> ModifierVisitedGroupChild {
    ModifierVisitedGroupChild::from_ref(self.append_to_skribble_value("visited"))
  }
}
pub struct ModifierOptionalGroupChild(String);
impl SkribbleValue for ModifierOptionalGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierOptionalGroup: SkribbleValue {
  /// ```css
  /// &:optional {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn optional(&self) -> ModifierOptionalGroupChild {
    ModifierOptionalGroupChild::from_ref(self.append_to_skribble_value("optional"))
  }
}
pub struct ModifierFullScreenGroupChild(String);
impl SkribbleValue for ModifierFullScreenGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierFullScreenGroup: SkribbleValue {
  /// ```css
  /// &:fullscreen {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn full_screen(&self) -> ModifierFullScreenGroupChild {
    ModifierFullScreenGroupChild::from_ref(self.append_to_skribble_value("fullScreen"))
  }
}
pub struct ModifierTargetGroupChild(String);
impl SkribbleValue for ModifierTargetGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierTargetGroup: SkribbleValue {
  /// ```css
  /// &:target {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn target(&self) -> ModifierTargetGroupChild {
    ModifierTargetGroupChild::from_ref(self.append_to_skribble_value("target"))
  }
}
pub struct ModifierPlaceholderShownGroupChild(String);
impl SkribbleValue for ModifierPlaceholderShownGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierPlaceholderShownGroup: SkribbleValue {
  /// ```css
  /// &:placeholder-shown {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn placeholder_shown(&self) -> ModifierPlaceholderShownGroupChild {
    ModifierPlaceholderShownGroupChild::from_ref(self.append_to_skribble_value("placeholderShown"))
  }
}
pub struct ModifierRequiredGroupChild(String);
impl SkribbleValue for ModifierRequiredGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierRequiredGroup: SkribbleValue {
  /// ```css
  /// [aria-required=true], &:required {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn required(&self) -> ModifierRequiredGroupChild {
    ModifierRequiredGroupChild::from_ref(self.append_to_skribble_value("required"))
  }
  /// ```css
  /// [arira-required=false], &:not(:required) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_required(&self) -> ModifierRequiredGroupChild {
    ModifierRequiredGroupChild::from_ref(self.append_to_skribble_value("notRequired"))
  }
}
pub struct ModifierDefaultGroupChild(String);
impl SkribbleValue for ModifierDefaultGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierDefaultGroup: SkribbleValue {
  /// ```css
  /// &:default {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn default(&self) -> ModifierDefaultGroupChild {
    ModifierDefaultGroupChild::from_ref(self.append_to_skribble_value("default"))
  }
}
pub struct ModifierOnlyChildGroupChild(String);
impl SkribbleValue for ModifierOnlyChildGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierOnlyChildGroup: SkribbleValue {
  /// ```css
  /// &:only-child {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn only_child(&self) -> ModifierOnlyChildGroupChild {
    ModifierOnlyChildGroupChild::from_ref(self.append_to_skribble_value("onlyChild"))
  }
  /// ```css
  /// &:not(:only-child) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_only_child(&self) -> ModifierOnlyChildGroupChild {
    ModifierOnlyChildGroupChild::from_ref(self.append_to_skribble_value("notOnlyChild"))
  }
}
pub struct ModifierOnlyGroupChild(String);
impl SkribbleValue for ModifierOnlyGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierOnlyGroup: SkribbleValue {
  /// ```css
  /// &:only-of-type {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn only_of_type(&self) -> ModifierOnlyGroupChild {
    ModifierOnlyGroupChild::from_ref(self.append_to_skribble_value("onlyOfType"))
  }
  /// ```css
  /// &:not(:only-of-type) {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn not_only_of_type(&self) -> ModifierOnlyGroupChild {
    ModifierOnlyGroupChild::from_ref(self.append_to_skribble_value("notOnlyOfType"))
  }
}
pub struct ModifierRootGroupChild(String);
impl SkribbleValue for ModifierRootGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierRootGroup: SkribbleValue {
  /// ```css
  /// &:root {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn root(&self) -> ModifierRootGroupChild {
    ModifierRootGroupChild::from_ref(self.append_to_skribble_value("root"))
  }
}
pub struct ModifierLinkGroupChild(String);
impl SkribbleValue for ModifierLinkGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierLinkGroup: SkribbleValue {
  /// ```css
  /// &:link {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn link(&self) -> ModifierLinkGroupChild {
    ModifierLinkGroupChild::from_ref(self.append_to_skribble_value("link"))
  }
}
pub struct ModifierPseudoGroupChild(String);
impl SkribbleValue for ModifierPseudoGroupChild {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait ModifierPseudoGroup: SkribbleValue {
  /// ```css
  /// &::placeholder {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn placeholder(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("placeholder"))
  }
  /// ```css
  /// &::selection {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn selection(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("selection"))
  }
  /// ```css
  /// &::first-letter {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first_letter(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("firstLetter"))
  }
  /// ```css
  /// &::first-line {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn first_line(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("firstLine"))
  }
  /// ```css
  /// &::before {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn before(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("before"))
  }
  /// ```css
  /// &::after {
  ///   /* ... */
  /// }
  /// ```
  #[inline]
  fn after(&self) -> ModifierPseudoGroupChild {
    ModifierPseudoGroupChild::from_ref(self.append_to_skribble_value("after"))
  }
}
pub trait ValueSetScreenReader: SkribbleValue {
  #[inline]
  fn only(&self) -> String {
    self.append_string_to_skribble_value("only")
  }
  #[inline]
  fn exclude(&self) -> String {
    self.append_string_to_skribble_value("exclude")
  }
}
pub trait ValueSetTransitions: SkribbleValue {
  /// The built-in transition class values.
  #[inline]
  fn __(&self) -> String {
    self.append_string_to_skribble_value("")
  }
  /// The built-in transition class values.
  #[inline]
  fn none(&self) -> String {
    self.append_string_to_skribble_value("none")
  }
  /// The built-in transition class values.
  #[inline]
  fn all(&self) -> String {
    self.append_string_to_skribble_value("all")
  }
  /// The built-in transition class values.
  #[inline]
  fn colors(&self) -> String {
    self.append_string_to_skribble_value("colors")
  }
  /// The built-in transition class values.
  #[inline]
  fn opacity(&self) -> String {
    self.append_string_to_skribble_value("opacity")
  }
  /// The built-in transition class values.
  #[inline]
  fn shadow(&self) -> String {
    self.append_string_to_skribble_value("shadow")
  }
  /// The built-in transition class values.
  #[inline]
  fn transform(&self) -> String {
    self.append_string_to_skribble_value("transform")
  }
}
pub trait ValueSetTransitionProperties: SkribbleValue {
  #[inline]
  fn __(&self) -> String {
    self.append_string_to_skribble_value("")
  }
  #[inline]
  fn none(&self) -> String {
    self.append_string_to_skribble_value("none")
  }
  #[inline]
  fn all(&self) -> String {
    self.append_string_to_skribble_value("all")
  }
  #[inline]
  fn colors(&self) -> String {
    self.append_string_to_skribble_value("colors")
  }
  #[inline]
  fn opacity(&self) -> String {
    self.append_string_to_skribble_value("opacity")
  }
  #[inline]
  fn shadow(&self) -> String {
    self.append_string_to_skribble_value("shadow")
  }
  #[inline]
  fn transform(&self) -> String {
    self.append_string_to_skribble_value("transform")
  }
}
pub trait ValueSetDurations: SkribbleValue {
  #[inline]
  fn n_0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  #[inline]
  fn n_75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  #[inline]
  fn n_100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
  #[inline]
  fn n_150(&self) -> String {
    self.append_string_to_skribble_value("150")
  }
  #[inline]
  fn n_200(&self) -> String {
    self.append_string_to_skribble_value("200")
  }
  #[inline]
  fn n_300(&self) -> String {
    self.append_string_to_skribble_value("300")
  }
  #[inline]
  fn n_500(&self) -> String {
    self.append_string_to_skribble_value("500")
  }
  #[inline]
  fn n_700(&self) -> String {
    self.append_string_to_skribble_value("700")
  }
  #[inline]
  fn n_1000(&self) -> String {
    self.append_string_to_skribble_value("1000")
  }
  #[inline]
  fn n_1500(&self) -> String {
    self.append_string_to_skribble_value("1500")
  }
  #[inline]
  fn n_2000(&self) -> String {
    self.append_string_to_skribble_value("2000")
  }
}
pub trait ValueSetEasing: SkribbleValue {
  #[inline]
  fn linear(&self) -> String {
    self.append_string_to_skribble_value("linear")
  }
  #[inline]
  fn r#in(&self) -> String {
    self.append_string_to_skribble_value("in")
  }
  #[inline]
  fn out(&self) -> String {
    self.append_string_to_skribble_value("out")
  }
  #[inline]
  fn in_out(&self) -> String {
    self.append_string_to_skribble_value("inOut")
  }
}
pub trait ValueSetAnimationRepetitions: SkribbleValue {
  #[inline]
  fn n_0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  #[inline]
  fn n_0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  #[inline]
  fn n_1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  #[inline]
  fn n_2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  #[inline]
  fn n_3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  #[inline]
  fn infinite(&self) -> String {
    self.append_string_to_skribble_value("infinite")
  }
  #[inline]
  fn r#in(&self) -> String {
    self.append_string_to_skribble_value("in")
  }
  #[inline]
  fn out(&self) -> String {
    self.append_string_to_skribble_value("out")
  }
  #[inline]
  fn in_out(&self) -> String {
    self.append_string_to_skribble_value("inOut")
  }
}
pub trait ValueSetAnimationDirection: SkribbleValue {
  #[inline]
  fn normal(&self) -> String {
    self.append_string_to_skribble_value("normal")
  }
  #[inline]
  fn reverse(&self) -> String {
    self.append_string_to_skribble_value("reverse")
  }
  #[inline]
  fn alt(&self) -> String {
    self.append_string_to_skribble_value("alt")
  }
  #[inline]
  fn alt_reverse(&self) -> String {
    self.append_string_to_skribble_value("altReverse")
  }
}
pub trait ValueSetAnimationFillMode: SkribbleValue {
  /// These are the default animation fill mode values.
  #[inline]
  fn none(&self) -> String {
    self.append_string_to_skribble_value("none")
  }
  /// These are the default animation fill mode values.
  #[inline]
  fn forwards(&self) -> String {
    self.append_string_to_skribble_value("forwards")
  }
  /// These are the default animation fill mode values.
  #[inline]
  fn backwards(&self) -> String {
    self.append_string_to_skribble_value("backwards")
  }
  /// These are the default animation fill mode values.
  #[inline]
  fn both(&self) -> String {
    self.append_string_to_skribble_value("both")
  }
}
pub trait ValueSetAnimationState: SkribbleValue {
  /// These are the default animation state values.
  #[inline]
  fn running(&self) -> String {
    self.append_string_to_skribble_value("running")
  }
  /// These are the default animation state values.
  #[inline]
  fn paused(&self) -> String {
    self.append_string_to_skribble_value("paused")
  }
}
pub trait ValueSetOpacity: SkribbleValue {
  /// These are the default opacity values.
  #[inline]
  fn n_0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_30(&self) -> String {
    self.append_string_to_skribble_value("30")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_70(&self) -> String {
    self.append_string_to_skribble_value("70")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_95(&self) -> String {
    self.append_string_to_skribble_value("95")
  }
  /// These are the default opacity values.
  #[inline]
  fn n_100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
}
pub trait ValueSetSpacing: SkribbleValue {
  #[inline]
  fn n_0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  #[inline]
  fn n_1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  #[inline]
  fn n_2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  #[inline]
  fn n_3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  #[inline]
  fn n_4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  #[inline]
  fn n_5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  #[inline]
  fn n_6(&self) -> String {
    self.append_string_to_skribble_value("6")
  }
  #[inline]
  fn n_7(&self) -> String {
    self.append_string_to_skribble_value("7")
  }
  #[inline]
  fn n_8(&self) -> String {
    self.append_string_to_skribble_value("8")
  }
  #[inline]
  fn n_9(&self) -> String {
    self.append_string_to_skribble_value("9")
  }
  #[inline]
  fn n_10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  #[inline]
  fn n_11(&self) -> String {
    self.append_string_to_skribble_value("11")
  }
  #[inline]
  fn n_12(&self) -> String {
    self.append_string_to_skribble_value("12")
  }
  #[inline]
  fn n_14(&self) -> String {
    self.append_string_to_skribble_value("14")
  }
  #[inline]
  fn n_16(&self) -> String {
    self.append_string_to_skribble_value("16")
  }
  #[inline]
  fn n_20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  #[inline]
  fn n_24(&self) -> String {
    self.append_string_to_skribble_value("24")
  }
  #[inline]
  fn n_28(&self) -> String {
    self.append_string_to_skribble_value("28")
  }
  #[inline]
  fn n_32(&self) -> String {
    self.append_string_to_skribble_value("32")
  }
  #[inline]
  fn n_36(&self) -> String {
    self.append_string_to_skribble_value("36")
  }
  #[inline]
  fn n_40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  #[inline]
  fn n_44(&self) -> String {
    self.append_string_to_skribble_value("44")
  }
  #[inline]
  fn n_48(&self) -> String {
    self.append_string_to_skribble_value("48")
  }
  #[inline]
  fn n_52(&self) -> String {
    self.append_string_to_skribble_value("52")
  }
  #[inline]
  fn n_56(&self) -> String {
    self.append_string_to_skribble_value("56")
  }
  #[inline]
  fn n_60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  #[inline]
  fn n_64(&self) -> String {
    self.append_string_to_skribble_value("64")
  }
  #[inline]
  fn n_72(&self) -> String {
    self.append_string_to_skribble_value("72")
  }
  #[inline]
  fn n_80(&self) -> String {
    self.append_string_to_skribble_value("80")
  }
  #[inline]
  fn n_96(&self) -> String {
    self.append_string_to_skribble_value("96")
  }
  #[inline]
  fn px(&self) -> String {
    self.append_string_to_skribble_value("px")
  }
  #[inline]
  fn n_0_5(&self) -> String {
    self.append_string_to_skribble_value("0.5")
  }
  #[inline]
  fn n_1_5(&self) -> String {
    self.append_string_to_skribble_value("1.5")
  }
  #[inline]
  fn n_2_5(&self) -> String {
    self.append_string_to_skribble_value("2.5")
  }
  #[inline]
  fn n_3_5(&self) -> String {
    self.append_string_to_skribble_value("3.5")
  }
}
pub trait ValueSetZIndex: SkribbleValue {
  #[inline]
  fn n_0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  #[inline]
  fn n_1(&self) -> String {
    self.append_string_to_skribble_value("1")
  }
  #[inline]
  fn n_2(&self) -> String {
    self.append_string_to_skribble_value("2")
  }
  #[inline]
  fn n_3(&self) -> String {
    self.append_string_to_skribble_value("3")
  }
  #[inline]
  fn n_4(&self) -> String {
    self.append_string_to_skribble_value("4")
  }
  #[inline]
  fn n_5(&self) -> String {
    self.append_string_to_skribble_value("5")
  }
  #[inline]
  fn n_10(&self) -> String {
    self.append_string_to_skribble_value("10")
  }
  #[inline]
  fn n_20(&self) -> String {
    self.append_string_to_skribble_value("20")
  }
  #[inline]
  fn n_30(&self) -> String {
    self.append_string_to_skribble_value("30")
  }
  #[inline]
  fn n_40(&self) -> String {
    self.append_string_to_skribble_value("40")
  }
  #[inline]
  fn n_50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  #[inline]
  fn n_60(&self) -> String {
    self.append_string_to_skribble_value("60")
  }
  #[inline]
  fn auto(&self) -> String {
    self.append_string_to_skribble_value("auto")
  }
  #[inline]
  fn minus_1(&self) -> String {
    self.append_string_to_skribble_value("-1")
  }
  #[inline]
  fn minus_2(&self) -> String {
    self.append_string_to_skribble_value("-2")
  }
  #[inline]
  fn minus_3(&self) -> String {
    self.append_string_to_skribble_value("-3")
  }
  #[inline]
  fn minus_5(&self) -> String {
    self.append_string_to_skribble_value("-5")
  }
}
pub trait ValueSetDirection: SkribbleValue {
  #[inline]
  fn ltr(&self) -> String {
    self.append_string_to_skribble_value("ltr")
  }
  #[inline]
  fn rtl(&self) -> String {
    self.append_string_to_skribble_value("rtl")
  }
}
pub trait ValueSetZoom: SkribbleValue {
  #[inline]
  fn n_0(&self) -> String {
    self.append_string_to_skribble_value("0")
  }
  #[inline]
  fn n_50(&self) -> String {
    self.append_string_to_skribble_value("50")
  }
  #[inline]
  fn n_75(&self) -> String {
    self.append_string_to_skribble_value("75")
  }
  #[inline]
  fn n_90(&self) -> String {
    self.append_string_to_skribble_value("90")
  }
  #[inline]
  fn n_95(&self) -> String {
    self.append_string_to_skribble_value("95")
  }
  #[inline]
  fn n_100(&self) -> String {
    self.append_string_to_skribble_value("100")
  }
  #[inline]
  fn n_105(&self) -> String {
    self.append_string_to_skribble_value("105")
  }
  #[inline]
  fn n_110(&self) -> String {
    self.append_string_to_skribble_value("110")
  }
  #[inline]
  fn n_125(&self) -> String {
    self.append_string_to_skribble_value("125")
  }
  #[inline]
  fn n_150(&self) -> String {
    self.append_string_to_skribble_value("150")
  }
}
pub trait ValueSetFonts: SkribbleValue {
  #[inline]
  fn sans(&self) -> String {
    self.append_string_to_skribble_value("sans")
  }
  #[inline]
  fn serif(&self) -> String {
    self.append_string_to_skribble_value("serif")
  }
  #[inline]
  fn mono(&self) -> String {
    self.append_string_to_skribble_value("mono")
  }
}
pub trait ValueSetSpinAnimation: SkribbleValue {
  /// The spin animation.
  #[inline]
  fn spin(&self) -> String {
    self.append_string_to_skribble_value("spin")
  }
}
pub trait ValueSetPingAnimation: SkribbleValue {
  /// The ping animation.
  #[inline]
  fn ping(&self) -> String {
    self.append_string_to_skribble_value("ping")
  }
}
pub trait ValueSetPulseAnimation: SkribbleValue {
  /// The pulse animation.
  #[inline]
  fn pulse(&self) -> String {
    self.append_string_to_skribble_value("pulse")
  }
}
pub trait ValueSetBounceAnimation: SkribbleValue {
  /// The bounce animation.
  #[inline]
  fn bounce(&self) -> String {
    self.append_string_to_skribble_value("bounce")
  }
}
pub trait ValueSetEnterAnimation: SkribbleValue {
  /// The enter animation.
  #[inline]
  fn r#in(&self) -> String {
    self.append_string_to_skribble_value("in")
  }
}
pub trait ValueSetExitAnimation: SkribbleValue {
  /// The exit animation.
  #[inline]
  fn out(&self) -> String {
    self.append_string_to_skribble_value("out")
  }
}
pub trait Palette: SkribbleValue {
  #[inline]
  fn inherit(&self) -> String {
    self.append_string_to_skribble_value("inherit")
  }
  #[inline]
  fn current(&self) -> String {
    self.append_string_to_skribble_value("current")
  }
  #[inline]
  fn transparent(&self) -> String {
    self.append_string_to_skribble_value("transparent")
  }
  #[inline]
  fn black(&self) -> String {
    self.append_string_to_skribble_value("black")
  }
  #[inline]
  fn white(&self) -> String {
    self.append_string_to_skribble_value("white")
  }
  #[inline]
  fn slate50(&self) -> String {
    self.append_string_to_skribble_value("slate50")
  }
  #[inline]
  fn slate100(&self) -> String {
    self.append_string_to_skribble_value("slate100")
  }
  #[inline]
  fn slate200(&self) -> String {
    self.append_string_to_skribble_value("slate200")
  }
  #[inline]
  fn slate300(&self) -> String {
    self.append_string_to_skribble_value("slate300")
  }
  #[inline]
  fn slate400(&self) -> String {
    self.append_string_to_skribble_value("slate400")
  }
  #[inline]
  fn slate500(&self) -> String {
    self.append_string_to_skribble_value("slate500")
  }
  #[inline]
  fn slate600(&self) -> String {
    self.append_string_to_skribble_value("slate600")
  }
  #[inline]
  fn slate700(&self) -> String {
    self.append_string_to_skribble_value("slate700")
  }
  #[inline]
  fn slate800(&self) -> String {
    self.append_string_to_skribble_value("slate800")
  }
  #[inline]
  fn slate900(&self) -> String {
    self.append_string_to_skribble_value("slate900")
  }
  #[inline]
  fn gray50(&self) -> String {
    self.append_string_to_skribble_value("gray50")
  }
  #[inline]
  fn gray100(&self) -> String {
    self.append_string_to_skribble_value("gray100")
  }
  #[inline]
  fn gray200(&self) -> String {
    self.append_string_to_skribble_value("gray200")
  }
  #[inline]
  fn gray300(&self) -> String {
    self.append_string_to_skribble_value("gray300")
  }
  #[inline]
  fn gray400(&self) -> String {
    self.append_string_to_skribble_value("gray400")
  }
  #[inline]
  fn gray500(&self) -> String {
    self.append_string_to_skribble_value("gray500")
  }
  #[inline]
  fn gray600(&self) -> String {
    self.append_string_to_skribble_value("gray600")
  }
  #[inline]
  fn gray700(&self) -> String {
    self.append_string_to_skribble_value("gray700")
  }
  #[inline]
  fn gray800(&self) -> String {
    self.append_string_to_skribble_value("gray800")
  }
  #[inline]
  fn gray900(&self) -> String {
    self.append_string_to_skribble_value("gray900")
  }
  #[inline]
  fn zinc50(&self) -> String {
    self.append_string_to_skribble_value("zinc50")
  }
  #[inline]
  fn zinc100(&self) -> String {
    self.append_string_to_skribble_value("zinc100")
  }
  #[inline]
  fn zinc200(&self) -> String {
    self.append_string_to_skribble_value("zinc200")
  }
  #[inline]
  fn zinc300(&self) -> String {
    self.append_string_to_skribble_value("zinc300")
  }
  #[inline]
  fn zinc400(&self) -> String {
    self.append_string_to_skribble_value("zinc400")
  }
  #[inline]
  fn zinc500(&self) -> String {
    self.append_string_to_skribble_value("zinc500")
  }
  #[inline]
  fn zinc600(&self) -> String {
    self.append_string_to_skribble_value("zinc600")
  }
  #[inline]
  fn zinc700(&self) -> String {
    self.append_string_to_skribble_value("zinc700")
  }
  #[inline]
  fn zinc800(&self) -> String {
    self.append_string_to_skribble_value("zinc800")
  }
  #[inline]
  fn zinc900(&self) -> String {
    self.append_string_to_skribble_value("zinc900")
  }
  #[inline]
  fn neutral50(&self) -> String {
    self.append_string_to_skribble_value("neutral50")
  }
  #[inline]
  fn neutral100(&self) -> String {
    self.append_string_to_skribble_value("neutral100")
  }
  #[inline]
  fn neutral200(&self) -> String {
    self.append_string_to_skribble_value("neutral200")
  }
  #[inline]
  fn neutral300(&self) -> String {
    self.append_string_to_skribble_value("neutral300")
  }
  #[inline]
  fn neutral400(&self) -> String {
    self.append_string_to_skribble_value("neutral400")
  }
  #[inline]
  fn neutral500(&self) -> String {
    self.append_string_to_skribble_value("neutral500")
  }
  #[inline]
  fn neutral600(&self) -> String {
    self.append_string_to_skribble_value("neutral600")
  }
  #[inline]
  fn neutral700(&self) -> String {
    self.append_string_to_skribble_value("neutral700")
  }
  #[inline]
  fn neutral800(&self) -> String {
    self.append_string_to_skribble_value("neutral800")
  }
  #[inline]
  fn neutral900(&self) -> String {
    self.append_string_to_skribble_value("neutral900")
  }
  #[inline]
  fn stone50(&self) -> String {
    self.append_string_to_skribble_value("stone50")
  }
  #[inline]
  fn stone100(&self) -> String {
    self.append_string_to_skribble_value("stone100")
  }
  #[inline]
  fn stone200(&self) -> String {
    self.append_string_to_skribble_value("stone200")
  }
  #[inline]
  fn stone300(&self) -> String {
    self.append_string_to_skribble_value("stone300")
  }
  #[inline]
  fn stone400(&self) -> String {
    self.append_string_to_skribble_value("stone400")
  }
  #[inline]
  fn stone500(&self) -> String {
    self.append_string_to_skribble_value("stone500")
  }
  #[inline]
  fn stone600(&self) -> String {
    self.append_string_to_skribble_value("stone600")
  }
  #[inline]
  fn stone700(&self) -> String {
    self.append_string_to_skribble_value("stone700")
  }
  #[inline]
  fn stone800(&self) -> String {
    self.append_string_to_skribble_value("stone800")
  }
  #[inline]
  fn stone900(&self) -> String {
    self.append_string_to_skribble_value("stone900")
  }
  #[inline]
  fn red50(&self) -> String {
    self.append_string_to_skribble_value("red50")
  }
  #[inline]
  fn red100(&self) -> String {
    self.append_string_to_skribble_value("red100")
  }
  #[inline]
  fn red200(&self) -> String {
    self.append_string_to_skribble_value("red200")
  }
  #[inline]
  fn red300(&self) -> String {
    self.append_string_to_skribble_value("red300")
  }
  #[inline]
  fn red400(&self) -> String {
    self.append_string_to_skribble_value("red400")
  }
  #[inline]
  fn red500(&self) -> String {
    self.append_string_to_skribble_value("red500")
  }
  #[inline]
  fn red600(&self) -> String {
    self.append_string_to_skribble_value("red600")
  }
  #[inline]
  fn red700(&self) -> String {
    self.append_string_to_skribble_value("red700")
  }
  #[inline]
  fn red800(&self) -> String {
    self.append_string_to_skribble_value("red800")
  }
  #[inline]
  fn red900(&self) -> String {
    self.append_string_to_skribble_value("red900")
  }
  #[inline]
  fn orange50(&self) -> String {
    self.append_string_to_skribble_value("orange50")
  }
  #[inline]
  fn orange100(&self) -> String {
    self.append_string_to_skribble_value("orange100")
  }
  #[inline]
  fn orange200(&self) -> String {
    self.append_string_to_skribble_value("orange200")
  }
  #[inline]
  fn orange300(&self) -> String {
    self.append_string_to_skribble_value("orange300")
  }
  #[inline]
  fn orange400(&self) -> String {
    self.append_string_to_skribble_value("orange400")
  }
  #[inline]
  fn orange500(&self) -> String {
    self.append_string_to_skribble_value("orange500")
  }
  #[inline]
  fn orange600(&self) -> String {
    self.append_string_to_skribble_value("orange600")
  }
  #[inline]
  fn orange700(&self) -> String {
    self.append_string_to_skribble_value("orange700")
  }
  #[inline]
  fn orange800(&self) -> String {
    self.append_string_to_skribble_value("orange800")
  }
  #[inline]
  fn orange900(&self) -> String {
    self.append_string_to_skribble_value("orange900")
  }
  #[inline]
  fn amber50(&self) -> String {
    self.append_string_to_skribble_value("amber50")
  }
  #[inline]
  fn amber100(&self) -> String {
    self.append_string_to_skribble_value("amber100")
  }
  #[inline]
  fn amber200(&self) -> String {
    self.append_string_to_skribble_value("amber200")
  }
  #[inline]
  fn amber300(&self) -> String {
    self.append_string_to_skribble_value("amber300")
  }
  #[inline]
  fn amber400(&self) -> String {
    self.append_string_to_skribble_value("amber400")
  }
  #[inline]
  fn amber500(&self) -> String {
    self.append_string_to_skribble_value("amber500")
  }
  #[inline]
  fn amber600(&self) -> String {
    self.append_string_to_skribble_value("amber600")
  }
  #[inline]
  fn amber700(&self) -> String {
    self.append_string_to_skribble_value("amber700")
  }
  #[inline]
  fn amber800(&self) -> String {
    self.append_string_to_skribble_value("amber800")
  }
  #[inline]
  fn amber900(&self) -> String {
    self.append_string_to_skribble_value("amber900")
  }
  #[inline]
  fn yellow50(&self) -> String {
    self.append_string_to_skribble_value("yellow50")
  }
  #[inline]
  fn yellow100(&self) -> String {
    self.append_string_to_skribble_value("yellow100")
  }
  #[inline]
  fn yellow200(&self) -> String {
    self.append_string_to_skribble_value("yellow200")
  }
  #[inline]
  fn yellow300(&self) -> String {
    self.append_string_to_skribble_value("yellow300")
  }
  #[inline]
  fn yellow400(&self) -> String {
    self.append_string_to_skribble_value("yellow400")
  }
  #[inline]
  fn yellow500(&self) -> String {
    self.append_string_to_skribble_value("yellow500")
  }
  #[inline]
  fn yellow600(&self) -> String {
    self.append_string_to_skribble_value("yellow600")
  }
  #[inline]
  fn yellow700(&self) -> String {
    self.append_string_to_skribble_value("yellow700")
  }
  #[inline]
  fn yellow800(&self) -> String {
    self.append_string_to_skribble_value("yellow800")
  }
  #[inline]
  fn yellow900(&self) -> String {
    self.append_string_to_skribble_value("yellow900")
  }
  #[inline]
  fn lime50(&self) -> String {
    self.append_string_to_skribble_value("lime50")
  }
  #[inline]
  fn lime100(&self) -> String {
    self.append_string_to_skribble_value("lime100")
  }
  #[inline]
  fn lime200(&self) -> String {
    self.append_string_to_skribble_value("lime200")
  }
  #[inline]
  fn lime300(&self) -> String {
    self.append_string_to_skribble_value("lime300")
  }
  #[inline]
  fn lime400(&self) -> String {
    self.append_string_to_skribble_value("lime400")
  }
  #[inline]
  fn lime500(&self) -> String {
    self.append_string_to_skribble_value("lime500")
  }
  #[inline]
  fn lime600(&self) -> String {
    self.append_string_to_skribble_value("lime600")
  }
  #[inline]
  fn lime700(&self) -> String {
    self.append_string_to_skribble_value("lime700")
  }
  #[inline]
  fn lime800(&self) -> String {
    self.append_string_to_skribble_value("lime800")
  }
  #[inline]
  fn lime900(&self) -> String {
    self.append_string_to_skribble_value("lime900")
  }
  #[inline]
  fn green50(&self) -> String {
    self.append_string_to_skribble_value("green50")
  }
  #[inline]
  fn green100(&self) -> String {
    self.append_string_to_skribble_value("green100")
  }
  #[inline]
  fn green200(&self) -> String {
    self.append_string_to_skribble_value("green200")
  }
  #[inline]
  fn green300(&self) -> String {
    self.append_string_to_skribble_value("green300")
  }
  #[inline]
  fn green400(&self) -> String {
    self.append_string_to_skribble_value("green400")
  }
  #[inline]
  fn green500(&self) -> String {
    self.append_string_to_skribble_value("green500")
  }
  #[inline]
  fn green600(&self) -> String {
    self.append_string_to_skribble_value("green600")
  }
  #[inline]
  fn green700(&self) -> String {
    self.append_string_to_skribble_value("green700")
  }
  #[inline]
  fn green800(&self) -> String {
    self.append_string_to_skribble_value("green800")
  }
  #[inline]
  fn green900(&self) -> String {
    self.append_string_to_skribble_value("green900")
  }
  #[inline]
  fn emerald50(&self) -> String {
    self.append_string_to_skribble_value("emerald50")
  }
  #[inline]
  fn emerald100(&self) -> String {
    self.append_string_to_skribble_value("emerald100")
  }
  #[inline]
  fn emerald200(&self) -> String {
    self.append_string_to_skribble_value("emerald200")
  }
  #[inline]
  fn emerald300(&self) -> String {
    self.append_string_to_skribble_value("emerald300")
  }
  #[inline]
  fn emerald400(&self) -> String {
    self.append_string_to_skribble_value("emerald400")
  }
  #[inline]
  fn emerald500(&self) -> String {
    self.append_string_to_skribble_value("emerald500")
  }
  #[inline]
  fn emerald600(&self) -> String {
    self.append_string_to_skribble_value("emerald600")
  }
  #[inline]
  fn emerald700(&self) -> String {
    self.append_string_to_skribble_value("emerald700")
  }
  #[inline]
  fn emerald800(&self) -> String {
    self.append_string_to_skribble_value("emerald800")
  }
  #[inline]
  fn emerald900(&self) -> String {
    self.append_string_to_skribble_value("emerald900")
  }
  #[inline]
  fn teal50(&self) -> String {
    self.append_string_to_skribble_value("teal50")
  }
  #[inline]
  fn teal100(&self) -> String {
    self.append_string_to_skribble_value("teal100")
  }
  #[inline]
  fn teal200(&self) -> String {
    self.append_string_to_skribble_value("teal200")
  }
  #[inline]
  fn teal300(&self) -> String {
    self.append_string_to_skribble_value("teal300")
  }
  #[inline]
  fn teal400(&self) -> String {
    self.append_string_to_skribble_value("teal400")
  }
  #[inline]
  fn teal500(&self) -> String {
    self.append_string_to_skribble_value("teal500")
  }
  #[inline]
  fn teal600(&self) -> String {
    self.append_string_to_skribble_value("teal600")
  }
  #[inline]
  fn teal700(&self) -> String {
    self.append_string_to_skribble_value("teal700")
  }
  #[inline]
  fn teal800(&self) -> String {
    self.append_string_to_skribble_value("teal800")
  }
  #[inline]
  fn teal900(&self) -> String {
    self.append_string_to_skribble_value("teal900")
  }
  #[inline]
  fn cyan50(&self) -> String {
    self.append_string_to_skribble_value("cyan50")
  }
  #[inline]
  fn cyan100(&self) -> String {
    self.append_string_to_skribble_value("cyan100")
  }
  #[inline]
  fn cyan200(&self) -> String {
    self.append_string_to_skribble_value("cyan200")
  }
  #[inline]
  fn cyan300(&self) -> String {
    self.append_string_to_skribble_value("cyan300")
  }
  #[inline]
  fn cyan400(&self) -> String {
    self.append_string_to_skribble_value("cyan400")
  }
  #[inline]
  fn cyan500(&self) -> String {
    self.append_string_to_skribble_value("cyan500")
  }
  #[inline]
  fn cyan600(&self) -> String {
    self.append_string_to_skribble_value("cyan600")
  }
  #[inline]
  fn cyan700(&self) -> String {
    self.append_string_to_skribble_value("cyan700")
  }
  #[inline]
  fn cyan800(&self) -> String {
    self.append_string_to_skribble_value("cyan800")
  }
  #[inline]
  fn cyan900(&self) -> String {
    self.append_string_to_skribble_value("cyan900")
  }
  #[inline]
  fn sky50(&self) -> String {
    self.append_string_to_skribble_value("sky50")
  }
  #[inline]
  fn sky100(&self) -> String {
    self.append_string_to_skribble_value("sky100")
  }
  #[inline]
  fn sky200(&self) -> String {
    self.append_string_to_skribble_value("sky200")
  }
  #[inline]
  fn sky300(&self) -> String {
    self.append_string_to_skribble_value("sky300")
  }
  #[inline]
  fn sky400(&self) -> String {
    self.append_string_to_skribble_value("sky400")
  }
  #[inline]
  fn sky500(&self) -> String {
    self.append_string_to_skribble_value("sky500")
  }
  #[inline]
  fn sky600(&self) -> String {
    self.append_string_to_skribble_value("sky600")
  }
  #[inline]
  fn sky700(&self) -> String {
    self.append_string_to_skribble_value("sky700")
  }
  #[inline]
  fn sky800(&self) -> String {
    self.append_string_to_skribble_value("sky800")
  }
  #[inline]
  fn sky900(&self) -> String {
    self.append_string_to_skribble_value("sky900")
  }
  #[inline]
  fn blue50(&self) -> String {
    self.append_string_to_skribble_value("blue50")
  }
  #[inline]
  fn blue100(&self) -> String {
    self.append_string_to_skribble_value("blue100")
  }
  #[inline]
  fn blue200(&self) -> String {
    self.append_string_to_skribble_value("blue200")
  }
  #[inline]
  fn blue300(&self) -> String {
    self.append_string_to_skribble_value("blue300")
  }
  #[inline]
  fn blue400(&self) -> String {
    self.append_string_to_skribble_value("blue400")
  }
  #[inline]
  fn blue500(&self) -> String {
    self.append_string_to_skribble_value("blue500")
  }
  #[inline]
  fn blue600(&self) -> String {
    self.append_string_to_skribble_value("blue600")
  }
  #[inline]
  fn blue700(&self) -> String {
    self.append_string_to_skribble_value("blue700")
  }
  #[inline]
  fn blue800(&self) -> String {
    self.append_string_to_skribble_value("blue800")
  }
  #[inline]
  fn blue900(&self) -> String {
    self.append_string_to_skribble_value("blue900")
  }
  #[inline]
  fn indigo50(&self) -> String {
    self.append_string_to_skribble_value("indigo50")
  }
  #[inline]
  fn indigo100(&self) -> String {
    self.append_string_to_skribble_value("indigo100")
  }
  #[inline]
  fn indigo200(&self) -> String {
    self.append_string_to_skribble_value("indigo200")
  }
  #[inline]
  fn indigo300(&self) -> String {
    self.append_string_to_skribble_value("indigo300")
  }
  #[inline]
  fn indigo400(&self) -> String {
    self.append_string_to_skribble_value("indigo400")
  }
  #[inline]
  fn indigo500(&self) -> String {
    self.append_string_to_skribble_value("indigo500")
  }
  #[inline]
  fn indigo600(&self) -> String {
    self.append_string_to_skribble_value("indigo600")
  }
  #[inline]
  fn indigo700(&self) -> String {
    self.append_string_to_skribble_value("indigo700")
  }
  #[inline]
  fn indigo800(&self) -> String {
    self.append_string_to_skribble_value("indigo800")
  }
  #[inline]
  fn indigo900(&self) -> String {
    self.append_string_to_skribble_value("indigo900")
  }
  #[inline]
  fn violet50(&self) -> String {
    self.append_string_to_skribble_value("violet50")
  }
  #[inline]
  fn violet100(&self) -> String {
    self.append_string_to_skribble_value("violet100")
  }
  #[inline]
  fn violet200(&self) -> String {
    self.append_string_to_skribble_value("violet200")
  }
  #[inline]
  fn violet300(&self) -> String {
    self.append_string_to_skribble_value("violet300")
  }
  #[inline]
  fn violet400(&self) -> String {
    self.append_string_to_skribble_value("violet400")
  }
  #[inline]
  fn violet500(&self) -> String {
    self.append_string_to_skribble_value("violet500")
  }
  #[inline]
  fn violet600(&self) -> String {
    self.append_string_to_skribble_value("violet600")
  }
  #[inline]
  fn violet700(&self) -> String {
    self.append_string_to_skribble_value("violet700")
  }
  #[inline]
  fn violet800(&self) -> String {
    self.append_string_to_skribble_value("violet800")
  }
  #[inline]
  fn violet900(&self) -> String {
    self.append_string_to_skribble_value("violet900")
  }
  #[inline]
  fn purple50(&self) -> String {
    self.append_string_to_skribble_value("purple50")
  }
  #[inline]
  fn purple100(&self) -> String {
    self.append_string_to_skribble_value("purple100")
  }
  #[inline]
  fn purple200(&self) -> String {
    self.append_string_to_skribble_value("purple200")
  }
  #[inline]
  fn purple300(&self) -> String {
    self.append_string_to_skribble_value("purple300")
  }
  #[inline]
  fn purple400(&self) -> String {
    self.append_string_to_skribble_value("purple400")
  }
  #[inline]
  fn purple500(&self) -> String {
    self.append_string_to_skribble_value("purple500")
  }
  #[inline]
  fn purple600(&self) -> String {
    self.append_string_to_skribble_value("purple600")
  }
  #[inline]
  fn purple700(&self) -> String {
    self.append_string_to_skribble_value("purple700")
  }
  #[inline]
  fn purple800(&self) -> String {
    self.append_string_to_skribble_value("purple800")
  }
  #[inline]
  fn purple900(&self) -> String {
    self.append_string_to_skribble_value("purple900")
  }
  #[inline]
  fn fuchsia50(&self) -> String {
    self.append_string_to_skribble_value("fuchsia50")
  }
  #[inline]
  fn fuchsia100(&self) -> String {
    self.append_string_to_skribble_value("fuchsia100")
  }
  #[inline]
  fn fuchsia200(&self) -> String {
    self.append_string_to_skribble_value("fuchsia200")
  }
  #[inline]
  fn fuchsia300(&self) -> String {
    self.append_string_to_skribble_value("fuchsia300")
  }
  #[inline]
  fn fuchsia400(&self) -> String {
    self.append_string_to_skribble_value("fuchsia400")
  }
  #[inline]
  fn fuchsia500(&self) -> String {
    self.append_string_to_skribble_value("fuchsia500")
  }
  #[inline]
  fn fuchsia600(&self) -> String {
    self.append_string_to_skribble_value("fuchsia600")
  }
  #[inline]
  fn fuchsia700(&self) -> String {
    self.append_string_to_skribble_value("fuchsia700")
  }
  #[inline]
  fn fuchsia800(&self) -> String {
    self.append_string_to_skribble_value("fuchsia800")
  }
  #[inline]
  fn fuchsia900(&self) -> String {
    self.append_string_to_skribble_value("fuchsia900")
  }
  #[inline]
  fn pink50(&self) -> String {
    self.append_string_to_skribble_value("pink50")
  }
  #[inline]
  fn pink100(&self) -> String {
    self.append_string_to_skribble_value("pink100")
  }
  #[inline]
  fn pink200(&self) -> String {
    self.append_string_to_skribble_value("pink200")
  }
  #[inline]
  fn pink300(&self) -> String {
    self.append_string_to_skribble_value("pink300")
  }
  #[inline]
  fn pink400(&self) -> String {
    self.append_string_to_skribble_value("pink400")
  }
  #[inline]
  fn pink500(&self) -> String {
    self.append_string_to_skribble_value("pink500")
  }
  #[inline]
  fn pink600(&self) -> String {
    self.append_string_to_skribble_value("pink600")
  }
  #[inline]
  fn pink700(&self) -> String {
    self.append_string_to_skribble_value("pink700")
  }
  #[inline]
  fn pink800(&self) -> String {
    self.append_string_to_skribble_value("pink800")
  }
  #[inline]
  fn pink900(&self) -> String {
    self.append_string_to_skribble_value("pink900")
  }
  #[inline]
  fn rose50(&self) -> String {
    self.append_string_to_skribble_value("rose50")
  }
  #[inline]
  fn rose100(&self) -> String {
    self.append_string_to_skribble_value("rose100")
  }
  #[inline]
  fn rose200(&self) -> String {
    self.append_string_to_skribble_value("rose200")
  }
  #[inline]
  fn rose300(&self) -> String {
    self.append_string_to_skribble_value("rose300")
  }
  #[inline]
  fn rose400(&self) -> String {
    self.append_string_to_skribble_value("rose400")
  }
  #[inline]
  fn rose500(&self) -> String {
    self.append_string_to_skribble_value("rose500")
  }
  #[inline]
  fn rose600(&self) -> String {
    self.append_string_to_skribble_value("rose600")
  }
  #[inline]
  fn rose700(&self) -> String {
    self.append_string_to_skribble_value("rose700")
  }
  #[inline]
  fn rose800(&self) -> String {
    self.append_string_to_skribble_value("rose800")
  }
  #[inline]
  fn rose900(&self) -> String {
    self.append_string_to_skribble_value("rose900")
  }
}
pub struct AtomSr(String);
impl SkribbleValue for AtomSr {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetScreenReader for AtomSr {}
pub struct AtomTransition(String);
impl SkribbleValue for AtomTransition {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetTransitions for AtomTransition {}
pub struct AtomTransitionProperty(String);
impl SkribbleValue for AtomTransitionProperty {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetTransitionProperties for AtomTransitionProperty {}
pub struct AtomDuration(String);
impl SkribbleValue for AtomDuration {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetDurations for AtomDuration {}
pub struct AtomEase(String);
impl SkribbleValue for AtomEase {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetEasing for AtomEase {}
pub struct AtomDelay(String);
impl SkribbleValue for AtomDelay {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetDurations for AtomDelay {}
pub struct AtomAnimate(String);
impl SkribbleValue for AtomAnimate {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetDurations for AtomAnimate {}
pub struct AtomAnimationDuration(String);
impl SkribbleValue for AtomAnimationDuration {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetDurations for AtomAnimationDuration {}
pub struct AtomAnimationEasing(String);
impl SkribbleValue for AtomAnimationEasing {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetEasing for AtomAnimationEasing {}
pub struct AtomAnimationDelay(String);
impl SkribbleValue for AtomAnimationDelay {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetDurations for AtomAnimationDelay {}
pub struct AtomAnimationRepeat(String);
impl SkribbleValue for AtomAnimationRepeat {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetAnimationRepetitions for AtomAnimationRepeat {}
pub struct AtomAnimationDirection(String);
impl SkribbleValue for AtomAnimationDirection {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetAnimationDirection for AtomAnimationDirection {}
pub struct AtomAnimationFillMode(String);
impl SkribbleValue for AtomAnimationFillMode {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetAnimationFillMode for AtomAnimationFillMode {}
pub struct AtomAnimationState(String);
impl SkribbleValue for AtomAnimationState {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetAnimationState for AtomAnimationState {}
pub struct AtomZoom(String);
impl SkribbleValue for AtomZoom {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetZoom for AtomZoom {}
pub struct AtomFont(String);
impl SkribbleValue for AtomFont {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetFonts for AtomFont {}
pub struct AtomP(String);
impl SkribbleValue for AtomP {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomP {}
pub struct AtomPy(String);
impl SkribbleValue for AtomPy {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPy {}
pub struct AtomPx(String);
impl SkribbleValue for AtomPx {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPx {}
pub struct AtomPt(String);
impl SkribbleValue for AtomPt {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPt {}
pub struct AtomPr(String);
impl SkribbleValue for AtomPr {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPr {}
pub struct AtomPb(String);
impl SkribbleValue for AtomPb {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPb {}
pub struct AtomPl(String);
impl SkribbleValue for AtomPl {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPl {}
pub struct AtomPbl(String);
impl SkribbleValue for AtomPbl {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPbl {}
pub struct AtomPbls(String);
impl SkribbleValue for AtomPbls {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPbls {}
pub struct AtomPble(String);
impl SkribbleValue for AtomPble {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPble {}
pub struct AtomPin(String);
impl SkribbleValue for AtomPin {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPin {}
pub struct AtomPins(String);
impl SkribbleValue for AtomPins {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPins {}
pub struct AtomPine(String);
impl SkribbleValue for AtomPine {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomPine {}
pub struct AtomM(String);
impl SkribbleValue for AtomM {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomM {}
pub struct AtomMy(String);
impl SkribbleValue for AtomMy {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomMy {}
pub struct AtomMx(String);
impl SkribbleValue for AtomMx {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomMx {}
pub struct AtomMt(String);
impl SkribbleValue for AtomMt {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomMt {}
pub struct AtomMr(String);
impl SkribbleValue for AtomMr {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomMr {}
pub struct AtomMb(String);
impl SkribbleValue for AtomMb {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomMb {}
pub struct AtomMl(String);
impl SkribbleValue for AtomMl {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetSpacing for AtomMl {}
pub struct AtomZ(String);
impl SkribbleValue for AtomZ {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetZIndex for AtomZ {}
pub struct AtomDir(String);
impl SkribbleValue for AtomDir {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetDirection for AtomDir {}
pub struct AtomBg(String);
impl SkribbleValue for AtomBg {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl Color for AtomBg {}
impl Palette for AtomBg {}
pub struct AtomBgOpacity(String);
impl SkribbleValue for AtomBgOpacity {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetOpacity for AtomBgOpacity {}
pub struct AtomOpacity(String);
impl SkribbleValue for AtomOpacity {
  #[inline]
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  #[inline]
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
impl ValueSetOpacity for AtomOpacity {}
pub trait Atom: SkribbleValue {
  /// Screen reader only
  #[inline]
  fn sr(&self) -> AtomSr {
    AtomSr::from_ref(self.append_to_skribble_value("sr"))
  }
  /// A class to apply transition effects.
  #[inline]
  fn transition(&self) -> AtomTransition {
    AtomTransition::from_ref(self.append_to_skribble_value("transition"))
  }
  #[inline]
  fn transition_property(&self) -> AtomTransitionProperty {
    AtomTransitionProperty::from_ref(self.append_to_skribble_value("transitionProperty"))
  }
  #[inline]
  fn duration(&self) -> AtomDuration {
    AtomDuration::from_ref(self.append_to_skribble_value("duration"))
  }
  #[inline]
  fn ease(&self) -> AtomEase {
    AtomEase::from_ref(self.append_to_skribble_value("ease"))
  }
  #[inline]
  fn delay(&self) -> AtomDelay {
    AtomDelay::from_ref(self.append_to_skribble_value("delay"))
  }
  #[inline]
  fn animate(&self) -> AtomAnimate {
    AtomAnimate::from_ref(self.append_to_skribble_value("animate"))
  }
  #[inline]
  fn animation_duration(&self) -> AtomAnimationDuration {
    AtomAnimationDuration::from_ref(self.append_to_skribble_value("animationDuration"))
  }
  #[inline]
  fn animation_easing(&self) -> AtomAnimationEasing {
    AtomAnimationEasing::from_ref(self.append_to_skribble_value("animationEasing"))
  }
  #[inline]
  fn animation_delay(&self) -> AtomAnimationDelay {
    AtomAnimationDelay::from_ref(self.append_to_skribble_value("animationDelay"))
  }
  #[inline]
  fn animation_repeat(&self) -> AtomAnimationRepeat {
    AtomAnimationRepeat::from_ref(self.append_to_skribble_value("animationRepeat"))
  }
  #[inline]
  fn animation_direction(&self) -> AtomAnimationDirection {
    AtomAnimationDirection::from_ref(self.append_to_skribble_value("animationDirection"))
  }
  #[inline]
  fn animation_fill_mode(&self) -> AtomAnimationFillMode {
    AtomAnimationFillMode::from_ref(self.append_to_skribble_value("animationFillMode"))
  }
  #[inline]
  fn animation_state(&self) -> AtomAnimationState {
    AtomAnimationState::from_ref(self.append_to_skribble_value("animationState"))
  }
  #[inline]
  fn zoom(&self) -> AtomZoom {
    AtomZoom::from_ref(self.append_to_skribble_value("zoom"))
  }
  #[inline]
  fn font(&self) -> AtomFont {
    AtomFont::from_ref(self.append_to_skribble_value("font"))
  }
  #[inline]
  fn p(&self) -> AtomP {
    AtomP::from_ref(self.append_to_skribble_value("p"))
  }
  #[inline]
  fn py(&self) -> AtomPy {
    AtomPy::from_ref(self.append_to_skribble_value("py"))
  }
  #[inline]
  fn px(&self) -> AtomPx {
    AtomPx::from_ref(self.append_to_skribble_value("px"))
  }
  #[inline]
  fn pt(&self) -> AtomPt {
    AtomPt::from_ref(self.append_to_skribble_value("pt"))
  }
  #[inline]
  fn pr(&self) -> AtomPr {
    AtomPr::from_ref(self.append_to_skribble_value("pr"))
  }
  #[inline]
  fn pb(&self) -> AtomPb {
    AtomPb::from_ref(self.append_to_skribble_value("pb"))
  }
  #[inline]
  fn pl(&self) -> AtomPl {
    AtomPl::from_ref(self.append_to_skribble_value("pl"))
  }
  #[inline]
  fn pbl(&self) -> AtomPbl {
    AtomPbl::from_ref(self.append_to_skribble_value("pbl"))
  }
  #[inline]
  fn pbls(&self) -> AtomPbls {
    AtomPbls::from_ref(self.append_to_skribble_value("pbls"))
  }
  #[inline]
  fn pble(&self) -> AtomPble {
    AtomPble::from_ref(self.append_to_skribble_value("pble"))
  }
  #[inline]
  fn pin(&self) -> AtomPin {
    AtomPin::from_ref(self.append_to_skribble_value("pin"))
  }
  #[inline]
  fn pins(&self) -> AtomPins {
    AtomPins::from_ref(self.append_to_skribble_value("pins"))
  }
  #[inline]
  fn pine(&self) -> AtomPine {
    AtomPine::from_ref(self.append_to_skribble_value("pine"))
  }
  #[inline]
  fn m(&self) -> AtomM {
    AtomM::from_ref(self.append_to_skribble_value("m"))
  }
  #[inline]
  fn my(&self) -> AtomMy {
    AtomMy::from_ref(self.append_to_skribble_value("my"))
  }
  #[inline]
  fn mx(&self) -> AtomMx {
    AtomMx::from_ref(self.append_to_skribble_value("mx"))
  }
  #[inline]
  fn mt(&self) -> AtomMt {
    AtomMt::from_ref(self.append_to_skribble_value("mt"))
  }
  #[inline]
  fn mr(&self) -> AtomMr {
    AtomMr::from_ref(self.append_to_skribble_value("mr"))
  }
  #[inline]
  fn mb(&self) -> AtomMb {
    AtomMb::from_ref(self.append_to_skribble_value("mb"))
  }
  #[inline]
  fn ml(&self) -> AtomMl {
    AtomMl::from_ref(self.append_to_skribble_value("ml"))
  }
  #[inline]
  fn z(&self) -> AtomZ {
    AtomZ::from_ref(self.append_to_skribble_value("z"))
  }
  #[inline]
  fn dir(&self) -> AtomDir {
    AtomDir::from_ref(self.append_to_skribble_value("dir"))
  }
  #[inline]
  fn bg(&self) -> AtomBg {
    AtomBg::from_ref(self.append_to_skribble_value("bg"))
  }
  #[inline]
  fn bg_opacity(&self) -> AtomBgOpacity {
    AtomBgOpacity::from_ref(self.append_to_skribble_value("bgOpacity"))
  }
  #[inline]
  fn opacity(&self) -> AtomOpacity {
    AtomOpacity::from_ref(self.append_to_skribble_value("opacity"))
  }
}
pub trait NamedClasses: SkribbleValue {
  #[inline]
  fn group(&self) -> String {
    self.append_string_to_skribble_value("group")
  }
  #[inline]
  fn container(&self) -> String {
    self.append_string_to_skribble_value("container")
  }
  #[inline]
  fn italic(&self) -> String {
    self.append_string_to_skribble_value("italic")
  }
  #[inline]
  fn non_italic(&self) -> String {
    self.append_string_to_skribble_value("nonItalic")
  }
  #[inline]
  fn oblique(&self) -> String {
    self.append_string_to_skribble_value("oblique")
  }
  #[inline]
  fn antialiased(&self) -> String {
    self.append_string_to_skribble_value("antialiased")
  }
  #[inline]
  fn subpixel_antialiased(&self) -> String {
    self.append_string_to_skribble_value("subpixelAntialiased")
  }
  #[inline]
  fn block(&self) -> String {
    self.append_string_to_skribble_value("block")
  }
  #[inline]
  fn inline_block(&self) -> String {
    self.append_string_to_skribble_value("inlineBlock")
  }
  #[inline]
  fn inline(&self) -> String {
    self.append_string_to_skribble_value("inline")
  }
  #[inline]
  fn flow_root(&self) -> String {
    self.append_string_to_skribble_value("flowRoot")
  }
  #[inline]
  fn content(&self) -> String {
    self.append_string_to_skribble_value("content")
  }
  #[inline]
  fn hidden(&self) -> String {
    self.append_string_to_skribble_value("hidden")
  }
  #[inline]
  fn invisible(&self) -> String {
    self.append_string_to_skribble_value("invisible")
  }
  #[inline]
  fn visible(&self) -> String {
    self.append_string_to_skribble_value("visible")
  }
  #[inline]
  fn remove_filter(&self) -> String {
    self.append_string_to_skribble_value("removeFilter")
  }
  #[inline]
  fn remove_backdrop(&self) -> String {
    self.append_string_to_skribble_value("removeBackdrop")
  }
  #[inline]
  fn transform_gpu(&self) -> String {
    self.append_string_to_skribble_value("transformGpu")
  }
  #[inline]
  fn transform_cpu(&self) -> String {
    self.append_string_to_skribble_value("transformCpu")
  }
}
impl MediaQueryDeviceCategories for SkribbleRoot {}
impl MediaQueryBreakpoints for SkribbleRoot {}
impl MediaQueryOrientation for SkribbleRoot {}
impl MediaQueryMotion for SkribbleRoot {}
impl MediaQueryDarkMode for SkribbleRoot {}
impl ModifierParentGroup for SkribbleRoot {}
impl ModifierHoverGroup for SkribbleRoot {}
impl ModifierActiveGroup for SkribbleRoot {}
impl ModifierFocusGroup for SkribbleRoot {}
impl ModifierFocusWithinGroup for SkribbleRoot {}
impl ModifierFocusVisibleGroup for SkribbleRoot {}
impl ModifierEnabledGroup for SkribbleRoot {}
impl ModifierEmptyGroup for SkribbleRoot {}
impl ModifierReadGroup for SkribbleRoot {}
impl ModifierExpandedGroup for SkribbleRoot {}
impl ModifierCheckedGroup for SkribbleRoot {}
impl ModifierGrabbedGroup for SkribbleRoot {}
impl ModifierPressedGroup for SkribbleRoot {}
impl ModifierInvalidGrammarGroup for SkribbleRoot {}
impl ModifierInvalidSpellingGroup for SkribbleRoot {}
impl ModifierValidGroup for SkribbleRoot {}
impl ModifierLoadingGroup for SkribbleRoot {}
impl ModifierSelectedGroup for SkribbleRoot {}
impl ModifierHiddenGroup for SkribbleRoot {}
impl ModifierAutofillGroup for SkribbleRoot {}
impl ModifierEvenGroup for SkribbleRoot {}
impl ModifierNodePositionGroup for SkribbleRoot {}
impl ModifierNodeOfTypeGroup for SkribbleRoot {}
impl ModifierVisitedGroup for SkribbleRoot {}
impl ModifierOptionalGroup for SkribbleRoot {}
impl ModifierFullScreenGroup for SkribbleRoot {}
impl ModifierTargetGroup for SkribbleRoot {}
impl ModifierPlaceholderShownGroup for SkribbleRoot {}
impl ModifierRequiredGroup for SkribbleRoot {}
impl ModifierDefaultGroup for SkribbleRoot {}
impl ModifierOnlyChildGroup for SkribbleRoot {}
impl ModifierOnlyGroup for SkribbleRoot {}
impl ModifierRootGroup for SkribbleRoot {}
impl ModifierLinkGroup for SkribbleRoot {}
impl ModifierPseudoGroup for SkribbleRoot {}
impl Atom for SkribbleRoot {}
impl NamedClasses for SkribbleRoot {}
impl MediaQueryBreakpoints for MediaQueryDeviceCategoriesChild {}
impl MediaQueryOrientation for MediaQueryDeviceCategoriesChild {}
impl MediaQueryMotion for MediaQueryDeviceCategoriesChild {}
impl MediaQueryDarkMode for MediaQueryDeviceCategoriesChild {}
impl ModifierParentGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierHoverGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierActiveGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierFocusGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierFocusWithinGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierFocusVisibleGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierEnabledGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierEmptyGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierReadGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierExpandedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierCheckedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierGrabbedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierPressedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierInvalidGrammarGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierInvalidSpellingGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierValidGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierLoadingGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierSelectedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierHiddenGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierAutofillGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierEvenGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierNodePositionGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierNodeOfTypeGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierVisitedGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierOptionalGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierFullScreenGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierTargetGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierPlaceholderShownGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierRequiredGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierDefaultGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierOnlyChildGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierOnlyGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierRootGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierLinkGroup for MediaQueryDeviceCategoriesChild {}
impl ModifierPseudoGroup for MediaQueryDeviceCategoriesChild {}
impl Atom for MediaQueryDeviceCategoriesChild {}
impl NamedClasses for MediaQueryDeviceCategoriesChild {}
impl MediaQueryOrientation for MediaQueryBreakpointsChild {}
impl MediaQueryMotion for MediaQueryBreakpointsChild {}
impl MediaQueryDarkMode for MediaQueryBreakpointsChild {}
impl ModifierParentGroup for MediaQueryBreakpointsChild {}
impl ModifierHoverGroup for MediaQueryBreakpointsChild {}
impl ModifierActiveGroup for MediaQueryBreakpointsChild {}
impl ModifierFocusGroup for MediaQueryBreakpointsChild {}
impl ModifierFocusWithinGroup for MediaQueryBreakpointsChild {}
impl ModifierFocusVisibleGroup for MediaQueryBreakpointsChild {}
impl ModifierEnabledGroup for MediaQueryBreakpointsChild {}
impl ModifierEmptyGroup for MediaQueryBreakpointsChild {}
impl ModifierReadGroup for MediaQueryBreakpointsChild {}
impl ModifierExpandedGroup for MediaQueryBreakpointsChild {}
impl ModifierCheckedGroup for MediaQueryBreakpointsChild {}
impl ModifierGrabbedGroup for MediaQueryBreakpointsChild {}
impl ModifierPressedGroup for MediaQueryBreakpointsChild {}
impl ModifierInvalidGrammarGroup for MediaQueryBreakpointsChild {}
impl ModifierInvalidSpellingGroup for MediaQueryBreakpointsChild {}
impl ModifierValidGroup for MediaQueryBreakpointsChild {}
impl ModifierLoadingGroup for MediaQueryBreakpointsChild {}
impl ModifierSelectedGroup for MediaQueryBreakpointsChild {}
impl ModifierHiddenGroup for MediaQueryBreakpointsChild {}
impl ModifierAutofillGroup for MediaQueryBreakpointsChild {}
impl ModifierEvenGroup for MediaQueryBreakpointsChild {}
impl ModifierNodePositionGroup for MediaQueryBreakpointsChild {}
impl ModifierNodeOfTypeGroup for MediaQueryBreakpointsChild {}
impl ModifierVisitedGroup for MediaQueryBreakpointsChild {}
impl ModifierOptionalGroup for MediaQueryBreakpointsChild {}
impl ModifierFullScreenGroup for MediaQueryBreakpointsChild {}
impl ModifierTargetGroup for MediaQueryBreakpointsChild {}
impl ModifierPlaceholderShownGroup for MediaQueryBreakpointsChild {}
impl ModifierRequiredGroup for MediaQueryBreakpointsChild {}
impl ModifierDefaultGroup for MediaQueryBreakpointsChild {}
impl ModifierOnlyChildGroup for MediaQueryBreakpointsChild {}
impl ModifierOnlyGroup for MediaQueryBreakpointsChild {}
impl ModifierRootGroup for MediaQueryBreakpointsChild {}
impl ModifierLinkGroup for MediaQueryBreakpointsChild {}
impl ModifierPseudoGroup for MediaQueryBreakpointsChild {}
impl Atom for MediaQueryBreakpointsChild {}
impl NamedClasses for MediaQueryBreakpointsChild {}
impl MediaQueryMotion for MediaQueryOrientationChild {}
impl MediaQueryDarkMode for MediaQueryOrientationChild {}
impl ModifierParentGroup for MediaQueryOrientationChild {}
impl ModifierHoverGroup for MediaQueryOrientationChild {}
impl ModifierActiveGroup for MediaQueryOrientationChild {}
impl ModifierFocusGroup for MediaQueryOrientationChild {}
impl ModifierFocusWithinGroup for MediaQueryOrientationChild {}
impl ModifierFocusVisibleGroup for MediaQueryOrientationChild {}
impl ModifierEnabledGroup for MediaQueryOrientationChild {}
impl ModifierEmptyGroup for MediaQueryOrientationChild {}
impl ModifierReadGroup for MediaQueryOrientationChild {}
impl ModifierExpandedGroup for MediaQueryOrientationChild {}
impl ModifierCheckedGroup for MediaQueryOrientationChild {}
impl ModifierGrabbedGroup for MediaQueryOrientationChild {}
impl ModifierPressedGroup for MediaQueryOrientationChild {}
impl ModifierInvalidGrammarGroup for MediaQueryOrientationChild {}
impl ModifierInvalidSpellingGroup for MediaQueryOrientationChild {}
impl ModifierValidGroup for MediaQueryOrientationChild {}
impl ModifierLoadingGroup for MediaQueryOrientationChild {}
impl ModifierSelectedGroup for MediaQueryOrientationChild {}
impl ModifierHiddenGroup for MediaQueryOrientationChild {}
impl ModifierAutofillGroup for MediaQueryOrientationChild {}
impl ModifierEvenGroup for MediaQueryOrientationChild {}
impl ModifierNodePositionGroup for MediaQueryOrientationChild {}
impl ModifierNodeOfTypeGroup for MediaQueryOrientationChild {}
impl ModifierVisitedGroup for MediaQueryOrientationChild {}
impl ModifierOptionalGroup for MediaQueryOrientationChild {}
impl ModifierFullScreenGroup for MediaQueryOrientationChild {}
impl ModifierTargetGroup for MediaQueryOrientationChild {}
impl ModifierPlaceholderShownGroup for MediaQueryOrientationChild {}
impl ModifierRequiredGroup for MediaQueryOrientationChild {}
impl ModifierDefaultGroup for MediaQueryOrientationChild {}
impl ModifierOnlyChildGroup for MediaQueryOrientationChild {}
impl ModifierOnlyGroup for MediaQueryOrientationChild {}
impl ModifierRootGroup for MediaQueryOrientationChild {}
impl ModifierLinkGroup for MediaQueryOrientationChild {}
impl ModifierPseudoGroup for MediaQueryOrientationChild {}
impl Atom for MediaQueryOrientationChild {}
impl NamedClasses for MediaQueryOrientationChild {}
impl MediaQueryDarkMode for MediaQueryMotionChild {}
impl ModifierParentGroup for MediaQueryMotionChild {}
impl ModifierHoverGroup for MediaQueryMotionChild {}
impl ModifierActiveGroup for MediaQueryMotionChild {}
impl ModifierFocusGroup for MediaQueryMotionChild {}
impl ModifierFocusWithinGroup for MediaQueryMotionChild {}
impl ModifierFocusVisibleGroup for MediaQueryMotionChild {}
impl ModifierEnabledGroup for MediaQueryMotionChild {}
impl ModifierEmptyGroup for MediaQueryMotionChild {}
impl ModifierReadGroup for MediaQueryMotionChild {}
impl ModifierExpandedGroup for MediaQueryMotionChild {}
impl ModifierCheckedGroup for MediaQueryMotionChild {}
impl ModifierGrabbedGroup for MediaQueryMotionChild {}
impl ModifierPressedGroup for MediaQueryMotionChild {}
impl ModifierInvalidGrammarGroup for MediaQueryMotionChild {}
impl ModifierInvalidSpellingGroup for MediaQueryMotionChild {}
impl ModifierValidGroup for MediaQueryMotionChild {}
impl ModifierLoadingGroup for MediaQueryMotionChild {}
impl ModifierSelectedGroup for MediaQueryMotionChild {}
impl ModifierHiddenGroup for MediaQueryMotionChild {}
impl ModifierAutofillGroup for MediaQueryMotionChild {}
impl ModifierEvenGroup for MediaQueryMotionChild {}
impl ModifierNodePositionGroup for MediaQueryMotionChild {}
impl ModifierNodeOfTypeGroup for MediaQueryMotionChild {}
impl ModifierVisitedGroup for MediaQueryMotionChild {}
impl ModifierOptionalGroup for MediaQueryMotionChild {}
impl ModifierFullScreenGroup for MediaQueryMotionChild {}
impl ModifierTargetGroup for MediaQueryMotionChild {}
impl ModifierPlaceholderShownGroup for MediaQueryMotionChild {}
impl ModifierRequiredGroup for MediaQueryMotionChild {}
impl ModifierDefaultGroup for MediaQueryMotionChild {}
impl ModifierOnlyChildGroup for MediaQueryMotionChild {}
impl ModifierOnlyGroup for MediaQueryMotionChild {}
impl ModifierRootGroup for MediaQueryMotionChild {}
impl ModifierLinkGroup for MediaQueryMotionChild {}
impl ModifierPseudoGroup for MediaQueryMotionChild {}
impl Atom for MediaQueryMotionChild {}
impl NamedClasses for MediaQueryMotionChild {}
impl ModifierParentGroup for MediaQueryDarkModeChild {}
impl ModifierHoverGroup for MediaQueryDarkModeChild {}
impl ModifierActiveGroup for MediaQueryDarkModeChild {}
impl ModifierFocusGroup for MediaQueryDarkModeChild {}
impl ModifierFocusWithinGroup for MediaQueryDarkModeChild {}
impl ModifierFocusVisibleGroup for MediaQueryDarkModeChild {}
impl ModifierEnabledGroup for MediaQueryDarkModeChild {}
impl ModifierEmptyGroup for MediaQueryDarkModeChild {}
impl ModifierReadGroup for MediaQueryDarkModeChild {}
impl ModifierExpandedGroup for MediaQueryDarkModeChild {}
impl ModifierCheckedGroup for MediaQueryDarkModeChild {}
impl ModifierGrabbedGroup for MediaQueryDarkModeChild {}
impl ModifierPressedGroup for MediaQueryDarkModeChild {}
impl ModifierInvalidGrammarGroup for MediaQueryDarkModeChild {}
impl ModifierInvalidSpellingGroup for MediaQueryDarkModeChild {}
impl ModifierValidGroup for MediaQueryDarkModeChild {}
impl ModifierLoadingGroup for MediaQueryDarkModeChild {}
impl ModifierSelectedGroup for MediaQueryDarkModeChild {}
impl ModifierHiddenGroup for MediaQueryDarkModeChild {}
impl ModifierAutofillGroup for MediaQueryDarkModeChild {}
impl ModifierEvenGroup for MediaQueryDarkModeChild {}
impl ModifierNodePositionGroup for MediaQueryDarkModeChild {}
impl ModifierNodeOfTypeGroup for MediaQueryDarkModeChild {}
impl ModifierVisitedGroup for MediaQueryDarkModeChild {}
impl ModifierOptionalGroup for MediaQueryDarkModeChild {}
impl ModifierFullScreenGroup for MediaQueryDarkModeChild {}
impl ModifierTargetGroup for MediaQueryDarkModeChild {}
impl ModifierPlaceholderShownGroup for MediaQueryDarkModeChild {}
impl ModifierRequiredGroup for MediaQueryDarkModeChild {}
impl ModifierDefaultGroup for MediaQueryDarkModeChild {}
impl ModifierOnlyChildGroup for MediaQueryDarkModeChild {}
impl ModifierOnlyGroup for MediaQueryDarkModeChild {}
impl ModifierRootGroup for MediaQueryDarkModeChild {}
impl ModifierLinkGroup for MediaQueryDarkModeChild {}
impl ModifierPseudoGroup for MediaQueryDarkModeChild {}
impl Atom for MediaQueryDarkModeChild {}
impl NamedClasses for MediaQueryDarkModeChild {}
impl ModifierHoverGroup for ModifierParentGroupChild {}
impl ModifierActiveGroup for ModifierParentGroupChild {}
impl ModifierFocusGroup for ModifierParentGroupChild {}
impl ModifierFocusWithinGroup for ModifierParentGroupChild {}
impl ModifierFocusVisibleGroup for ModifierParentGroupChild {}
impl ModifierEnabledGroup for ModifierParentGroupChild {}
impl ModifierEmptyGroup for ModifierParentGroupChild {}
impl ModifierReadGroup for ModifierParentGroupChild {}
impl ModifierExpandedGroup for ModifierParentGroupChild {}
impl ModifierCheckedGroup for ModifierParentGroupChild {}
impl ModifierGrabbedGroup for ModifierParentGroupChild {}
impl ModifierPressedGroup for ModifierParentGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierParentGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierParentGroupChild {}
impl ModifierValidGroup for ModifierParentGroupChild {}
impl ModifierLoadingGroup for ModifierParentGroupChild {}
impl ModifierSelectedGroup for ModifierParentGroupChild {}
impl ModifierHiddenGroup for ModifierParentGroupChild {}
impl ModifierAutofillGroup for ModifierParentGroupChild {}
impl ModifierEvenGroup for ModifierParentGroupChild {}
impl ModifierNodePositionGroup for ModifierParentGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierParentGroupChild {}
impl ModifierVisitedGroup for ModifierParentGroupChild {}
impl ModifierOptionalGroup for ModifierParentGroupChild {}
impl ModifierFullScreenGroup for ModifierParentGroupChild {}
impl ModifierTargetGroup for ModifierParentGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierParentGroupChild {}
impl ModifierRequiredGroup for ModifierParentGroupChild {}
impl ModifierDefaultGroup for ModifierParentGroupChild {}
impl ModifierOnlyChildGroup for ModifierParentGroupChild {}
impl ModifierOnlyGroup for ModifierParentGroupChild {}
impl ModifierRootGroup for ModifierParentGroupChild {}
impl ModifierLinkGroup for ModifierParentGroupChild {}
impl ModifierPseudoGroup for ModifierParentGroupChild {}
impl Atom for ModifierParentGroupChild {}
impl NamedClasses for ModifierParentGroupChild {}
impl ModifierActiveGroup for ModifierHoverGroupChild {}
impl ModifierFocusGroup for ModifierHoverGroupChild {}
impl ModifierFocusWithinGroup for ModifierHoverGroupChild {}
impl ModifierFocusVisibleGroup for ModifierHoverGroupChild {}
impl ModifierEnabledGroup for ModifierHoverGroupChild {}
impl ModifierEmptyGroup for ModifierHoverGroupChild {}
impl ModifierReadGroup for ModifierHoverGroupChild {}
impl ModifierExpandedGroup for ModifierHoverGroupChild {}
impl ModifierCheckedGroup for ModifierHoverGroupChild {}
impl ModifierGrabbedGroup for ModifierHoverGroupChild {}
impl ModifierPressedGroup for ModifierHoverGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierHoverGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierHoverGroupChild {}
impl ModifierValidGroup for ModifierHoverGroupChild {}
impl ModifierLoadingGroup for ModifierHoverGroupChild {}
impl ModifierSelectedGroup for ModifierHoverGroupChild {}
impl ModifierHiddenGroup for ModifierHoverGroupChild {}
impl ModifierAutofillGroup for ModifierHoverGroupChild {}
impl ModifierEvenGroup for ModifierHoverGroupChild {}
impl ModifierNodePositionGroup for ModifierHoverGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierHoverGroupChild {}
impl ModifierVisitedGroup for ModifierHoverGroupChild {}
impl ModifierOptionalGroup for ModifierHoverGroupChild {}
impl ModifierFullScreenGroup for ModifierHoverGroupChild {}
impl ModifierTargetGroup for ModifierHoverGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierHoverGroupChild {}
impl ModifierRequiredGroup for ModifierHoverGroupChild {}
impl ModifierDefaultGroup for ModifierHoverGroupChild {}
impl ModifierOnlyChildGroup for ModifierHoverGroupChild {}
impl ModifierOnlyGroup for ModifierHoverGroupChild {}
impl ModifierRootGroup for ModifierHoverGroupChild {}
impl ModifierLinkGroup for ModifierHoverGroupChild {}
impl ModifierPseudoGroup for ModifierHoverGroupChild {}
impl Atom for ModifierHoverGroupChild {}
impl NamedClasses for ModifierHoverGroupChild {}
impl ModifierFocusGroup for ModifierActiveGroupChild {}
impl ModifierFocusWithinGroup for ModifierActiveGroupChild {}
impl ModifierFocusVisibleGroup for ModifierActiveGroupChild {}
impl ModifierEnabledGroup for ModifierActiveGroupChild {}
impl ModifierEmptyGroup for ModifierActiveGroupChild {}
impl ModifierReadGroup for ModifierActiveGroupChild {}
impl ModifierExpandedGroup for ModifierActiveGroupChild {}
impl ModifierCheckedGroup for ModifierActiveGroupChild {}
impl ModifierGrabbedGroup for ModifierActiveGroupChild {}
impl ModifierPressedGroup for ModifierActiveGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierActiveGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierActiveGroupChild {}
impl ModifierValidGroup for ModifierActiveGroupChild {}
impl ModifierLoadingGroup for ModifierActiveGroupChild {}
impl ModifierSelectedGroup for ModifierActiveGroupChild {}
impl ModifierHiddenGroup for ModifierActiveGroupChild {}
impl ModifierAutofillGroup for ModifierActiveGroupChild {}
impl ModifierEvenGroup for ModifierActiveGroupChild {}
impl ModifierNodePositionGroup for ModifierActiveGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierActiveGroupChild {}
impl ModifierVisitedGroup for ModifierActiveGroupChild {}
impl ModifierOptionalGroup for ModifierActiveGroupChild {}
impl ModifierFullScreenGroup for ModifierActiveGroupChild {}
impl ModifierTargetGroup for ModifierActiveGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierActiveGroupChild {}
impl ModifierRequiredGroup for ModifierActiveGroupChild {}
impl ModifierDefaultGroup for ModifierActiveGroupChild {}
impl ModifierOnlyChildGroup for ModifierActiveGroupChild {}
impl ModifierOnlyGroup for ModifierActiveGroupChild {}
impl ModifierRootGroup for ModifierActiveGroupChild {}
impl ModifierLinkGroup for ModifierActiveGroupChild {}
impl ModifierPseudoGroup for ModifierActiveGroupChild {}
impl Atom for ModifierActiveGroupChild {}
impl NamedClasses for ModifierActiveGroupChild {}
impl ModifierFocusWithinGroup for ModifierFocusGroupChild {}
impl ModifierFocusVisibleGroup for ModifierFocusGroupChild {}
impl ModifierEnabledGroup for ModifierFocusGroupChild {}
impl ModifierEmptyGroup for ModifierFocusGroupChild {}
impl ModifierReadGroup for ModifierFocusGroupChild {}
impl ModifierExpandedGroup for ModifierFocusGroupChild {}
impl ModifierCheckedGroup for ModifierFocusGroupChild {}
impl ModifierGrabbedGroup for ModifierFocusGroupChild {}
impl ModifierPressedGroup for ModifierFocusGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierFocusGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierFocusGroupChild {}
impl ModifierValidGroup for ModifierFocusGroupChild {}
impl ModifierLoadingGroup for ModifierFocusGroupChild {}
impl ModifierSelectedGroup for ModifierFocusGroupChild {}
impl ModifierHiddenGroup for ModifierFocusGroupChild {}
impl ModifierAutofillGroup for ModifierFocusGroupChild {}
impl ModifierEvenGroup for ModifierFocusGroupChild {}
impl ModifierNodePositionGroup for ModifierFocusGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierFocusGroupChild {}
impl ModifierVisitedGroup for ModifierFocusGroupChild {}
impl ModifierOptionalGroup for ModifierFocusGroupChild {}
impl ModifierFullScreenGroup for ModifierFocusGroupChild {}
impl ModifierTargetGroup for ModifierFocusGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierFocusGroupChild {}
impl ModifierRequiredGroup for ModifierFocusGroupChild {}
impl ModifierDefaultGroup for ModifierFocusGroupChild {}
impl ModifierOnlyChildGroup for ModifierFocusGroupChild {}
impl ModifierOnlyGroup for ModifierFocusGroupChild {}
impl ModifierRootGroup for ModifierFocusGroupChild {}
impl ModifierLinkGroup for ModifierFocusGroupChild {}
impl ModifierPseudoGroup for ModifierFocusGroupChild {}
impl Atom for ModifierFocusGroupChild {}
impl NamedClasses for ModifierFocusGroupChild {}
impl ModifierFocusVisibleGroup for ModifierFocusWithinGroupChild {}
impl ModifierEnabledGroup for ModifierFocusWithinGroupChild {}
impl ModifierEmptyGroup for ModifierFocusWithinGroupChild {}
impl ModifierReadGroup for ModifierFocusWithinGroupChild {}
impl ModifierExpandedGroup for ModifierFocusWithinGroupChild {}
impl ModifierCheckedGroup for ModifierFocusWithinGroupChild {}
impl ModifierGrabbedGroup for ModifierFocusWithinGroupChild {}
impl ModifierPressedGroup for ModifierFocusWithinGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierFocusWithinGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierFocusWithinGroupChild {}
impl ModifierValidGroup for ModifierFocusWithinGroupChild {}
impl ModifierLoadingGroup for ModifierFocusWithinGroupChild {}
impl ModifierSelectedGroup for ModifierFocusWithinGroupChild {}
impl ModifierHiddenGroup for ModifierFocusWithinGroupChild {}
impl ModifierAutofillGroup for ModifierFocusWithinGroupChild {}
impl ModifierEvenGroup for ModifierFocusWithinGroupChild {}
impl ModifierNodePositionGroup for ModifierFocusWithinGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierFocusWithinGroupChild {}
impl ModifierVisitedGroup for ModifierFocusWithinGroupChild {}
impl ModifierOptionalGroup for ModifierFocusWithinGroupChild {}
impl ModifierFullScreenGroup for ModifierFocusWithinGroupChild {}
impl ModifierTargetGroup for ModifierFocusWithinGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierFocusWithinGroupChild {}
impl ModifierRequiredGroup for ModifierFocusWithinGroupChild {}
impl ModifierDefaultGroup for ModifierFocusWithinGroupChild {}
impl ModifierOnlyChildGroup for ModifierFocusWithinGroupChild {}
impl ModifierOnlyGroup for ModifierFocusWithinGroupChild {}
impl ModifierRootGroup for ModifierFocusWithinGroupChild {}
impl ModifierLinkGroup for ModifierFocusWithinGroupChild {}
impl ModifierPseudoGroup for ModifierFocusWithinGroupChild {}
impl Atom for ModifierFocusWithinGroupChild {}
impl NamedClasses for ModifierFocusWithinGroupChild {}
impl ModifierEnabledGroup for ModifierFocusVisibleGroupChild {}
impl ModifierEmptyGroup for ModifierFocusVisibleGroupChild {}
impl ModifierReadGroup for ModifierFocusVisibleGroupChild {}
impl ModifierExpandedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierCheckedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierGrabbedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierPressedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierFocusVisibleGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierFocusVisibleGroupChild {}
impl ModifierValidGroup for ModifierFocusVisibleGroupChild {}
impl ModifierLoadingGroup for ModifierFocusVisibleGroupChild {}
impl ModifierSelectedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierHiddenGroup for ModifierFocusVisibleGroupChild {}
impl ModifierAutofillGroup for ModifierFocusVisibleGroupChild {}
impl ModifierEvenGroup for ModifierFocusVisibleGroupChild {}
impl ModifierNodePositionGroup for ModifierFocusVisibleGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierFocusVisibleGroupChild {}
impl ModifierVisitedGroup for ModifierFocusVisibleGroupChild {}
impl ModifierOptionalGroup for ModifierFocusVisibleGroupChild {}
impl ModifierFullScreenGroup for ModifierFocusVisibleGroupChild {}
impl ModifierTargetGroup for ModifierFocusVisibleGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierFocusVisibleGroupChild {}
impl ModifierRequiredGroup for ModifierFocusVisibleGroupChild {}
impl ModifierDefaultGroup for ModifierFocusVisibleGroupChild {}
impl ModifierOnlyChildGroup for ModifierFocusVisibleGroupChild {}
impl ModifierOnlyGroup for ModifierFocusVisibleGroupChild {}
impl ModifierRootGroup for ModifierFocusVisibleGroupChild {}
impl ModifierLinkGroup for ModifierFocusVisibleGroupChild {}
impl ModifierPseudoGroup for ModifierFocusVisibleGroupChild {}
impl Atom for ModifierFocusVisibleGroupChild {}
impl NamedClasses for ModifierFocusVisibleGroupChild {}
impl ModifierEmptyGroup for ModifierEnabledGroupChild {}
impl ModifierReadGroup for ModifierEnabledGroupChild {}
impl ModifierExpandedGroup for ModifierEnabledGroupChild {}
impl ModifierCheckedGroup for ModifierEnabledGroupChild {}
impl ModifierGrabbedGroup for ModifierEnabledGroupChild {}
impl ModifierPressedGroup for ModifierEnabledGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierEnabledGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierEnabledGroupChild {}
impl ModifierValidGroup for ModifierEnabledGroupChild {}
impl ModifierLoadingGroup for ModifierEnabledGroupChild {}
impl ModifierSelectedGroup for ModifierEnabledGroupChild {}
impl ModifierHiddenGroup for ModifierEnabledGroupChild {}
impl ModifierAutofillGroup for ModifierEnabledGroupChild {}
impl ModifierEvenGroup for ModifierEnabledGroupChild {}
impl ModifierNodePositionGroup for ModifierEnabledGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierEnabledGroupChild {}
impl ModifierVisitedGroup for ModifierEnabledGroupChild {}
impl ModifierOptionalGroup for ModifierEnabledGroupChild {}
impl ModifierFullScreenGroup for ModifierEnabledGroupChild {}
impl ModifierTargetGroup for ModifierEnabledGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierEnabledGroupChild {}
impl ModifierRequiredGroup for ModifierEnabledGroupChild {}
impl ModifierDefaultGroup for ModifierEnabledGroupChild {}
impl ModifierOnlyChildGroup for ModifierEnabledGroupChild {}
impl ModifierOnlyGroup for ModifierEnabledGroupChild {}
impl ModifierRootGroup for ModifierEnabledGroupChild {}
impl ModifierLinkGroup for ModifierEnabledGroupChild {}
impl ModifierPseudoGroup for ModifierEnabledGroupChild {}
impl Atom for ModifierEnabledGroupChild {}
impl NamedClasses for ModifierEnabledGroupChild {}
impl ModifierReadGroup for ModifierEmptyGroupChild {}
impl ModifierExpandedGroup for ModifierEmptyGroupChild {}
impl ModifierCheckedGroup for ModifierEmptyGroupChild {}
impl ModifierGrabbedGroup for ModifierEmptyGroupChild {}
impl ModifierPressedGroup for ModifierEmptyGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierEmptyGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierEmptyGroupChild {}
impl ModifierValidGroup for ModifierEmptyGroupChild {}
impl ModifierLoadingGroup for ModifierEmptyGroupChild {}
impl ModifierSelectedGroup for ModifierEmptyGroupChild {}
impl ModifierHiddenGroup for ModifierEmptyGroupChild {}
impl ModifierAutofillGroup for ModifierEmptyGroupChild {}
impl ModifierEvenGroup for ModifierEmptyGroupChild {}
impl ModifierNodePositionGroup for ModifierEmptyGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierEmptyGroupChild {}
impl ModifierVisitedGroup for ModifierEmptyGroupChild {}
impl ModifierOptionalGroup for ModifierEmptyGroupChild {}
impl ModifierFullScreenGroup for ModifierEmptyGroupChild {}
impl ModifierTargetGroup for ModifierEmptyGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierEmptyGroupChild {}
impl ModifierRequiredGroup for ModifierEmptyGroupChild {}
impl ModifierDefaultGroup for ModifierEmptyGroupChild {}
impl ModifierOnlyChildGroup for ModifierEmptyGroupChild {}
impl ModifierOnlyGroup for ModifierEmptyGroupChild {}
impl ModifierRootGroup for ModifierEmptyGroupChild {}
impl ModifierLinkGroup for ModifierEmptyGroupChild {}
impl ModifierPseudoGroup for ModifierEmptyGroupChild {}
impl Atom for ModifierEmptyGroupChild {}
impl NamedClasses for ModifierEmptyGroupChild {}
impl ModifierExpandedGroup for ModifierReadGroupChild {}
impl ModifierCheckedGroup for ModifierReadGroupChild {}
impl ModifierGrabbedGroup for ModifierReadGroupChild {}
impl ModifierPressedGroup for ModifierReadGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierReadGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierReadGroupChild {}
impl ModifierValidGroup for ModifierReadGroupChild {}
impl ModifierLoadingGroup for ModifierReadGroupChild {}
impl ModifierSelectedGroup for ModifierReadGroupChild {}
impl ModifierHiddenGroup for ModifierReadGroupChild {}
impl ModifierAutofillGroup for ModifierReadGroupChild {}
impl ModifierEvenGroup for ModifierReadGroupChild {}
impl ModifierNodePositionGroup for ModifierReadGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierReadGroupChild {}
impl ModifierVisitedGroup for ModifierReadGroupChild {}
impl ModifierOptionalGroup for ModifierReadGroupChild {}
impl ModifierFullScreenGroup for ModifierReadGroupChild {}
impl ModifierTargetGroup for ModifierReadGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierReadGroupChild {}
impl ModifierRequiredGroup for ModifierReadGroupChild {}
impl ModifierDefaultGroup for ModifierReadGroupChild {}
impl ModifierOnlyChildGroup for ModifierReadGroupChild {}
impl ModifierOnlyGroup for ModifierReadGroupChild {}
impl ModifierRootGroup for ModifierReadGroupChild {}
impl ModifierLinkGroup for ModifierReadGroupChild {}
impl ModifierPseudoGroup for ModifierReadGroupChild {}
impl Atom for ModifierReadGroupChild {}
impl NamedClasses for ModifierReadGroupChild {}
impl ModifierCheckedGroup for ModifierExpandedGroupChild {}
impl ModifierGrabbedGroup for ModifierExpandedGroupChild {}
impl ModifierPressedGroup for ModifierExpandedGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierExpandedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierExpandedGroupChild {}
impl ModifierValidGroup for ModifierExpandedGroupChild {}
impl ModifierLoadingGroup for ModifierExpandedGroupChild {}
impl ModifierSelectedGroup for ModifierExpandedGroupChild {}
impl ModifierHiddenGroup for ModifierExpandedGroupChild {}
impl ModifierAutofillGroup for ModifierExpandedGroupChild {}
impl ModifierEvenGroup for ModifierExpandedGroupChild {}
impl ModifierNodePositionGroup for ModifierExpandedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierExpandedGroupChild {}
impl ModifierVisitedGroup for ModifierExpandedGroupChild {}
impl ModifierOptionalGroup for ModifierExpandedGroupChild {}
impl ModifierFullScreenGroup for ModifierExpandedGroupChild {}
impl ModifierTargetGroup for ModifierExpandedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierExpandedGroupChild {}
impl ModifierRequiredGroup for ModifierExpandedGroupChild {}
impl ModifierDefaultGroup for ModifierExpandedGroupChild {}
impl ModifierOnlyChildGroup for ModifierExpandedGroupChild {}
impl ModifierOnlyGroup for ModifierExpandedGroupChild {}
impl ModifierRootGroup for ModifierExpandedGroupChild {}
impl ModifierLinkGroup for ModifierExpandedGroupChild {}
impl ModifierPseudoGroup for ModifierExpandedGroupChild {}
impl Atom for ModifierExpandedGroupChild {}
impl NamedClasses for ModifierExpandedGroupChild {}
impl ModifierGrabbedGroup for ModifierCheckedGroupChild {}
impl ModifierPressedGroup for ModifierCheckedGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierCheckedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierCheckedGroupChild {}
impl ModifierValidGroup for ModifierCheckedGroupChild {}
impl ModifierLoadingGroup for ModifierCheckedGroupChild {}
impl ModifierSelectedGroup for ModifierCheckedGroupChild {}
impl ModifierHiddenGroup for ModifierCheckedGroupChild {}
impl ModifierAutofillGroup for ModifierCheckedGroupChild {}
impl ModifierEvenGroup for ModifierCheckedGroupChild {}
impl ModifierNodePositionGroup for ModifierCheckedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierCheckedGroupChild {}
impl ModifierVisitedGroup for ModifierCheckedGroupChild {}
impl ModifierOptionalGroup for ModifierCheckedGroupChild {}
impl ModifierFullScreenGroup for ModifierCheckedGroupChild {}
impl ModifierTargetGroup for ModifierCheckedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierCheckedGroupChild {}
impl ModifierRequiredGroup for ModifierCheckedGroupChild {}
impl ModifierDefaultGroup for ModifierCheckedGroupChild {}
impl ModifierOnlyChildGroup for ModifierCheckedGroupChild {}
impl ModifierOnlyGroup for ModifierCheckedGroupChild {}
impl ModifierRootGroup for ModifierCheckedGroupChild {}
impl ModifierLinkGroup for ModifierCheckedGroupChild {}
impl ModifierPseudoGroup for ModifierCheckedGroupChild {}
impl Atom for ModifierCheckedGroupChild {}
impl NamedClasses for ModifierCheckedGroupChild {}
impl ModifierPressedGroup for ModifierGrabbedGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierGrabbedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierGrabbedGroupChild {}
impl ModifierValidGroup for ModifierGrabbedGroupChild {}
impl ModifierLoadingGroup for ModifierGrabbedGroupChild {}
impl ModifierSelectedGroup for ModifierGrabbedGroupChild {}
impl ModifierHiddenGroup for ModifierGrabbedGroupChild {}
impl ModifierAutofillGroup for ModifierGrabbedGroupChild {}
impl ModifierEvenGroup for ModifierGrabbedGroupChild {}
impl ModifierNodePositionGroup for ModifierGrabbedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierGrabbedGroupChild {}
impl ModifierVisitedGroup for ModifierGrabbedGroupChild {}
impl ModifierOptionalGroup for ModifierGrabbedGroupChild {}
impl ModifierFullScreenGroup for ModifierGrabbedGroupChild {}
impl ModifierTargetGroup for ModifierGrabbedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierGrabbedGroupChild {}
impl ModifierRequiredGroup for ModifierGrabbedGroupChild {}
impl ModifierDefaultGroup for ModifierGrabbedGroupChild {}
impl ModifierOnlyChildGroup for ModifierGrabbedGroupChild {}
impl ModifierOnlyGroup for ModifierGrabbedGroupChild {}
impl ModifierRootGroup for ModifierGrabbedGroupChild {}
impl ModifierLinkGroup for ModifierGrabbedGroupChild {}
impl ModifierPseudoGroup for ModifierGrabbedGroupChild {}
impl Atom for ModifierGrabbedGroupChild {}
impl NamedClasses for ModifierGrabbedGroupChild {}
impl ModifierInvalidGrammarGroup for ModifierPressedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierPressedGroupChild {}
impl ModifierValidGroup for ModifierPressedGroupChild {}
impl ModifierLoadingGroup for ModifierPressedGroupChild {}
impl ModifierSelectedGroup for ModifierPressedGroupChild {}
impl ModifierHiddenGroup for ModifierPressedGroupChild {}
impl ModifierAutofillGroup for ModifierPressedGroupChild {}
impl ModifierEvenGroup for ModifierPressedGroupChild {}
impl ModifierNodePositionGroup for ModifierPressedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierPressedGroupChild {}
impl ModifierVisitedGroup for ModifierPressedGroupChild {}
impl ModifierOptionalGroup for ModifierPressedGroupChild {}
impl ModifierFullScreenGroup for ModifierPressedGroupChild {}
impl ModifierTargetGroup for ModifierPressedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierPressedGroupChild {}
impl ModifierRequiredGroup for ModifierPressedGroupChild {}
impl ModifierDefaultGroup for ModifierPressedGroupChild {}
impl ModifierOnlyChildGroup for ModifierPressedGroupChild {}
impl ModifierOnlyGroup for ModifierPressedGroupChild {}
impl ModifierRootGroup for ModifierPressedGroupChild {}
impl ModifierLinkGroup for ModifierPressedGroupChild {}
impl ModifierPseudoGroup for ModifierPressedGroupChild {}
impl Atom for ModifierPressedGroupChild {}
impl NamedClasses for ModifierPressedGroupChild {}
impl ModifierInvalidSpellingGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierValidGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierLoadingGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierSelectedGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierHiddenGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierAutofillGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierEvenGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierNodePositionGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierVisitedGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierOptionalGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierFullScreenGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierTargetGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierRequiredGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierDefaultGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierOnlyChildGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierOnlyGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierRootGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierLinkGroup for ModifierInvalidGrammarGroupChild {}
impl ModifierPseudoGroup for ModifierInvalidGrammarGroupChild {}
impl Atom for ModifierInvalidGrammarGroupChild {}
impl NamedClasses for ModifierInvalidGrammarGroupChild {}
impl ModifierValidGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierLoadingGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierSelectedGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierHiddenGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierAutofillGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierEvenGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierNodePositionGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierVisitedGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierOptionalGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierFullScreenGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierTargetGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierRequiredGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierDefaultGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierOnlyChildGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierOnlyGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierRootGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierLinkGroup for ModifierInvalidSpellingGroupChild {}
impl ModifierPseudoGroup for ModifierInvalidSpellingGroupChild {}
impl Atom for ModifierInvalidSpellingGroupChild {}
impl NamedClasses for ModifierInvalidSpellingGroupChild {}
impl ModifierLoadingGroup for ModifierValidGroupChild {}
impl ModifierSelectedGroup for ModifierValidGroupChild {}
impl ModifierHiddenGroup for ModifierValidGroupChild {}
impl ModifierAutofillGroup for ModifierValidGroupChild {}
impl ModifierEvenGroup for ModifierValidGroupChild {}
impl ModifierNodePositionGroup for ModifierValidGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierValidGroupChild {}
impl ModifierVisitedGroup for ModifierValidGroupChild {}
impl ModifierOptionalGroup for ModifierValidGroupChild {}
impl ModifierFullScreenGroup for ModifierValidGroupChild {}
impl ModifierTargetGroup for ModifierValidGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierValidGroupChild {}
impl ModifierRequiredGroup for ModifierValidGroupChild {}
impl ModifierDefaultGroup for ModifierValidGroupChild {}
impl ModifierOnlyChildGroup for ModifierValidGroupChild {}
impl ModifierOnlyGroup for ModifierValidGroupChild {}
impl ModifierRootGroup for ModifierValidGroupChild {}
impl ModifierLinkGroup for ModifierValidGroupChild {}
impl ModifierPseudoGroup for ModifierValidGroupChild {}
impl Atom for ModifierValidGroupChild {}
impl NamedClasses for ModifierValidGroupChild {}
impl ModifierSelectedGroup for ModifierLoadingGroupChild {}
impl ModifierHiddenGroup for ModifierLoadingGroupChild {}
impl ModifierAutofillGroup for ModifierLoadingGroupChild {}
impl ModifierEvenGroup for ModifierLoadingGroupChild {}
impl ModifierNodePositionGroup for ModifierLoadingGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierLoadingGroupChild {}
impl ModifierVisitedGroup for ModifierLoadingGroupChild {}
impl ModifierOptionalGroup for ModifierLoadingGroupChild {}
impl ModifierFullScreenGroup for ModifierLoadingGroupChild {}
impl ModifierTargetGroup for ModifierLoadingGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierLoadingGroupChild {}
impl ModifierRequiredGroup for ModifierLoadingGroupChild {}
impl ModifierDefaultGroup for ModifierLoadingGroupChild {}
impl ModifierOnlyChildGroup for ModifierLoadingGroupChild {}
impl ModifierOnlyGroup for ModifierLoadingGroupChild {}
impl ModifierRootGroup for ModifierLoadingGroupChild {}
impl ModifierLinkGroup for ModifierLoadingGroupChild {}
impl ModifierPseudoGroup for ModifierLoadingGroupChild {}
impl Atom for ModifierLoadingGroupChild {}
impl NamedClasses for ModifierLoadingGroupChild {}
impl ModifierHiddenGroup for ModifierSelectedGroupChild {}
impl ModifierAutofillGroup for ModifierSelectedGroupChild {}
impl ModifierEvenGroup for ModifierSelectedGroupChild {}
impl ModifierNodePositionGroup for ModifierSelectedGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierSelectedGroupChild {}
impl ModifierVisitedGroup for ModifierSelectedGroupChild {}
impl ModifierOptionalGroup for ModifierSelectedGroupChild {}
impl ModifierFullScreenGroup for ModifierSelectedGroupChild {}
impl ModifierTargetGroup for ModifierSelectedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierSelectedGroupChild {}
impl ModifierRequiredGroup for ModifierSelectedGroupChild {}
impl ModifierDefaultGroup for ModifierSelectedGroupChild {}
impl ModifierOnlyChildGroup for ModifierSelectedGroupChild {}
impl ModifierOnlyGroup for ModifierSelectedGroupChild {}
impl ModifierRootGroup for ModifierSelectedGroupChild {}
impl ModifierLinkGroup for ModifierSelectedGroupChild {}
impl ModifierPseudoGroup for ModifierSelectedGroupChild {}
impl Atom for ModifierSelectedGroupChild {}
impl NamedClasses for ModifierSelectedGroupChild {}
impl ModifierAutofillGroup for ModifierHiddenGroupChild {}
impl ModifierEvenGroup for ModifierHiddenGroupChild {}
impl ModifierNodePositionGroup for ModifierHiddenGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierHiddenGroupChild {}
impl ModifierVisitedGroup for ModifierHiddenGroupChild {}
impl ModifierOptionalGroup for ModifierHiddenGroupChild {}
impl ModifierFullScreenGroup for ModifierHiddenGroupChild {}
impl ModifierTargetGroup for ModifierHiddenGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierHiddenGroupChild {}
impl ModifierRequiredGroup for ModifierHiddenGroupChild {}
impl ModifierDefaultGroup for ModifierHiddenGroupChild {}
impl ModifierOnlyChildGroup for ModifierHiddenGroupChild {}
impl ModifierOnlyGroup for ModifierHiddenGroupChild {}
impl ModifierRootGroup for ModifierHiddenGroupChild {}
impl ModifierLinkGroup for ModifierHiddenGroupChild {}
impl ModifierPseudoGroup for ModifierHiddenGroupChild {}
impl Atom for ModifierHiddenGroupChild {}
impl NamedClasses for ModifierHiddenGroupChild {}
impl ModifierEvenGroup for ModifierAutofillGroupChild {}
impl ModifierNodePositionGroup for ModifierAutofillGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierAutofillGroupChild {}
impl ModifierVisitedGroup for ModifierAutofillGroupChild {}
impl ModifierOptionalGroup for ModifierAutofillGroupChild {}
impl ModifierFullScreenGroup for ModifierAutofillGroupChild {}
impl ModifierTargetGroup for ModifierAutofillGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierAutofillGroupChild {}
impl ModifierRequiredGroup for ModifierAutofillGroupChild {}
impl ModifierDefaultGroup for ModifierAutofillGroupChild {}
impl ModifierOnlyChildGroup for ModifierAutofillGroupChild {}
impl ModifierOnlyGroup for ModifierAutofillGroupChild {}
impl ModifierRootGroup for ModifierAutofillGroupChild {}
impl ModifierLinkGroup for ModifierAutofillGroupChild {}
impl ModifierPseudoGroup for ModifierAutofillGroupChild {}
impl Atom for ModifierAutofillGroupChild {}
impl NamedClasses for ModifierAutofillGroupChild {}
impl ModifierNodePositionGroup for ModifierEvenGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierEvenGroupChild {}
impl ModifierVisitedGroup for ModifierEvenGroupChild {}
impl ModifierOptionalGroup for ModifierEvenGroupChild {}
impl ModifierFullScreenGroup for ModifierEvenGroupChild {}
impl ModifierTargetGroup for ModifierEvenGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierEvenGroupChild {}
impl ModifierRequiredGroup for ModifierEvenGroupChild {}
impl ModifierDefaultGroup for ModifierEvenGroupChild {}
impl ModifierOnlyChildGroup for ModifierEvenGroupChild {}
impl ModifierOnlyGroup for ModifierEvenGroupChild {}
impl ModifierRootGroup for ModifierEvenGroupChild {}
impl ModifierLinkGroup for ModifierEvenGroupChild {}
impl ModifierPseudoGroup for ModifierEvenGroupChild {}
impl Atom for ModifierEvenGroupChild {}
impl NamedClasses for ModifierEvenGroupChild {}
impl ModifierNodeOfTypeGroup for ModifierNodePositionGroupChild {}
impl ModifierVisitedGroup for ModifierNodePositionGroupChild {}
impl ModifierOptionalGroup for ModifierNodePositionGroupChild {}
impl ModifierFullScreenGroup for ModifierNodePositionGroupChild {}
impl ModifierTargetGroup for ModifierNodePositionGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierNodePositionGroupChild {}
impl ModifierRequiredGroup for ModifierNodePositionGroupChild {}
impl ModifierDefaultGroup for ModifierNodePositionGroupChild {}
impl ModifierOnlyChildGroup for ModifierNodePositionGroupChild {}
impl ModifierOnlyGroup for ModifierNodePositionGroupChild {}
impl ModifierRootGroup for ModifierNodePositionGroupChild {}
impl ModifierLinkGroup for ModifierNodePositionGroupChild {}
impl ModifierPseudoGroup for ModifierNodePositionGroupChild {}
impl Atom for ModifierNodePositionGroupChild {}
impl NamedClasses for ModifierNodePositionGroupChild {}
impl ModifierVisitedGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierOptionalGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierFullScreenGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierTargetGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierRequiredGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierDefaultGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierOnlyChildGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierOnlyGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierRootGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierLinkGroup for ModifierNodeOfTypeGroupChild {}
impl ModifierPseudoGroup for ModifierNodeOfTypeGroupChild {}
impl Atom for ModifierNodeOfTypeGroupChild {}
impl NamedClasses for ModifierNodeOfTypeGroupChild {}
impl ModifierOptionalGroup for ModifierVisitedGroupChild {}
impl ModifierFullScreenGroup for ModifierVisitedGroupChild {}
impl ModifierTargetGroup for ModifierVisitedGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierVisitedGroupChild {}
impl ModifierRequiredGroup for ModifierVisitedGroupChild {}
impl ModifierDefaultGroup for ModifierVisitedGroupChild {}
impl ModifierOnlyChildGroup for ModifierVisitedGroupChild {}
impl ModifierOnlyGroup for ModifierVisitedGroupChild {}
impl ModifierRootGroup for ModifierVisitedGroupChild {}
impl ModifierLinkGroup for ModifierVisitedGroupChild {}
impl ModifierPseudoGroup for ModifierVisitedGroupChild {}
impl Atom for ModifierVisitedGroupChild {}
impl NamedClasses for ModifierVisitedGroupChild {}
impl ModifierFullScreenGroup for ModifierOptionalGroupChild {}
impl ModifierTargetGroup for ModifierOptionalGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierOptionalGroupChild {}
impl ModifierRequiredGroup for ModifierOptionalGroupChild {}
impl ModifierDefaultGroup for ModifierOptionalGroupChild {}
impl ModifierOnlyChildGroup for ModifierOptionalGroupChild {}
impl ModifierOnlyGroup for ModifierOptionalGroupChild {}
impl ModifierRootGroup for ModifierOptionalGroupChild {}
impl ModifierLinkGroup for ModifierOptionalGroupChild {}
impl ModifierPseudoGroup for ModifierOptionalGroupChild {}
impl Atom for ModifierOptionalGroupChild {}
impl NamedClasses for ModifierOptionalGroupChild {}
impl ModifierTargetGroup for ModifierFullScreenGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierFullScreenGroupChild {}
impl ModifierRequiredGroup for ModifierFullScreenGroupChild {}
impl ModifierDefaultGroup for ModifierFullScreenGroupChild {}
impl ModifierOnlyChildGroup for ModifierFullScreenGroupChild {}
impl ModifierOnlyGroup for ModifierFullScreenGroupChild {}
impl ModifierRootGroup for ModifierFullScreenGroupChild {}
impl ModifierLinkGroup for ModifierFullScreenGroupChild {}
impl ModifierPseudoGroup for ModifierFullScreenGroupChild {}
impl Atom for ModifierFullScreenGroupChild {}
impl NamedClasses for ModifierFullScreenGroupChild {}
impl ModifierPlaceholderShownGroup for ModifierTargetGroupChild {}
impl ModifierRequiredGroup for ModifierTargetGroupChild {}
impl ModifierDefaultGroup for ModifierTargetGroupChild {}
impl ModifierOnlyChildGroup for ModifierTargetGroupChild {}
impl ModifierOnlyGroup for ModifierTargetGroupChild {}
impl ModifierRootGroup for ModifierTargetGroupChild {}
impl ModifierLinkGroup for ModifierTargetGroupChild {}
impl ModifierPseudoGroup for ModifierTargetGroupChild {}
impl Atom for ModifierTargetGroupChild {}
impl NamedClasses for ModifierTargetGroupChild {}
impl ModifierRequiredGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierDefaultGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierOnlyChildGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierOnlyGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierRootGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierLinkGroup for ModifierPlaceholderShownGroupChild {}
impl ModifierPseudoGroup for ModifierPlaceholderShownGroupChild {}
impl Atom for ModifierPlaceholderShownGroupChild {}
impl NamedClasses for ModifierPlaceholderShownGroupChild {}
impl ModifierDefaultGroup for ModifierRequiredGroupChild {}
impl ModifierOnlyChildGroup for ModifierRequiredGroupChild {}
impl ModifierOnlyGroup for ModifierRequiredGroupChild {}
impl ModifierRootGroup for ModifierRequiredGroupChild {}
impl ModifierLinkGroup for ModifierRequiredGroupChild {}
impl ModifierPseudoGroup for ModifierRequiredGroupChild {}
impl Atom for ModifierRequiredGroupChild {}
impl NamedClasses for ModifierRequiredGroupChild {}
impl ModifierOnlyChildGroup for ModifierDefaultGroupChild {}
impl ModifierOnlyGroup for ModifierDefaultGroupChild {}
impl ModifierRootGroup for ModifierDefaultGroupChild {}
impl ModifierLinkGroup for ModifierDefaultGroupChild {}
impl ModifierPseudoGroup for ModifierDefaultGroupChild {}
impl Atom for ModifierDefaultGroupChild {}
impl NamedClasses for ModifierDefaultGroupChild {}
impl ModifierOnlyGroup for ModifierOnlyChildGroupChild {}
impl ModifierRootGroup for ModifierOnlyChildGroupChild {}
impl ModifierLinkGroup for ModifierOnlyChildGroupChild {}
impl ModifierPseudoGroup for ModifierOnlyChildGroupChild {}
impl Atom for ModifierOnlyChildGroupChild {}
impl NamedClasses for ModifierOnlyChildGroupChild {}
impl ModifierRootGroup for ModifierOnlyGroupChild {}
impl ModifierLinkGroup for ModifierOnlyGroupChild {}
impl ModifierPseudoGroup for ModifierOnlyGroupChild {}
impl Atom for ModifierOnlyGroupChild {}
impl NamedClasses for ModifierOnlyGroupChild {}
impl ModifierLinkGroup for ModifierRootGroupChild {}
impl ModifierPseudoGroup for ModifierRootGroupChild {}
impl Atom for ModifierRootGroupChild {}
impl NamedClasses for ModifierRootGroupChild {}
impl ModifierPseudoGroup for ModifierLinkGroupChild {}
impl Atom for ModifierLinkGroupChild {}
impl NamedClasses for ModifierLinkGroupChild {}
impl Atom for ModifierPseudoGroupChild {}
impl NamedClasses for ModifierPseudoGroupChild {}
