#![deny(clippy::all)]

use heck::ToPascalCase;
use heck::ToSnakeCase;
use indexmap::indexmap;
use indexmap::IndexMap;
use indoc::indoc;
use serde::Deserialize;
use serde::Serialize;
use skribble_core::*;
use typed_builder::TypedBuilder;

// #[cfg(test)]
mod explore;

/// This plugin generates `rust` code from the configuration.
#[derive(Debug, Clone, Default, Deserialize, TypedBuilder, Serialize)]
pub struct RustPlugin {
  /// The formatter command.
  /// e.g. `dprint`
  #[builder(default, setter(into, strip_option))]
  pub formatter: Option<String>,

  /// The formatter arguments.
  /// e.g. `["fmt", "--stdin", "file.rs"]`
  #[builder(default, setter(into))]
  pub formatter_args: Vec<String>,
}

impl Plugin for RustPlugin {
  fn get_id(&self) -> String {
    "skribble_plugin_rust".into()
  }

  fn generate_code(&self, config: &MergedConfig) -> AnyResult<GeneratedFiles> {
    let mut files = GeneratedFiles::default();
    files.push(self.generate_file_contents(config));

    Ok(files)
  }

  fn get_description(&self) -> String {
    "This plugin provides support for generating rust code from your `skribble` configuration."
      .into()
  }
}

impl RustPlugin {
  fn generate_file_contents(&self, config: &MergedConfig) -> GeneratedFile {
    let mut sections = Vec::<String>::new();
    let mut trait_implementations = Vec::<String>::new();
    let mut trait_map: IndexMap<String, usize> = indexmap! {"SkribbleRoot".into() => 0};

    for (key, map) in config.media_queries.iter() {
      let mut section = Vec::<String>::new();
      let trait_name = format!("MediaQuery{}", key.to_pascal_case());
      let struct_name = format!("{trait_name}Child");
      section.push(generate_struct(&struct_name));
      section.push(generate_impl_skribble_value(&struct_name));

      let mut methods = vec![format!("pub trait {trait_name}: SkribbleValue {{")];

      for (name, value) in map.iter() {
        let method_name = name.to_snake_case();

        if let Some(ref description) = value.description {
          let description = description
            .split('\n')
            .collect::<Vec<&str>>()
            .join("\n/// ");
          methods.push(format!("/// {description}"));
        }
        methods.push(format!("fn {method_name}(&self) -> {struct_name} {{",));
        methods.push(indent(
          IndentProps::builder()
            .content(format!(
              "{struct_name}::from_ref(self.append_to_skribble_value(\"{name}\"))"
            ))
            .build(),
        ));
        methods.push("}".into());
      }
      methods.push("}".into());
      section.push(methods.join("\n"));

      trait_implementations.push(struct_name.to_string());
      trait_map.insert(trait_name, trait_implementations.len());
      sections.push(section.join("\n"));
    }

    let contents = format!("{HEADER}\n{}", sections.join("\n"));

    GeneratedFile::builder()
      .path("./src/skribble.rs")
      .content(contents)
      .build()
  }
}

fn generate_impl_skribble_value(name: impl AsRef<str>) -> String {
  format!(
    indoc!(
      "
      impl SkribbleValue for {} {{
        fn from_ref(value: impl AsRef<str>) -> Self {{
          Self(value.as_ref().to_string())
        }}
        fn get_skribble_value(&self) -> &String {{
          &self.0
        }}
      }}
    "
    ),
    name.as_ref()
  )
}

fn generate_struct(name: impl AsRef<str>) -> String {
  let name = name.as_ref();
  format!("pub struct {name}(String);")
}

const HEADER: &str = r#"// This file was generated by skribble.
pub fn sk() -> SkribbleRoot {
  SkribbleRoot::from_ref("")
}
pub struct SkribbleRoot(String);
impl SkribbleValue for SkribbleRoot {
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait SkribbleAtomValue {
  fn from_ref(value: impl AsRef<str>) -> Self;
  fn get_skribble_value(&self) -> &String;
  fn append_to_skribble_value(&self, value: impl AsRef<str>) -> String {
    format!("{}{}", self.get_skribble_value(), value.as_ref())
  }
}
pub trait SkribbleValue {
  fn from_ref(value: impl AsRef<str>) -> Self;
  fn get_skribble_value(&self) -> &String;
  fn append_to_skribble_value(&self, value: impl AsRef<str>) -> String {
    format!("{}{}", self.get_skribble_value(), value.as_ref())
  }
}
"#;

#[cfg(test)]
mod tests {
  use skribble_core::*;
  use skribble_preset_default::PresetDefault;

  use super::*;

  #[test]
  fn default_can_be_added_to_runner() {
    println!("TRYING SOMETHING! {{");
    let default_preset = PresetDefault::builder().build();
    let rust_plugin = RustPlugin::builder().build();

    let config: StyleConfig = StyleConfig::builder()
      .plugins(vec![
        PluginContainer::from(default_preset),
        PluginContainer::from(rust_plugin),
      ])
      .build();

    let mut runner = SkribbleRunner::new(config);
    let _ = runner.run();
    let _ = runner.generate();
  }
}
