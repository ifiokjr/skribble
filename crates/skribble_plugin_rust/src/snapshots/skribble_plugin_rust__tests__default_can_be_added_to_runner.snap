---
source: crates/skribble_plugin_rust/src/lib.rs
expression: content
---
// This file was generated by skribble.
pub fn sk() -> SkribbleRoot {
  SkribbleRoot::from_ref("")
}
pub struct SkribbleRoot(String);
impl SkribbleValue for SkribbleRoot {
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }

  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}
pub trait SkribbleAtomValue {
  fn from_ref(value: impl AsRef<str>) -> Self;
  fn get_skribble_value(&self) -> &String;
  fn append_to_skribble_value(&self, value: impl AsRef<str>) -> String {
    format!("{}{}", self.get_skribble_value(), value.as_ref())
  }
}
pub trait SkribbleValue {
  fn from_ref(value: impl AsRef<str>) -> Self;
  fn get_skribble_value(&self) -> &String;
  fn append_to_skribble_value(&self, value: impl AsRef<str>) -> String {
    format!("{}{}", self.get_skribble_value(), value.as_ref())
  }
}

pub struct MediaQueryDeviceCategoriesChild(String);
impl SkribbleValue for MediaQueryDeviceCategoriesChild {
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}

pub trait MediaQueryDeviceCategories: SkribbleValue {
  /// The media query for devices with a screen.
  fn screen(&self) -> MediaQueryDeviceCategoriesChild {
    MediaQueryDeviceCategoriesChild::from_ref(self.append_to_skribble_value("screen"))
  }
  /// The media query for devices with a printer.
  fn print(&self) -> MediaQueryDeviceCategoriesChild {
    MediaQueryDeviceCategoriesChild::from_ref(self.append_to_skribble_value("print"))
  }
}
pub struct MediaQueryBreakpointsChild(String);
impl SkribbleValue for MediaQueryBreakpointsChild {
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}

pub trait MediaQueryBreakpoints: SkribbleValue {
  /// The breakpoint for devices with screen size greater than tiny.
  fn sm(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("sm"))
  }
  /// The breakpoint for devices screen size greater than medium
  fn md(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("md"))
  }
  /// The breakpoint for devices screen size greater than large
  fn lg(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("lg"))
  }
  /// The breakpoint for devices screen size greater than extra large
  fn xl(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("xl"))
  }
  /// The breakpoint for devices screen size greater than xxl
  fn xxl(&self) -> MediaQueryBreakpointsChild {
    MediaQueryBreakpointsChild::from_ref(self.append_to_skribble_value("xxl"))
  }
}
pub struct MediaQueryOrientationChild(String);
impl SkribbleValue for MediaQueryOrientationChild {
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}

pub trait MediaQueryOrientation: SkribbleValue {
  /// The media query for devices with a portrait orientation.
  fn portrait(&self) -> MediaQueryOrientationChild {
    MediaQueryOrientationChild::from_ref(self.append_to_skribble_value("portrait"))
  }
  /// The media query for devices with a landscape orientation.
  fn landscape(&self) -> MediaQueryOrientationChild {
    MediaQueryOrientationChild::from_ref(self.append_to_skribble_value("landscape"))
  }
}
pub struct MediaQueryMotionChild(String);
impl SkribbleValue for MediaQueryMotionChild {
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}

pub trait MediaQueryMotion: SkribbleValue {
  /// The media query for devices with a reduced motion preference.
  fn motion_reduce(&self) -> MediaQueryMotionChild {
    MediaQueryMotionChild::from_ref(self.append_to_skribble_value("motionReduce"))
  }
  /// The media query for devices with a no preference motion preference.
  fn motion_safe(&self) -> MediaQueryMotionChild {
    MediaQueryMotionChild::from_ref(self.append_to_skribble_value("motionSafe"))
  }
}
pub struct MediaQueryDarkModeChild(String);
impl SkribbleValue for MediaQueryDarkModeChild {
  fn from_ref(value: impl AsRef<str>) -> Self {
    Self(value.as_ref().to_string())
  }
  fn get_skribble_value(&self) -> &String {
    &self.0
  }
}

pub trait MediaQueryDarkMode: SkribbleValue {
  /// The media query for devices with a dark color scheme.
  fn dark(&self) -> MediaQueryDarkModeChild {
    MediaQueryDarkModeChild::from_ref(self.append_to_skribble_value("dark"))
  }
  /// The media query for devices with a light color scheme.
  fn light(&self) -> MediaQueryDarkModeChild {
    MediaQueryDarkModeChild::from_ref(self.append_to_skribble_value("light"))
  }
}
impl MediaQueryDeviceCategories for SkribbleRoot {}
impl MediaQueryBreakpoints for SkribbleRoot {}
impl MediaQueryOrientation for SkribbleRoot {}
impl MediaQueryMotion for SkribbleRoot {}
impl MediaQueryDarkMode for SkribbleRoot {}
impl MediaQueryBreakpoints for MediaQueryDeviceCategoriesChild {}
impl MediaQueryOrientation for MediaQueryDeviceCategoriesChild {}
impl MediaQueryMotion for MediaQueryDeviceCategoriesChild {}
impl MediaQueryDarkMode for MediaQueryDeviceCategoriesChild {}
impl MediaQueryOrientation for MediaQueryBreakpointsChild {}
impl MediaQueryMotion for MediaQueryBreakpointsChild {}
impl MediaQueryDarkMode for MediaQueryBreakpointsChild {}
impl MediaQueryMotion for MediaQueryOrientationChild {}
impl MediaQueryDarkMode for MediaQueryOrientationChild {}
impl MediaQueryDarkMode for MediaQueryMotionChild {}
